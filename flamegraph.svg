<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1526" onload="init(evt)" viewBox="0 0 1200 1526" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1526" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1509.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1509.00"> </text><svg id="frames" x="10" width="1180" total_samples="1387350886"><g><title>_IO_wide_data_0 (2,983,768 samples, 0.22%)</title><rect x="0.0000%" y="1445" width="0.2151%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2983768"/><text x="0.2500%" y="1455.50"></text></g><g><title>pulldown_cmark::parse::Parser&lt;F&gt;::handle_inline_pass1 (2,983,768 samples, 0.22%)</title><rect x="0.0000%" y="1429" width="0.2151%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2983768"/><text x="0.2500%" y="1439.50"></text></g><g><title>syntastica_highlight::HighlightConfiguration::configure (3,051,337 samples, 0.22%)</title><rect x="0.2151%" y="997" width="0.2199%" height="15" fill="rgb(221,193,54)" fg:x="2983768" fg:w="3051337"/><text x="0.4651%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (3,051,337 samples, 0.22%)</title><rect x="0.2151%" y="981" width="0.2199%" height="15" fill="rgb(248,212,6)" fg:x="2983768" fg:w="3051337"/><text x="0.4651%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,051,337 samples, 0.22%)</title><rect x="0.2151%" y="965" width="0.2199%" height="15" fill="rgb(208,68,35)" fg:x="2983768" fg:w="3051337"/><text x="0.4651%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3,051,337 samples, 0.22%)</title><rect x="0.2151%" y="949" width="0.2199%" height="15" fill="rgb(232,128,0)" fg:x="2983768" fg:w="3051337"/><text x="0.4651%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,051,337 samples, 0.22%)</title><rect x="0.2151%" y="933" width="0.2199%" height="15" fill="rgb(207,160,47)" fg:x="2983768" fg:w="3051337"/><text x="0.4651%" y="943.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,051,337 samples, 0.22%)</title><rect x="0.2151%" y="917" width="0.2199%" height="15" fill="rgb(228,23,34)" fg:x="2983768" fg:w="3051337"/><text x="0.4651%" y="927.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,051,337 samples, 0.22%)</title><rect x="0.2151%" y="901" width="0.2199%" height="15" fill="rgb(218,30,26)" fg:x="2983768" fg:w="3051337"/><text x="0.4651%" y="911.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (3,051,337 samples, 0.22%)</title><rect x="0.2151%" y="885" width="0.2199%" height="15" fill="rgb(220,122,19)" fg:x="2983768" fg:w="3051337"/><text x="0.4651%" y="895.50"></text></g><g><title>syntastica_highlight::HighlightConfiguration::configure::{{closure}} (3,051,337 samples, 0.22%)</title><rect x="0.2151%" y="869" width="0.2199%" height="15" fill="rgb(250,228,42)" fg:x="2983768" fg:w="3051337"/><text x="0.4651%" y="879.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,051,337 samples, 0.22%)</title><rect x="0.2151%" y="853" width="0.2199%" height="15" fill="rgb(240,193,28)" fg:x="2983768" fg:w="3051337"/><text x="0.4651%" y="863.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (3,051,337 samples, 0.22%)</title><rect x="0.2151%" y="837" width="0.2199%" height="15" fill="rgb(216,20,37)" fg:x="2983768" fg:w="3051337"/><text x="0.4651%" y="847.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (3,051,337 samples, 0.22%)</title><rect x="0.2151%" y="821" width="0.2199%" height="15" fill="rgb(206,188,39)" fg:x="2983768" fg:w="3051337"/><text x="0.4651%" y="831.50"></text></g><g><title>core::slice::memchr::memchr (3,051,337 samples, 0.22%)</title><rect x="0.2151%" y="805" width="0.2199%" height="15" fill="rgb(217,207,13)" fg:x="2983768" fg:w="3051337"/><text x="0.4651%" y="815.50"></text></g><g><title>core::slice::memchr::memchr_aligned (3,051,337 samples, 0.22%)</title><rect x="0.2151%" y="789" width="0.2199%" height="15" fill="rgb(231,73,38)" fg:x="2983768" fg:w="3051337"/><text x="0.4651%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (5,997,275 samples, 0.43%)</title><rect x="0.4350%" y="949" width="0.4323%" height="15" fill="rgb(225,20,46)" fg:x="6035105" fg:w="5997275"/><text x="0.6850%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (5,997,275 samples, 0.43%)</title><rect x="0.4350%" y="933" width="0.4323%" height="15" fill="rgb(210,31,41)" fg:x="6035105" fg:w="5997275"/><text x="0.6850%" y="943.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (5,997,275 samples, 0.43%)</title><rect x="0.4350%" y="917" width="0.4323%" height="15" fill="rgb(221,200,47)" fg:x="6035105" fg:w="5997275"/><text x="0.6850%" y="927.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,997,275 samples, 0.43%)</title><rect x="0.4350%" y="901" width="0.4323%" height="15" fill="rgb(226,26,5)" fg:x="6035105" fg:w="5997275"/><text x="0.6850%" y="911.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,997,275 samples, 0.43%)</title><rect x="0.4350%" y="885" width="0.4323%" height="15" fill="rgb(249,33,26)" fg:x="6035105" fg:w="5997275"/><text x="0.6850%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5,997,275 samples, 0.43%)</title><rect x="0.4350%" y="869" width="0.4323%" height="15" fill="rgb(235,183,28)" fg:x="6035105" fg:w="5997275"/><text x="0.6850%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (5,997,275 samples, 0.43%)</title><rect x="0.4350%" y="853" width="0.4323%" height="15" fill="rgb(221,5,38)" fg:x="6035105" fg:w="5997275"/><text x="0.6850%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (5,997,275 samples, 0.43%)</title><rect x="0.4350%" y="837" width="0.4323%" height="15" fill="rgb(247,18,42)" fg:x="6035105" fg:w="5997275"/><text x="0.6850%" y="847.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (5,997,275 samples, 0.43%)</title><rect x="0.4350%" y="821" width="0.4323%" height="15" fill="rgb(241,131,45)" fg:x="6035105" fg:w="5997275"/><text x="0.6850%" y="831.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (5,997,275 samples, 0.43%)</title><rect x="0.4350%" y="805" width="0.4323%" height="15" fill="rgb(249,31,29)" fg:x="6035105" fg:w="5997275"/><text x="0.6850%" y="815.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (5,997,275 samples, 0.43%)</title><rect x="0.4350%" y="789" width="0.4323%" height="15" fill="rgb(225,111,53)" fg:x="6035105" fg:w="5997275"/><text x="0.6850%" y="799.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3,128,201 samples, 0.23%)</title><rect x="0.8673%" y="821" width="0.2255%" height="15" fill="rgb(238,160,17)" fg:x="12032380" fg:w="3128201"/><text x="1.1173%" y="831.50"></text></g><g><title>regex_automata::meta::wrappers::HybridEngine::new (3,128,201 samples, 0.23%)</title><rect x="0.8673%" y="805" width="0.2255%" height="15" fill="rgb(214,148,48)" fg:x="12032380" fg:w="3128201"/><text x="1.1173%" y="815.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3,128,201 samples, 0.23%)</title><rect x="0.8673%" y="789" width="0.2255%" height="15" fill="rgb(232,36,49)" fg:x="12032380" fg:w="3128201"/><text x="1.1173%" y="799.50"></text></g><g><title>regex_automata::hybrid::dfa::Config::byte_classes_from_nfa (3,128,201 samples, 0.23%)</title><rect x="0.8673%" y="773" width="0.2255%" height="15" fill="rgb(209,103,24)" fg:x="12032380" fg:w="3128201"/><text x="1.1173%" y="783.50"></text></g><g><title>regex_automata::util::alphabet::ByteClassSet::byte_classes (3,128,201 samples, 0.23%)</title><rect x="0.8673%" y="757" width="0.2255%" height="15" fill="rgb(229,88,8)" fg:x="12032380" fg:w="3128201"/><text x="1.1173%" y="767.50"></text></g><g><title>regex_automata::util::alphabet::ByteSet::contains (3,128,201 samples, 0.23%)</title><rect x="0.8673%" y="741" width="0.2255%" height="15" fill="rgb(213,181,19)" fg:x="12032380" fg:w="3128201"/><text x="1.1173%" y="751.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (6,001,558 samples, 0.43%)</title><rect x="0.8673%" y="869" width="0.4326%" height="15" fill="rgb(254,191,54)" fg:x="12032380" fg:w="6001558"/><text x="1.1173%" y="879.50"></text></g><g><title>regex_automata::meta::strategy::new (6,001,558 samples, 0.43%)</title><rect x="0.8673%" y="853" width="0.4326%" height="15" fill="rgb(241,83,37)" fg:x="12032380" fg:w="6001558"/><text x="1.1173%" y="863.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (6,001,558 samples, 0.43%)</title><rect x="0.8673%" y="837" width="0.4326%" height="15" fill="rgb(233,36,39)" fg:x="12032380" fg:w="6001558"/><text x="1.1173%" y="847.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="821" width="0.2071%" height="15" fill="rgb(226,3,54)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="831.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="805" width="0.2071%" height="15" fill="rgb(245,192,40)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="815.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="789" width="0.2071%" height="15" fill="rgb(238,167,29)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="773" width="0.2071%" height="15" fill="rgb(232,182,51)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="757" width="0.2071%" height="15" fill="rgb(231,60,39)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="767.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="741" width="0.2071%" height="15" fill="rgb(208,69,12)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="751.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="725" width="0.2071%" height="15" fill="rgb(235,93,37)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="735.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="709" width="0.2071%" height="15" fill="rgb(213,116,39)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="719.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="693" width="0.2071%" height="15" fill="rgb(222,207,29)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="703.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="677" width="0.2071%" height="15" fill="rgb(206,96,30)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="661" width="0.2071%" height="15" fill="rgb(218,138,4)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="645" width="0.2071%" height="15" fill="rgb(250,191,14)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="655.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="629" width="0.2071%" height="15" fill="rgb(239,60,40)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="639.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="613" width="0.2071%" height="15" fill="rgb(206,27,48)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="623.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="597" width="0.2071%" height="15" fill="rgb(225,35,8)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="607.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="581" width="0.2071%" height="15" fill="rgb(250,213,24)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="591.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_zero_or_one (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="565" width="0.2071%" height="15" fill="rgb(247,123,22)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="575.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="549" width="0.2071%" height="15" fill="rgb(231,138,38)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="559.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="533" width="0.2071%" height="15" fill="rgb(231,145,46)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="517" width="0.2071%" height="15" fill="rgb(251,118,11)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::compile (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="501" width="0.2071%" height="15" fill="rgb(217,147,25)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="485" width="0.2071%" height="15" fill="rgb(247,81,37)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="495.50"></text></g><g><title>core::ptr::write (2,873,357 samples, 0.21%)</title><rect x="1.0928%" y="469" width="0.2071%" height="15" fill="rgb(209,12,38)" fg:x="15160581" fg:w="2873357"/><text x="1.3428%" y="479.50"></text></g><g><title>tree_sitter::Query::from_raw_parts (15,174,082 samples, 1.09%)</title><rect x="0.4350%" y="965" width="1.0937%" height="15" fill="rgb(227,1,9)" fg:x="6035105" fg:w="15174082"/><text x="0.6850%" y="975.50"></text></g><g><title>regex::regex::bytes::Regex::new (9,176,807 samples, 0.66%)</title><rect x="0.8673%" y="949" width="0.6615%" height="15" fill="rgb(248,47,43)" fg:x="12032380" fg:w="9176807"/><text x="1.1173%" y="959.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::build (9,176,807 samples, 0.66%)</title><rect x="0.8673%" y="933" width="0.6615%" height="15" fill="rgb(221,10,30)" fg:x="12032380" fg:w="9176807"/><text x="1.1173%" y="943.50"></text></g><g><title>regex::builders::Builder::build_one_bytes (9,176,807 samples, 0.66%)</title><rect x="0.8673%" y="917" width="0.6615%" height="15" fill="rgb(210,229,1)" fg:x="12032380" fg:w="9176807"/><text x="1.1173%" y="927.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (9,176,807 samples, 0.66%)</title><rect x="0.8673%" y="901" width="0.6615%" height="15" fill="rgb(222,148,37)" fg:x="12032380" fg:w="9176807"/><text x="1.1173%" y="911.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (9,176,807 samples, 0.66%)</title><rect x="0.8673%" y="885" width="0.6615%" height="15" fill="rgb(234,67,33)" fg:x="12032380" fg:w="9176807"/><text x="1.1173%" y="895.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="869" width="0.2289%" height="15" fill="rgb(247,98,35)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="879.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="853" width="0.2289%" height="15" fill="rgb(247,138,52)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="863.50"></text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="837" width="0.2289%" height="15" fill="rgb(213,79,30)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="847.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="821" width="0.2289%" height="15" fill="rgb(246,177,23)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="831.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push_char (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="805" width="0.2289%" height="15" fill="rgb(230,62,27)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="789" width="0.2289%" height="15" fill="rgb(216,154,8)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="773" width="0.2289%" height="15" fill="rgb(244,35,45)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="757" width="0.2289%" height="15" fill="rgb(251,115,12)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="741" width="0.2289%" height="15" fill="rgb(240,54,50)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="725" width="0.2289%" height="15" fill="rgb(233,84,52)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="709" width="0.2289%" height="15" fill="rgb(207,117,47)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="693" width="0.2289%" height="15" fill="rgb(249,43,39)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="677" width="0.2289%" height="15" fill="rgb(209,38,44)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="661" width="0.2289%" height="15" fill="rgb(236,212,23)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="645" width="0.2289%" height="15" fill="rgb(242,79,21)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="655.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="629" width="0.2289%" height="15" fill="rgb(211,96,35)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="639.50"></text></g><g><title>alloc::alloc::realloc (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="613" width="0.2289%" height="15" fill="rgb(253,215,40)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="623.50"></text></g><g><title>realloc (3,175,249 samples, 0.23%)</title><rect x="1.2999%" y="597" width="0.2289%" height="15" fill="rgb(211,81,21)" fg:x="18033938" fg:w="3175249"/><text x="1.5499%" y="607.50"></text></g><g><title>_array__splice (2,127,632 samples, 0.15%)</title><rect x="4.1590%" y="933" width="0.1534%" height="15" fill="rgb(208,190,38)" fg:x="57700460" fg:w="2127632"/><text x="4.4090%" y="943.50"></text></g><g><title>_array__reserve (2,127,632 samples, 0.15%)</title><rect x="4.1590%" y="917" width="0.1534%" height="15" fill="rgb(235,213,38)" fg:x="57700460" fg:w="2127632"/><text x="4.4090%" y="927.50"></text></g><g><title>_array__reserve (2,127,632 samples, 0.15%)</title><rect x="4.1590%" y="901" width="0.1534%" height="15" fill="rgb(237,122,38)" fg:x="57700460" fg:w="2127632"/><text x="4.4090%" y="911.50"></text></g><g><title>ts_realloc_default (2,127,632 samples, 0.15%)</title><rect x="4.1590%" y="885" width="0.1534%" height="15" fill="rgb(244,218,35)" fg:x="57700460" fg:w="2127632"/><text x="4.4090%" y="895.50"></text></g><g><title>state_predecessor_map_add (9,433,913 samples, 0.68%)</title><rect x="4.3124%" y="933" width="0.6800%" height="15" fill="rgb(240,68,47)" fg:x="59828092" fg:w="9433913"/><text x="4.5624%" y="943.50"></text></g><g><title>ts_lookahead_iterator__next (3,170,920 samples, 0.23%)</title><rect x="4.9924%" y="933" width="0.2286%" height="15" fill="rgb(210,16,53)" fg:x="69262005" fg:w="3170920"/><text x="5.2424%" y="943.50"></text></g><g><title>analysis_state__compare_position (25,324,280 samples, 1.83%)</title><rect x="49.7035%" y="917" width="1.8254%" height="15" fill="rgb(235,124,12)" fg:x="689561620" fg:w="25324280"/><text x="49.9535%" y="927.50">a..</text></g><g><title>analysis_state__recursion_depth (21,050,504 samples, 1.52%)</title><rect x="51.5288%" y="917" width="1.5173%" height="15" fill="rgb(224,169,11)" fg:x="714885900" fg:w="21050504"/><text x="51.7788%" y="927.50"></text></g><g><title>analysis_state__top (9,247,713 samples, 0.67%)</title><rect x="53.0462%" y="917" width="0.6666%" height="15" fill="rgb(250,166,2)" fg:x="735936404" fg:w="9247713"/><text x="53.2962%" y="927.50"></text></g><g><title>_array__splice (9,382,527 samples, 0.68%)</title><rect x="58.9896%" y="901" width="0.6763%" height="15" fill="rgb(242,216,29)" fg:x="818392720" fg:w="9382527"/><text x="59.2396%" y="911.50"></text></g><g><title>memmove (9,382,527 samples, 0.68%)</title><rect x="58.9896%" y="885" width="0.6763%" height="15" fill="rgb(230,116,27)" fg:x="818392720" fg:w="9382527"/><text x="59.2396%" y="895.50"></text></g><g><title>__memmove_avx_unaligned_erms (9,382,527 samples, 0.68%)</title><rect x="58.9896%" y="869" width="0.6763%" height="15" fill="rgb(228,99,48)" fg:x="818392720" fg:w="9382527"/><text x="59.2396%" y="879.50"></text></g><g><title>analysis_state__compare (48,638,747 samples, 3.51%)</title><rect x="59.6659%" y="885" width="3.5059%" height="15" fill="rgb(253,11,6)" fg:x="827775247" fg:w="48638747"/><text x="59.9159%" y="895.50">ana..</text></g><g><title>analysis_state__compare (130,817,863 samples, 9.43%)</title><rect x="59.6659%" y="901" width="9.4293%" height="15" fill="rgb(247,143,39)" fg:x="827775247" fg:w="130817863"/><text x="59.9159%" y="911.50">analysis_stat..</text></g><g><title>analysis_state__compare_position (82,179,116 samples, 5.92%)</title><rect x="63.1718%" y="885" width="5.9235%" height="15" fill="rgb(236,97,10)" fg:x="876413994" fg:w="82179116"/><text x="63.4218%" y="895.50">analysis..</text></g><g><title>analysis_state_set__insert_sorted (216,454,704 samples, 15.60%)</title><rect x="53.7127%" y="917" width="15.6020%" height="15" fill="rgb(233,208,19)" fg:x="745184117" fg:w="216454704"/><text x="53.9627%" y="927.50">analysis_state_set__inse..</text></g><g><title>analysis_state_pool__clone_or_reuse (3,045,711 samples, 0.22%)</title><rect x="69.0952%" y="901" width="0.2195%" height="15" fill="rgb(216,164,2)" fg:x="958593110" fg:w="3045711"/><text x="69.3452%" y="911.50"></text></g><g><title>analysis_subgraph_node__compare (106,436,650 samples, 7.67%)</title><rect x="69.3148%" y="917" width="7.6719%" height="15" fill="rgb(220,129,5)" fg:x="961638821" fg:w="106436650"/><text x="69.5648%" y="927.50">analysis_su..</text></g><g><title>ts_language_alias_at (4,883,502 samples, 0.35%)</title><rect x="76.9867%" y="917" width="0.3520%" height="15" fill="rgb(242,17,10)" fg:x="1068075471" fg:w="4883502"/><text x="77.2367%" y="927.50"></text></g><g><title>ts_language_alias_at (1,706,156 samples, 0.12%)</title><rect x="77.2157%" y="901" width="0.1230%" height="15" fill="rgb(242,107,0)" fg:x="1071252817" fg:w="1706156"/><text x="77.4657%" y="911.50"></text></g><g><title>ts_language_field_map (6,228,250 samples, 0.45%)</title><rect x="77.3387%" y="917" width="0.4489%" height="15" fill="rgb(251,28,31)" fg:x="1072958973" fg:w="6228250"/><text x="77.5887%" y="927.50"></text></g><g><title>ts_language_field_map (6,228,250 samples, 0.45%)</title><rect x="77.3387%" y="901" width="0.4489%" height="15" fill="rgb(233,223,10)" fg:x="1072958973" fg:w="6228250"/><text x="77.5887%" y="911.50"></text></g><g><title>ts_language_lookaheads (9,510,762 samples, 0.69%)</title><rect x="77.7876%" y="917" width="0.6855%" height="15" fill="rgb(215,21,27)" fg:x="1079187223" fg:w="9510762"/><text x="78.0376%" y="927.50"></text></g><g><title>ts_query__analyze_patterns (1,245,263,407 samples, 89.76%)</title><rect x="1.5288%" y="949" width="89.7584%" height="15" fill="rgb(232,23,21)" fg:x="21209187" fg:w="1245263407"/><text x="1.7788%" y="959.50">ts_query__analyze_patterns</text></g><g><title>ts_query__perform_analysis (1,194,039,669 samples, 86.07%)</title><rect x="5.2210%" y="933" width="86.0662%" height="15" fill="rgb(244,5,23)" fg:x="72432925" fg:w="1194039669"/><text x="5.4710%" y="943.50">ts_query__perform_analysis</text></g><g><title>ts_lookahead_iterator__next (177,774,609 samples, 12.81%)</title><rect x="78.4732%" y="917" width="12.8140%" height="15" fill="rgb(226,81,46)" fg:x="1088697985" fg:w="177774609"/><text x="78.7232%" y="927.50">ts_lookahead_iterat..</text></g><g><title>ts_language_symbol_for_name (676,424 samples, 0.05%)</title><rect x="91.2871%" y="933" width="0.0488%" height="15" fill="rgb(247,70,30)" fg:x="1266472594" fg:w="676424"/><text x="91.5371%" y="943.50"></text></g><g><title>__strncmp_avx2 (676,424 samples, 0.05%)</title><rect x="91.2871%" y="917" width="0.0488%" height="15" fill="rgb(212,68,19)" fg:x="1266472594" fg:w="676424"/><text x="91.5371%" y="927.50"></text></g><g><title>&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language (1,264,729,905 samples, 91.16%)</title><rect x="0.2151%" y="1125" width="91.1615%" height="15" fill="rgb(240,187,13)" fg:x="2983768" fg:w="1264729905"/><text x="0.4651%" y="1135.50">&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1,264,729,905 samples, 91.16%)</title><rect x="0.2151%" y="1109" width="91.1615%" height="15" fill="rgb(223,113,26)" fg:x="2983768" fg:w="1264729905"/><text x="0.4651%" y="1119.50">once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1,264,729,905 samples, 91.16%)</title><rect x="0.2151%" y="1093" width="91.1615%" height="15" fill="rgb(206,192,2)" fg:x="2983768" fg:w="1264729905"/><text x="0.4651%" y="1103.50">once_cell::imp::OnceCell&lt;T&gt;::initialize</text></g><g><title>once_cell::imp::initialize_or_wait (1,264,729,905 samples, 91.16%)</title><rect x="0.2151%" y="1077" width="91.1615%" height="15" fill="rgb(241,108,4)" fg:x="2983768" fg:w="1264729905"/><text x="0.4651%" y="1087.50">once_cell::imp::initialize_or_wait</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1,264,729,905 samples, 91.16%)</title><rect x="0.2151%" y="1061" width="91.1615%" height="15" fill="rgb(247,173,49)" fg:x="2983768" fg:w="1264729905"/><text x="0.4651%" y="1071.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1,264,729,905 samples, 91.16%)</title><rect x="0.2151%" y="1045" width="91.1615%" height="15" fill="rgb(224,114,35)" fg:x="2983768" fg:w="1264729905"/><text x="0.4651%" y="1055.50">once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}}</text></g><g><title>&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language::{{closure}} (1,264,729,905 samples, 91.16%)</title><rect x="0.2151%" y="1029" width="91.1615%" height="15" fill="rgb(245,159,27)" fg:x="2983768" fg:w="1264729905"/><text x="0.4651%" y="1039.50">&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language::{{closure}}</text></g><g><title>syntastica_parsers::Lang::get_config (1,264,729,905 samples, 91.16%)</title><rect x="0.2151%" y="1013" width="91.1615%" height="15" fill="rgb(245,172,44)" fg:x="2983768" fg:w="1264729905"/><text x="0.4651%" y="1023.50">syntastica_parsers::Lang::get_config</text></g><g><title>syntastica_highlight::HighlightConfiguration::new (1,261,678,568 samples, 90.94%)</title><rect x="0.4350%" y="997" width="90.9416%" height="15" fill="rgb(236,23,11)" fg:x="6035105" fg:w="1261678568"/><text x="0.6850%" y="1007.50">syntastica_highlight::HighlightConfiguration::new</text></g><g><title>tree_sitter::Query::new (1,261,678,568 samples, 90.94%)</title><rect x="0.4350%" y="981" width="90.9416%" height="15" fill="rgb(205,117,38)" fg:x="6035105" fg:w="1261678568"/><text x="0.6850%" y="991.50">tree_sitter::Query::new</text></g><g><title>ts_query_new (1,246,504,486 samples, 89.85%)</title><rect x="1.5288%" y="965" width="89.8478%" height="15" fill="rgb(237,72,25)" fg:x="21209187" fg:w="1246504486"/><text x="1.7788%" y="975.50">ts_query_new</text></g><g><title>ts_query__parse_pattern (1,241,079 samples, 0.09%)</title><rect x="91.2871%" y="949" width="0.0895%" height="15" fill="rgb(244,70,9)" fg:x="1266472594" fg:w="1241079"/><text x="91.5371%" y="959.50"></text></g><g><title>ts_query__parse_pattern (564,655 samples, 0.04%)</title><rect x="91.3359%" y="933" width="0.0407%" height="15" fill="rgb(217,125,39)" fg:x="1267149018" fg:w="564655"/><text x="91.5859%" y="943.50"></text></g><g><title>ts_query__parse_pattern (564,655 samples, 0.04%)</title><rect x="91.3359%" y="917" width="0.0407%" height="15" fill="rgb(235,36,10)" fg:x="1267149018" fg:w="564655"/><text x="91.5859%" y="927.50"></text></g><g><title>ts_language_symbol_for_name (564,655 samples, 0.04%)</title><rect x="91.3359%" y="901" width="0.0407%" height="15" fill="rgb(251,123,47)" fg:x="1267149018" fg:w="564655"/><text x="91.5859%" y="911.50"></text></g><g><title>ts_language_symbol_metadata (564,655 samples, 0.04%)</title><rect x="91.3359%" y="885" width="0.0407%" height="15" fill="rgb(221,13,13)" fg:x="1267149018" fg:w="564655"/><text x="91.5859%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="981" width="0.2215%" height="15" fill="rgb(238,131,9)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="991.50"></text></g><g><title>tft::detect::try_detect::{{closure}} (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="965" width="0.2215%" height="15" fill="rgb(211,50,8)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="975.50"></text></g><g><title>regex::regex::string::Regex::is_match (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="949" width="0.2215%" height="15" fill="rgb(245,182,24)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="959.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="933" width="0.2215%" height="15" fill="rgb(242,14,37)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="943.50"></text></g><g><title>regex_automata::meta::regex::Regex::search_half (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="917" width="0.2215%" height="15" fill="rgb(246,228,12)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="927.50"></text></g><g><title>regex_automata::util::pool::Pool&lt;T,F&gt;::get (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="901" width="0.2215%" height="15" fill="rgb(213,55,15)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="911.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="885" width="0.2215%" height="15" fill="rgb(209,9,3)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="895.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="869" width="0.2215%" height="15" fill="rgb(230,59,30)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="853" width="0.2215%" height="15" fill="rgb(209,121,21)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="863.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="837" width="0.2215%" height="15" fill="rgb(220,109,13)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="847.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="821" width="0.2215%" height="15" fill="rgb(232,18,1)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="831.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::create_cache (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="805" width="0.2215%" height="15" fill="rgb(215,41,42)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="815.50"></text></g><g><title>regex_automata::meta::wrappers::HybridCache::new (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="789" width="0.2215%" height="15" fill="rgb(224,123,36)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="773" width="0.2215%" height="15" fill="rgb(240,125,3)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="783.50"></text></g><g><title>regex_automata::meta::wrappers::HybridCache::new::{{closure}} (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="757" width="0.2215%" height="15" fill="rgb(205,98,50)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="767.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::create_cache (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="741" width="0.2215%" height="15" fill="rgb(205,185,37)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="751.50"></text></g><g><title>regex_automata::hybrid::regex::Cache::new (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="725" width="0.2215%" height="15" fill="rgb(238,207,15)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="735.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="709" width="0.2215%" height="15" fill="rgb(213,199,42)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="719.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="693" width="0.2215%" height="15" fill="rgb(235,201,11)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="703.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::add_state (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="677" width="0.2215%" height="15" fill="rgb(207,46,11)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="687.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="661" width="0.2215%" height="15" fill="rgb(241,35,35)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="645" width="0.2215%" height="15" fill="rgb(243,32,47)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::determinize::state::State&gt; (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="629" width="0.2215%" height="15" fill="rgb(247,202,23)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;[u8]&gt;&gt; (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="613" width="0.2215%" height="15" fill="rgb(219,102,11)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="623.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="597" width="0.2215%" height="15" fill="rgb(243,110,44)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="581" width="0.2215%" height="15" fill="rgb(222,74,54)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_sub (3,072,922 samples, 0.22%)</title><rect x="91.3766%" y="565" width="0.2215%" height="15" fill="rgb(216,99,12)" fg:x="1267713673" fg:w="3072922"/><text x="91.6266%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (6,077,671 samples, 0.44%)</title><rect x="91.3766%" y="1029" width="0.4381%" height="15" fill="rgb(226,22,26)" fg:x="1267713673" fg:w="6077671"/><text x="91.6266%" y="1039.50"></text></g><g><title>syntastica_core::language_set::SupportedLanguage::for_injection::{{closure}} (6,077,671 samples, 0.44%)</title><rect x="91.3766%" y="1013" width="0.4381%" height="15" fill="rgb(217,163,10)" fg:x="1267713673" fg:w="6077671"/><text x="91.6266%" y="1023.50"></text></g><g><title>tft::detect::try_detect (6,077,671 samples, 0.44%)</title><rect x="91.3766%" y="997" width="0.4381%" height="15" fill="rgb(213,25,53)" fg:x="1267713673" fg:w="6077671"/><text x="91.6266%" y="1007.50"></text></g><g><title>core::str::converts::from_utf8 (3,004,749 samples, 0.22%)</title><rect x="91.5981%" y="981" width="0.2166%" height="15" fill="rgb(252,105,26)" fg:x="1270786595" fg:w="3004749"/><text x="91.8481%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::ast::Ast&gt;&gt; (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="533" width="0.2200%" height="15" fill="rgb(220,39,43)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="517" width="0.2200%" height="15" fill="rgb(229,68,48)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_syntax::ast::Ast]&gt; (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="501" width="0.2200%" height="15" fill="rgb(252,8,32)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="485" width="0.2200%" height="15" fill="rgb(223,20,43)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="495.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="469" width="0.2200%" height="15" fill="rgb(229,81,49)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="453" width="0.2200%" height="15" fill="rgb(236,28,36)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="437" width="0.2200%" height="15" fill="rgb(249,185,26)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="421" width="0.2200%" height="15" fill="rgb(249,174,33)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="405" width="0.2200%" height="15" fill="rgb(233,201,37)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="389" width="0.2200%" height="15" fill="rgb(221,78,26)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="373" width="0.2200%" height="15" fill="rgb(250,127,30)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="357" width="0.2200%" height="15" fill="rgb(230,49,44)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="341" width="0.2200%" height="15" fill="rgb(229,67,23)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="325" width="0.2200%" height="15" fill="rgb(249,83,47)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="309" width="0.2200%" height="15" fill="rgb(215,43,3)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="293" width="0.2200%" height="15" fill="rgb(238,154,13)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="303.50"></text></g><g><title>alloc::alloc::realloc (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="277" width="0.2200%" height="15" fill="rgb(219,56,2)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="287.50"></text></g><g><title>realloc (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="261" width="0.2200%" height="15" fill="rgb(233,0,4)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="271.50"></text></g><g><title>_int_realloc (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="245" width="0.2200%" height="15" fill="rgb(235,30,7)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="255.50"></text></g><g><title>_int_malloc (3,052,510 samples, 0.22%)</title><rect x="91.8146%" y="229" width="0.2200%" height="15" fill="rgb(250,79,13)" fg:x="1273791344" fg:w="3052510"/><text x="92.0646%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9,424,124 samples, 0.68%)</title><rect x="92.0347%" y="485" width="0.6793%" height="15" fill="rgb(211,146,34)" fg:x="1276843854" fg:w="9424124"/><text x="92.2847%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9,424,124 samples, 0.68%)</title><rect x="92.0347%" y="469" width="0.6793%" height="15" fill="rgb(228,22,38)" fg:x="1276843854" fg:w="9424124"/><text x="92.2847%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9,424,124 samples, 0.68%)</title><rect x="92.0347%" y="453" width="0.6793%" height="15" fill="rgb(235,168,5)" fg:x="1276843854" fg:w="9424124"/><text x="92.2847%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt; (9,424,124 samples, 0.68%)</title><rect x="92.0347%" y="437" width="0.6793%" height="15" fill="rgb(221,155,16)" fg:x="1276843854" fg:w="9424124"/><text x="92.2847%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedMap&gt; (9,424,124 samples, 0.68%)</title><rect x="92.0347%" y="421" width="0.6793%" height="15" fill="rgb(215,215,53)" fg:x="1276843854" fg:w="9424124"/><text x="92.2847%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (9,424,124 samples, 0.68%)</title><rect x="92.0347%" y="405" width="0.6793%" height="15" fill="rgb(223,4,10)" fg:x="1276843854" fg:w="9424124"/><text x="92.2847%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,424,124 samples, 0.68%)</title><rect x="92.0347%" y="389" width="0.6793%" height="15" fill="rgb(234,103,6)" fg:x="1276843854" fg:w="9424124"/><text x="92.2847%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::map::Utf8BoundedEntry]&gt; (9,424,124 samples, 0.68%)</title><rect x="92.0347%" y="373" width="0.6793%" height="15" fill="rgb(227,97,0)" fg:x="1276843854" fg:w="9424124"/><text x="92.2847%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt; (9,424,124 samples, 0.68%)</title><rect x="92.0347%" y="357" width="0.6793%" height="15" fill="rgb(234,150,53)" fg:x="1276843854" fg:w="9424124"/><text x="92.2847%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (9,424,124 samples, 0.68%)</title><rect x="92.0347%" y="341" width="0.6793%" height="15" fill="rgb(228,201,54)" fg:x="1276843854" fg:w="9424124"/><text x="92.2847%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (9,424,124 samples, 0.68%)</title><rect x="92.0347%" y="325" width="0.6793%" height="15" fill="rgb(222,22,37)" fg:x="1276843854" fg:w="9424124"/><text x="92.2847%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,424,124 samples, 0.68%)</title><rect x="92.0347%" y="309" width="0.6793%" height="15" fill="rgb(237,53,32)" fg:x="1276843854" fg:w="9424124"/><text x="92.2847%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,151,961 samples, 0.23%)</title><rect x="92.4868%" y="293" width="0.2272%" height="15" fill="rgb(233,25,53)" fg:x="1283116017" fg:w="3151961"/><text x="92.7368%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (3,151,961 samples, 0.23%)</title><rect x="92.4868%" y="277" width="0.2272%" height="15" fill="rgb(210,40,34)" fg:x="1283116017" fg:w="3151961"/><text x="92.7368%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,176,850 samples, 0.23%)</title><rect x="92.9348%" y="421" width="0.2290%" height="15" fill="rgb(241,220,44)" fg:x="1289331725" fg:w="3176850"/><text x="93.1848%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,146,828 samples, 0.23%)</title><rect x="93.1638%" y="405" width="0.2268%" height="15" fill="rgb(235,28,35)" fg:x="1292508575" fg:w="3146828"/><text x="93.4138%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,146,828 samples, 0.23%)</title><rect x="93.1638%" y="389" width="0.2268%" height="15" fill="rgb(210,56,17)" fg:x="1292508575" fg:w="3146828"/><text x="93.4138%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,146,828 samples, 0.23%)</title><rect x="93.1638%" y="373" width="0.2268%" height="15" fill="rgb(224,130,29)" fg:x="1292508575" fg:w="3146828"/><text x="93.4138%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,146,828 samples, 0.23%)</title><rect x="93.1638%" y="357" width="0.2268%" height="15" fill="rgb(235,212,8)" fg:x="1292508575" fg:w="3146828"/><text x="93.4138%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,146,828 samples, 0.23%)</title><rect x="93.1638%" y="341" width="0.2268%" height="15" fill="rgb(223,33,50)" fg:x="1292508575" fg:w="3146828"/><text x="93.4138%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,146,828 samples, 0.23%)</title><rect x="93.1638%" y="325" width="0.2268%" height="15" fill="rgb(219,149,13)" fg:x="1292508575" fg:w="3146828"/><text x="93.4138%" y="335.50"></text></g><g><title>alloc::alloc::realloc (3,146,828 samples, 0.23%)</title><rect x="93.1638%" y="309" width="0.2268%" height="15" fill="rgb(250,156,29)" fg:x="1292508575" fg:w="3146828"/><text x="93.4138%" y="319.50"></text></g><g><title>realloc (3,146,828 samples, 0.23%)</title><rect x="93.1638%" y="293" width="0.2268%" height="15" fill="rgb(216,193,19)" fg:x="1292508575" fg:w="3146828"/><text x="93.4138%" y="303.50"></text></g><g><title>_int_realloc (3,146,828 samples, 0.23%)</title><rect x="93.1638%" y="277" width="0.2268%" height="15" fill="rgb(216,135,14)" fg:x="1292508575" fg:w="3146828"/><text x="93.4138%" y="287.50"></text></g><g><title>_int_malloc (3,146,828 samples, 0.23%)</title><rect x="93.1638%" y="261" width="0.2268%" height="15" fill="rgb(241,47,5)" fg:x="1292508575" fg:w="3146828"/><text x="93.4138%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (12,453,198 samples, 0.90%)</title><rect x="92.7140%" y="437" width="0.8976%" height="15" fill="rgb(233,42,35)" fg:x="1286267978" fg:w="12453198"/><text x="92.9640%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6,212,601 samples, 0.45%)</title><rect x="93.1638%" y="421" width="0.4478%" height="15" fill="rgb(231,13,6)" fg:x="1292508575" fg:w="6212601"/><text x="93.4138%" y="431.50"></text></g><g><title>core::ptr::write (3,065,773 samples, 0.22%)</title><rect x="93.3906%" y="405" width="0.2210%" height="15" fill="rgb(207,181,40)" fg:x="1295655403" fg:w="3065773"/><text x="93.6406%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6,322,276 samples, 0.46%)</title><rect x="93.6116%" y="437" width="0.4557%" height="15" fill="rgb(254,173,49)" fg:x="1298721176" fg:w="6322276"/><text x="93.8616%" y="447.50"></text></g><g><title>regex_automata::util::alphabet::ByteClassSet::byte_classes (6,322,276 samples, 0.46%)</title><rect x="93.6116%" y="421" width="0.4557%" height="15" fill="rgb(221,1,38)" fg:x="1298721176" fg:w="6322276"/><text x="93.8616%" y="431.50"></text></g><g><title>core::num::&lt;impl u8&gt;::checked_add (3,150,993 samples, 0.23%)</title><rect x="93.8402%" y="405" width="0.2271%" height="15" fill="rgb(206,124,46)" fg:x="1301892459" fg:w="3150993"/><text x="94.0902%" y="415.50"></text></g><g><title>core::intrinsics::unlikely (3,150,993 samples, 0.23%)</title><rect x="93.8402%" y="389" width="0.2271%" height="15" fill="rgb(249,21,11)" fg:x="1301892459" fg:w="3150993"/><text x="94.0902%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (21,851,295 samples, 1.58%)</title><rect x="92.7140%" y="453" width="1.5750%" height="15" fill="rgb(222,201,40)" fg:x="1286267978" fg:w="21851295"/><text x="92.9640%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::set_captures (3,075,821 samples, 0.22%)</title><rect x="94.0673%" y="437" width="0.2217%" height="15" fill="rgb(235,61,29)" fg:x="1305043452" fg:w="3075821"/><text x="94.3173%" y="447.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (3,075,821 samples, 0.22%)</title><rect x="94.0673%" y="421" width="0.2217%" height="15" fill="rgb(219,207,3)" fg:x="1305043452" fg:w="3075821"/><text x="94.3173%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (3,075,821 samples, 0.22%)</title><rect x="94.0673%" y="405" width="0.2217%" height="15" fill="rgb(222,56,46)" fg:x="1305043452" fg:w="3075821"/><text x="94.3173%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (3,075,821 samples, 0.22%)</title><rect x="94.0673%" y="389" width="0.2217%" height="15" fill="rgb(239,76,54)" fg:x="1305043452" fg:w="3075821"/><text x="94.3173%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (3,075,821 samples, 0.22%)</title><rect x="94.0673%" y="373" width="0.2217%" height="15" fill="rgb(231,124,27)" fg:x="1305043452" fg:w="3075821"/><text x="94.3173%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,075,821 samples, 0.22%)</title><rect x="94.0673%" y="357" width="0.2217%" height="15" fill="rgb(249,195,6)" fg:x="1305043452" fg:w="3075821"/><text x="94.3173%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,075,821 samples, 0.22%)</title><rect x="94.0673%" y="341" width="0.2217%" height="15" fill="rgb(237,174,47)" fg:x="1305043452" fg:w="3075821"/><text x="94.3173%" y="351.50"></text></g><g><title>alloc::alloc::alloc (3,075,821 samples, 0.22%)</title><rect x="94.0673%" y="325" width="0.2217%" height="15" fill="rgb(206,201,31)" fg:x="1305043452" fg:w="3075821"/><text x="94.3173%" y="335.50"></text></g><g><title>malloc (3,075,821 samples, 0.22%)</title><rect x="94.0673%" y="309" width="0.2217%" height="15" fill="rgb(231,57,52)" fg:x="1305043452" fg:w="3075821"/><text x="94.3173%" y="319.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3,214,279 samples, 0.23%)</title><rect x="94.2890%" y="149" width="0.2317%" height="15" fill="rgb(248,177,22)" fg:x="1308119273" fg:w="3214279"/><text x="94.5390%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (6,452,104 samples, 0.47%)</title><rect x="94.2890%" y="261" width="0.4651%" height="15" fill="rgb(215,211,37)" fg:x="1308119273" fg:w="6452104"/><text x="94.5390%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (6,452,104 samples, 0.47%)</title><rect x="94.2890%" y="245" width="0.4651%" height="15" fill="rgb(241,128,51)" fg:x="1308119273" fg:w="6452104"/><text x="94.5390%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_exactly (6,452,104 samples, 0.47%)</title><rect x="94.2890%" y="229" width="0.4651%" height="15" fill="rgb(227,165,31)" fg:x="1308119273" fg:w="6452104"/><text x="94.5390%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (6,452,104 samples, 0.47%)</title><rect x="94.2890%" y="213" width="0.4651%" height="15" fill="rgb(228,167,24)" fg:x="1308119273" fg:w="6452104"/><text x="94.5390%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (6,452,104 samples, 0.47%)</title><rect x="94.2890%" y="197" width="0.4651%" height="15" fill="rgb(228,143,12)" fg:x="1308119273" fg:w="6452104"/><text x="94.5390%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (6,452,104 samples, 0.47%)</title><rect x="94.2890%" y="181" width="0.4651%" height="15" fill="rgb(249,149,8)" fg:x="1308119273" fg:w="6452104"/><text x="94.5390%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (6,452,104 samples, 0.47%)</title><rect x="94.2890%" y="165" width="0.4651%" height="15" fill="rgb(243,35,44)" fg:x="1308119273" fg:w="6452104"/><text x="94.5390%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::patch (3,237,825 samples, 0.23%)</title><rect x="94.5207%" y="149" width="0.2334%" height="15" fill="rgb(246,89,9)" fg:x="1311333552" fg:w="3237825"/><text x="94.7707%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3,237,825 samples, 0.23%)</title><rect x="94.5207%" y="133" width="0.2334%" height="15" fill="rgb(233,213,13)" fg:x="1311333552" fg:w="3237825"/><text x="94.7707%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (9,576,551 samples, 0.69%)</title><rect x="94.2890%" y="325" width="0.6903%" height="15" fill="rgb(233,141,41)" fg:x="1308119273" fg:w="9576551"/><text x="94.5390%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (9,576,551 samples, 0.69%)</title><rect x="94.2890%" y="309" width="0.6903%" height="15" fill="rgb(239,167,4)" fg:x="1308119273" fg:w="9576551"/><text x="94.5390%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (9,576,551 samples, 0.69%)</title><rect x="94.2890%" y="293" width="0.6903%" height="15" fill="rgb(209,217,16)" fg:x="1308119273" fg:w="9576551"/><text x="94.5390%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (9,576,551 samples, 0.69%)</title><rect x="94.2890%" y="277" width="0.6903%" height="15" fill="rgb(219,88,35)" fg:x="1308119273" fg:w="9576551"/><text x="94.5390%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (3,124,447 samples, 0.23%)</title><rect x="94.7541%" y="261" width="0.2252%" height="15" fill="rgb(220,193,23)" fg:x="1314571377" fg:w="3124447"/><text x="95.0041%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3,124,447 samples, 0.23%)</title><rect x="94.7541%" y="245" width="0.2252%" height="15" fill="rgb(230,90,52)" fg:x="1314571377" fg:w="3124447"/><text x="95.0041%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (3,124,447 samples, 0.23%)</title><rect x="94.7541%" y="229" width="0.2252%" height="15" fill="rgb(252,106,19)" fg:x="1314571377" fg:w="3124447"/><text x="95.0041%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (3,124,447 samples, 0.23%)</title><rect x="94.7541%" y="213" width="0.2252%" height="15" fill="rgb(206,74,20)" fg:x="1314571377" fg:w="3124447"/><text x="95.0041%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3,124,447 samples, 0.23%)</title><rect x="94.7541%" y="197" width="0.2252%" height="15" fill="rgb(230,138,44)" fg:x="1314571377" fg:w="3124447"/><text x="95.0041%" y="207.50"></text></g><g><title>alloc::vec::from_elem (3,124,447 samples, 0.23%)</title><rect x="94.7541%" y="181" width="0.2252%" height="15" fill="rgb(235,182,43)" fg:x="1314571377" fg:w="3124447"/><text x="95.0041%" y="191.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3,124,447 samples, 0.23%)</title><rect x="94.7541%" y="165" width="0.2252%" height="15" fill="rgb(242,16,51)" fg:x="1314571377" fg:w="3124447"/><text x="95.0041%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (3,124,447 samples, 0.23%)</title><rect x="94.7541%" y="149" width="0.2252%" height="15" fill="rgb(248,9,4)" fg:x="1314571377" fg:w="3124447"/><text x="95.0041%" y="159.50"></text></g><g><title>core::ptr::write (3,124,447 samples, 0.23%)</title><rect x="94.7541%" y="133" width="0.2252%" height="15" fill="rgb(210,31,22)" fg:x="1314571377" fg:w="3124447"/><text x="95.0041%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::utf8::Utf8Sequences&gt; (3,239,390 samples, 0.23%)</title><rect x="94.9793%" y="165" width="0.2335%" height="15" fill="rgb(239,54,39)" fg:x="1317695824" fg:w="3239390"/><text x="95.2293%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::utf8::ScalarRange&gt;&gt; (3,239,390 samples, 0.23%)</title><rect x="94.9793%" y="149" width="0.2335%" height="15" fill="rgb(230,99,41)" fg:x="1317695824" fg:w="3239390"/><text x="95.2293%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_syntax::utf8::ScalarRange&gt;&gt; (3,239,390 samples, 0.23%)</title><rect x="94.9793%" y="133" width="0.2335%" height="15" fill="rgb(253,106,12)" fg:x="1317695824" fg:w="3239390"/><text x="95.2293%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,239,390 samples, 0.23%)</title><rect x="94.9793%" y="117" width="0.2335%" height="15" fill="rgb(213,46,41)" fg:x="1317695824" fg:w="3239390"/><text x="95.2293%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,239,390 samples, 0.23%)</title><rect x="94.9793%" y="101" width="0.2335%" height="15" fill="rgb(215,133,35)" fg:x="1317695824" fg:w="3239390"/><text x="95.2293%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,239,390 samples, 0.23%)</title><rect x="94.9793%" y="85" width="0.2335%" height="15" fill="rgb(213,28,5)" fg:x="1317695824" fg:w="3239390"/><text x="95.2293%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (3,239,390 samples, 0.23%)</title><rect x="94.9793%" y="69" width="0.2335%" height="15" fill="rgb(215,77,49)" fg:x="1317695824" fg:w="3239390"/><text x="95.2293%" y="79.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3,239,390 samples, 0.23%)</title><rect x="94.9793%" y="53" width="0.2335%" height="15" fill="rgb(248,100,22)" fg:x="1317695824" fg:w="3239390"/><text x="95.2293%" y="63.50"></text></g><g><title>_int_free (3,239,390 samples, 0.23%)</title><rect x="94.9793%" y="37" width="0.2335%" height="15" fill="rgb(208,67,9)" fg:x="1317695824" fg:w="3239390"/><text x="95.2293%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (6,423,507 samples, 0.46%)</title><rect x="94.9793%" y="261" width="0.4630%" height="15" fill="rgb(219,133,21)" fg:x="1317695824" fg:w="6423507"/><text x="95.2293%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (6,423,507 samples, 0.46%)</title><rect x="94.9793%" y="245" width="0.4630%" height="15" fill="rgb(246,46,29)" fg:x="1317695824" fg:w="6423507"/><text x="95.2293%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_exactly (6,423,507 samples, 0.46%)</title><rect x="94.9793%" y="229" width="0.4630%" height="15" fill="rgb(246,185,52)" fg:x="1317695824" fg:w="6423507"/><text x="95.2293%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (6,423,507 samples, 0.46%)</title><rect x="94.9793%" y="213" width="0.4630%" height="15" fill="rgb(252,136,11)" fg:x="1317695824" fg:w="6423507"/><text x="95.2293%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (6,423,507 samples, 0.46%)</title><rect x="94.9793%" y="197" width="0.4630%" height="15" fill="rgb(219,138,53)" fg:x="1317695824" fg:w="6423507"/><text x="95.2293%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (6,423,507 samples, 0.46%)</title><rect x="94.9793%" y="181" width="0.4630%" height="15" fill="rgb(211,51,23)" fg:x="1317695824" fg:w="6423507"/><text x="95.2293%" y="191.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3,184,117 samples, 0.23%)</title><rect x="95.2128%" y="165" width="0.2295%" height="15" fill="rgb(247,221,28)" fg:x="1320935214" fg:w="3184117"/><text x="95.4628%" y="175.50"></text></g><g><title>alloc::alloc::exchange_malloc (3,184,117 samples, 0.23%)</title><rect x="95.2128%" y="149" width="0.2295%" height="15" fill="rgb(251,222,45)" fg:x="1320935214" fg:w="3184117"/><text x="95.4628%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,184,117 samples, 0.23%)</title><rect x="95.2128%" y="133" width="0.2295%" height="15" fill="rgb(217,162,53)" fg:x="1320935214" fg:w="3184117"/><text x="95.4628%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,184,117 samples, 0.23%)</title><rect x="95.2128%" y="117" width="0.2295%" height="15" fill="rgb(229,93,14)" fg:x="1320935214" fg:w="3184117"/><text x="95.4628%" y="127.50"></text></g><g><title>alloc::alloc::alloc (3,184,117 samples, 0.23%)</title><rect x="95.2128%" y="101" width="0.2295%" height="15" fill="rgb(209,67,49)" fg:x="1320935214" fg:w="3184117"/><text x="95.4628%" y="111.50"></text></g><g><title>malloc (3,184,117 samples, 0.23%)</title><rect x="95.2128%" y="85" width="0.2295%" height="15" fill="rgb(213,87,29)" fg:x="1320935214" fg:w="3184117"/><text x="95.4628%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3,141,942 samples, 0.23%)</title><rect x="95.4423%" y="213" width="0.2265%" height="15" fill="rgb(205,151,52)" fg:x="1324119331" fg:w="3141942"/><text x="95.6923%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3,141,942 samples, 0.23%)</title><rect x="95.4423%" y="197" width="0.2265%" height="15" fill="rgb(253,215,39)" fg:x="1324119331" fg:w="3141942"/><text x="95.6923%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3,141,942 samples, 0.23%)</title><rect x="95.4423%" y="181" width="0.2265%" height="15" fill="rgb(221,220,41)" fg:x="1324119331" fg:w="3141942"/><text x="95.6923%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::get (3,141,942 samples, 0.23%)</title><rect x="95.4423%" y="165" width="0.2265%" height="15" fill="rgb(218,133,21)" fg:x="1324119331" fg:w="3141942"/><text x="95.6923%" y="175.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (81,783,449 samples, 5.89%)</title><rect x="92.0347%" y="533" width="5.8949%" height="15" fill="rgb(221,193,43)" fg:x="1276843854" fg:w="81783449"/><text x="92.2847%" y="543.50">regex_a..</text></g><g><title>regex_automata::meta::strategy::new (81,783,449 samples, 5.89%)</title><rect x="92.0347%" y="517" width="5.8949%" height="15" fill="rgb(240,128,52)" fg:x="1276843854" fg:w="81783449"/><text x="92.2847%" y="527.50">regex_a..</text></g><g><title>regex_automata::meta::strategy::Core::new (81,783,449 samples, 5.89%)</title><rect x="92.0347%" y="501" width="5.8949%" height="15" fill="rgb(253,114,12)" fg:x="1276843854" fg:w="81783449"/><text x="92.2847%" y="511.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (72,359,325 samples, 5.22%)</title><rect x="92.7140%" y="485" width="5.2156%" height="15" fill="rgb(215,223,47)" fg:x="1286267978" fg:w="72359325"/><text x="92.9640%" y="495.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (72,359,325 samples, 5.22%)</title><rect x="92.7140%" y="469" width="5.2156%" height="15" fill="rgb(248,225,23)" fg:x="1286267978" fg:w="72359325"/><text x="92.9640%" y="479.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (50,508,030 samples, 3.64%)</title><rect x="94.2890%" y="453" width="3.6406%" height="15" fill="rgb(250,108,0)" fg:x="1308119273" fg:w="50508030"/><text x="94.5390%" y="463.50">rege..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (50,508,030 samples, 3.64%)</title><rect x="94.2890%" y="437" width="3.6406%" height="15" fill="rgb(228,208,7)" fg:x="1308119273" fg:w="50508030"/><text x="94.5390%" y="447.50">&lt;cor..</text></g><g><title>core::option::Option&lt;T&gt;::map (50,508,030 samples, 3.64%)</title><rect x="94.2890%" y="421" width="3.6406%" height="15" fill="rgb(244,45,10)" fg:x="1308119273" fg:w="50508030"/><text x="94.5390%" y="431.50">core..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (50,508,030 samples, 3.64%)</title><rect x="94.2890%" y="405" width="3.6406%" height="15" fill="rgb(207,125,25)" fg:x="1308119273" fg:w="50508030"/><text x="94.5390%" y="415.50">core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (50,508,030 samples, 3.64%)</title><rect x="94.2890%" y="389" width="3.6406%" height="15" fill="rgb(210,195,18)" fg:x="1308119273" fg:w="50508030"/><text x="94.5390%" y="399.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (50,508,030 samples, 3.64%)</title><rect x="94.2890%" y="373" width="3.6406%" height="15" fill="rgb(249,80,12)" fg:x="1308119273" fg:w="50508030"/><text x="94.5390%" y="383.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (50,508,030 samples, 3.64%)</title><rect x="94.2890%" y="357" width="3.6406%" height="15" fill="rgb(221,65,9)" fg:x="1308119273" fg:w="50508030"/><text x="94.5390%" y="367.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (50,508,030 samples, 3.64%)</title><rect x="94.2890%" y="341" width="3.6406%" height="15" fill="rgb(235,49,36)" fg:x="1308119273" fg:w="50508030"/><text x="94.5390%" y="351.50">rege..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (40,931,479 samples, 2.95%)</title><rect x="94.9793%" y="325" width="2.9503%" height="15" fill="rgb(225,32,20)" fg:x="1317695824" fg:w="40931479"/><text x="95.2293%" y="335.50">&lt;co..</text></g><g><title>core::option::Option&lt;T&gt;::map (40,931,479 samples, 2.95%)</title><rect x="94.9793%" y="309" width="2.9503%" height="15" fill="rgb(215,141,46)" fg:x="1317695824" fg:w="40931479"/><text x="95.2293%" y="319.50">cor..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (40,931,479 samples, 2.95%)</title><rect x="94.9793%" y="293" width="2.9503%" height="15" fill="rgb(250,160,47)" fg:x="1317695824" fg:w="40931479"/><text x="95.2293%" y="303.50">cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (40,931,479 samples, 2.95%)</title><rect x="94.9793%" y="277" width="2.9503%" height="15" fill="rgb(216,222,40)" fg:x="1317695824" fg:w="40931479"/><text x="95.2293%" y="287.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (34,507,972 samples, 2.49%)</title><rect x="95.4423%" y="261" width="2.4873%" height="15" fill="rgb(234,217,39)" fg:x="1324119331" fg:w="34507972"/><text x="95.6923%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (34,507,972 samples, 2.49%)</title><rect x="95.4423%" y="245" width="2.4873%" height="15" fill="rgb(207,178,40)" fg:x="1324119331" fg:w="34507972"/><text x="95.6923%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (34,507,972 samples, 2.49%)</title><rect x="95.4423%" y="229" width="2.4873%" height="15" fill="rgb(221,136,13)" fg:x="1324119331" fg:w="34507972"/><text x="95.6923%" y="239.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (31,366,030 samples, 2.26%)</title><rect x="95.6688%" y="213" width="2.2609%" height="15" fill="rgb(249,199,10)" fg:x="1327261273" fg:w="31366030"/><text x="95.9188%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (31,366,030 samples, 2.26%)</title><rect x="95.6688%" y="197" width="2.2609%" height="15" fill="rgb(249,222,13)" fg:x="1327261273" fg:w="31366030"/><text x="95.9188%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (31,366,030 samples, 2.26%)</title><rect x="95.6688%" y="181" width="2.2609%" height="15" fill="rgb(244,185,38)" fg:x="1327261273" fg:w="31366030"/><text x="95.9188%" y="191.50">r..</text></g><g><title>alloc::vec::from_elem (31,366,030 samples, 2.26%)</title><rect x="95.6688%" y="165" width="2.2609%" height="15" fill="rgb(236,202,9)" fg:x="1327261273" fg:w="31366030"/><text x="95.9188%" y="175.50">a..</text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (31,366,030 samples, 2.26%)</title><rect x="95.6688%" y="149" width="2.2609%" height="15" fill="rgb(250,229,37)" fg:x="1327261273" fg:w="31366030"/><text x="95.9188%" y="159.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (31,366,030 samples, 2.26%)</title><rect x="95.6688%" y="133" width="2.2609%" height="15" fill="rgb(206,174,23)" fg:x="1327261273" fg:w="31366030"/><text x="95.9188%" y="143.50">a..</text></g><g><title>core::ptr::write (31,366,030 samples, 2.26%)</title><rect x="95.6688%" y="117" width="2.2609%" height="15" fill="rgb(211,33,43)" fg:x="1327261273" fg:w="31366030"/><text x="95.9188%" y="127.50">c..</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl::{{closure}} (94,088,439 samples, 6.78%)</title><rect x="91.3766%" y="1093" width="6.7819%" height="15" fill="rgb(245,58,50)" fg:x="1267713673" fg:w="94088439"/><text x="91.6266%" y="1103.50">syntastic..</text></g><g><title>core::option::Option&lt;T&gt;::or_else (94,088,439 samples, 6.78%)</title><rect x="91.3766%" y="1077" width="6.7819%" height="15" fill="rgb(244,68,36)" fg:x="1267713673" fg:w="94088439"/><text x="91.6266%" y="1087.50">core::opt..</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl::{{closure}}::{{closure}} (94,088,439 samples, 6.78%)</title><rect x="91.3766%" y="1061" width="6.7819%" height="15" fill="rgb(232,229,15)" fg:x="1267713673" fg:w="94088439"/><text x="91.6266%" y="1071.50">syntastic..</text></g><g><title>syntastica_core::language_set::SupportedLanguage::for_injection (94,088,439 samples, 6.78%)</title><rect x="91.3766%" y="1045" width="6.7819%" height="15" fill="rgb(254,30,23)" fg:x="1267713673" fg:w="94088439"/><text x="91.6266%" y="1055.50">syntastic..</text></g><g><title>tft::detect::try_detect (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="1029" width="6.3438%" height="15" fill="rgb(235,160,14)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="1039.50">tft::det..</text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="1013" width="6.3438%" height="15" fill="rgb(212,155,44)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="1023.50">&lt;once_ce..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="997" width="6.3438%" height="15" fill="rgb(226,2,50)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="1007.50">once_cel..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="981" width="6.3438%" height="15" fill="rgb(234,177,6)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="991.50">once_cel..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="965" width="6.3438%" height="15" fill="rgb(217,24,9)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="975.50">once_cel..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="949" width="6.3438%" height="15" fill="rgb(220,13,46)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="959.50">once_cel..</text></g><g><title>once_cell::imp::initialize_or_wait (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="933" width="6.3438%" height="15" fill="rgb(239,221,27)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="943.50">once_cel..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="917" width="6.3438%" height="15" fill="rgb(222,198,25)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="927.50">core::op..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="901" width="6.3438%" height="15" fill="rgb(211,99,13)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="911.50">once_cel..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="885" width="6.3438%" height="15" fill="rgb(232,111,31)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="895.50">once_cel..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="869" width="6.3438%" height="15" fill="rgb(245,82,37)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="879.50">once_cel..</text></g><g><title>core::ops::function::FnOnce::call_once (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="853" width="6.3438%" height="15" fill="rgb(227,149,46)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="863.50">core::op..</text></g><g><title>core::ops::function::FnOnce::call_once (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="837" width="6.3438%" height="15" fill="rgb(218,36,50)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="847.50">core::op..</text></g><g><title>tft::detect::pattern::PATTERN::{{closure}} (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="821" width="6.3438%" height="15" fill="rgb(226,80,48)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="831.50">tft::det..</text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="805" width="6.3438%" height="15" fill="rgb(238,224,15)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="815.50">&lt;once_ce..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="789" width="6.3438%" height="15" fill="rgb(241,136,10)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="799.50">once_cel..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="773" width="6.3438%" height="15" fill="rgb(208,32,45)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="783.50">once_cel..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="757" width="6.3438%" height="15" fill="rgb(207,135,9)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="767.50">once_cel..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="741" width="6.3438%" height="15" fill="rgb(206,86,44)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="751.50">once_cel..</text></g><g><title>once_cell::imp::initialize_or_wait (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="725" width="6.3438%" height="15" fill="rgb(245,177,15)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="735.50">once_cel..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="709" width="6.3438%" height="15" fill="rgb(206,64,50)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="719.50">core::op..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="693" width="6.3438%" height="15" fill="rgb(234,36,40)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="703.50">once_cel..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="677" width="6.3438%" height="15" fill="rgb(213,64,8)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="687.50">once_cel..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="661" width="6.3438%" height="15" fill="rgb(210,75,36)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="671.50">once_cel..</text></g><g><title>core::ops::function::FnOnce::call_once (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="645" width="6.3438%" height="15" fill="rgb(229,88,21)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="655.50">core::op..</text></g><g><title>core::ops::function::FnOnce::call_once (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="629" width="6.3438%" height="15" fill="rgb(252,204,47)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="639.50">core::op..</text></g><g><title>tft::detect::pattern::PATTERN::{{closure}}::RE::{{closure}} (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="613" width="6.3438%" height="15" fill="rgb(208,77,27)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="623.50">tft::det..</text></g><g><title>regex::builders::string::RegexBuilder::build (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="597" width="6.3438%" height="15" fill="rgb(221,76,26)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="607.50">regex::b..</text></g><g><title>regex::builders::Builder::build_one_string (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="581" width="6.3438%" height="15" fill="rgb(225,139,18)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="591.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="565" width="6.3438%" height="15" fill="rgb(230,137,11)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="575.50">regex_au..</text></g><g><title>regex_automata::meta::regex::Builder::build_many (88,010,768 samples, 6.34%)</title><rect x="91.8146%" y="549" width="6.3438%" height="15" fill="rgb(212,28,1)" fg:x="1273791344" fg:w="88010768"/><text x="92.0646%" y="559.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="533" width="0.2288%" height="15" fill="rgb(248,164,17)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="543.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="517" width="0.2288%" height="15" fill="rgb(222,171,42)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="527.50"></text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="501" width="0.2288%" height="15" fill="rgb(243,84,45)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="511.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="485" width="0.2288%" height="15" fill="rgb(252,49,23)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="495.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_dot (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="469" width="0.2288%" height="15" fill="rgb(215,19,7)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="479.50"></text></g><g><title>regex_syntax::hir::Hir::dot (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="453" width="0.2288%" height="15" fill="rgb(238,81,41)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="463.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::negate (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="437" width="0.2288%" height="15" fill="rgb(210,199,37)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="447.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::negate (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="421" width="0.2288%" height="15" fill="rgb(244,192,49)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="405" width="0.2288%" height="15" fill="rgb(226,211,11)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="389" width="0.2288%" height="15" fill="rgb(236,162,54)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="373" width="0.2288%" height="15" fill="rgb(220,229,9)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="357" width="0.2288%" height="15" fill="rgb(250,87,22)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="341" width="0.2288%" height="15" fill="rgb(239,43,17)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="325" width="0.2288%" height="15" fill="rgb(231,177,25)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="309" width="0.2288%" height="15" fill="rgb(219,179,1)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="319.50"></text></g><g><title>alloc::alloc::realloc (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="293" width="0.2288%" height="15" fill="rgb(238,219,53)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="303.50"></text></g><g><title>realloc (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="277" width="0.2288%" height="15" fill="rgb(232,167,36)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="287.50"></text></g><g><title>_int_realloc (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="261" width="0.2288%" height="15" fill="rgb(244,19,51)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="271.50"></text></g><g><title>_int_malloc (3,174,809 samples, 0.23%)</title><rect x="97.9296%" y="245" width="0.2288%" height="15" fill="rgb(224,6,22)" fg:x="1358627303" fg:w="3174809"/><text x="98.1796%" y="255.50"></text></g><g><title>syntastica::processor::process_highlight_iter (97,163,353 samples, 7.00%)</title><rect x="91.3766%" y="1125" width="7.0035%" height="15" fill="rgb(224,145,5)" fg:x="1267713673" fg:w="97163353"/><text x="91.6266%" y="1135.50">syntastic..</text></g><g><title>&lt;syntastica_highlight::HighlightIter&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (97,163,353 samples, 7.00%)</title><rect x="91.3766%" y="1109" width="7.0035%" height="15" fill="rgb(234,130,49)" fg:x="1267713673" fg:w="97163353"/><text x="91.6266%" y="1119.50">&lt;syntasti..</text></g><g><title>syntastica_highlight::HighlightIter&lt;F&gt;::emit_event (3,074,914 samples, 0.22%)</title><rect x="98.1584%" y="1093" width="0.2216%" height="15" fill="rgb(254,6,2)" fg:x="1361802112" fg:w="3074914"/><text x="98.4084%" y="1103.50"></text></g><g><title>syntastica_highlight::HighlightIter&lt;F&gt;::sort_layers (3,074,914 samples, 0.22%)</title><rect x="98.1584%" y="1077" width="0.2216%" height="15" fill="rgb(208,96,46)" fg:x="1361802112" fg:w="3074914"/><text x="98.4084%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tree_sitter::Tree&gt;&gt; (3,074,914 samples, 0.22%)</title><rect x="98.1584%" y="1061" width="0.2216%" height="15" fill="rgb(239,3,39)" fg:x="1361802112" fg:w="3074914"/><text x="98.4084%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tree_sitter::Tree&gt; (3,074,914 samples, 0.22%)</title><rect x="98.1584%" y="1045" width="0.2216%" height="15" fill="rgb(233,210,1)" fg:x="1361802112" fg:w="3074914"/><text x="98.4084%" y="1055.50"></text></g><g><title>ts_tree_delete (3,074,914 samples, 0.22%)</title><rect x="98.1584%" y="1029" width="0.2216%" height="15" fill="rgb(244,137,37)" fg:x="1361802112" fg:w="3074914"/><text x="98.4084%" y="1039.50"></text></g><g><title>ts_subtree_release (3,074,914 samples, 0.22%)</title><rect x="98.1584%" y="1013" width="0.2216%" height="15" fill="rgb(240,136,2)" fg:x="1361802112" fg:w="3074914"/><text x="98.4084%" y="1023.50"></text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process (1,368,019,410 samples, 98.61%)</title><rect x="0.2151%" y="1157" width="98.6066%" height="15" fill="rgb(239,18,37)" fg:x="2983768" fg:w="1368019410"/><text x="0.4651%" y="1167.50">syntastica::processor::Processor&lt;Set&gt;::process</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl (1,368,019,410 samples, 98.61%)</title><rect x="0.2151%" y="1141" width="98.6066%" height="15" fill="rgb(218,185,22)" fg:x="2983768" fg:w="1368019410"/><text x="0.4651%" y="1151.50">syntastica::processor::Processor&lt;Set&gt;::process_impl</text></g><g><title>syntastica_highlight::Highlighter::highlight (6,126,152 samples, 0.44%)</title><rect x="98.3801%" y="1125" width="0.4416%" height="15" fill="rgb(225,218,4)" fg:x="1364877026" fg:w="6126152"/><text x="98.6301%" y="1135.50"></text></g><g><title>syntastica_highlight::HighlightIterLayer::new (6,126,152 samples, 0.44%)</title><rect x="98.3801%" y="1109" width="0.4416%" height="15" fill="rgb(230,182,32)" fg:x="1364877026" fg:w="6126152"/><text x="98.6301%" y="1119.50"></text></g><g><title>tree_sitter::Parser::parse_with_options (6,126,152 samples, 0.44%)</title><rect x="98.3801%" y="1093" width="0.4416%" height="15" fill="rgb(242,56,43)" fg:x="1364877026" fg:w="6126152"/><text x="98.6301%" y="1103.50"></text></g><g><title>ts_parser_parse_with_options (6,126,152 samples, 0.44%)</title><rect x="98.3801%" y="1077" width="0.4416%" height="15" fill="rgb(233,99,24)" fg:x="1364877026" fg:w="6126152"/><text x="98.6301%" y="1087.50"></text></g><g><title>ts_parser_parse (6,126,152 samples, 0.44%)</title><rect x="98.3801%" y="1061" width="0.4416%" height="15" fill="rgb(234,209,42)" fg:x="1364877026" fg:w="6126152"/><text x="98.6301%" y="1071.50"></text></g><g><title>ts_parser__condense_stack (6,126,152 samples, 0.44%)</title><rect x="98.3801%" y="1045" width="0.4416%" height="15" fill="rgb(227,7,12)" fg:x="1364877026" fg:w="6126152"/><text x="98.6301%" y="1055.50"></text></g><g><title>ts_parser__handle_error (6,126,152 samples, 0.44%)</title><rect x="98.3801%" y="1029" width="0.4416%" height="15" fill="rgb(245,203,43)" fg:x="1364877026" fg:w="6126152"/><text x="98.6301%" y="1039.50"></text></g><g><title>ts_parser__do_all_potential_reductions (6,126,152 samples, 0.44%)</title><rect x="98.3801%" y="1013" width="0.4416%" height="15" fill="rgb(238,205,33)" fg:x="1364877026" fg:w="6126152"/><text x="98.6301%" y="1023.50"></text></g><g><title>ts_language_table_entry (6,126,152 samples, 0.44%)</title><rect x="98.3801%" y="997" width="0.4416%" height="15" fill="rgb(231,56,7)" fg:x="1364877026" fg:w="6126152"/><text x="98.6301%" y="1007.50"></text></g><g><title>ts_language_lookup (6,126,152 samples, 0.44%)</title><rect x="98.3801%" y="981" width="0.4416%" height="15" fill="rgb(244,186,29)" fg:x="1364877026" fg:w="6126152"/><text x="98.6301%" y="991.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build_auto (3,130,371 samples, 0.23%)</title><rect x="98.8217%" y="1093" width="0.2256%" height="15" fill="rgb(234,111,31)" fg:x="1371003178" fg:w="3130371"/><text x="99.0717%" y="1103.50"></text></g><g><title>aho_corasick::dfa::Builder::build_from_noncontiguous (3,130,371 samples, 0.23%)</title><rect x="98.8217%" y="1077" width="0.2256%" height="15" fill="rgb(241,149,10)" fg:x="1371003178" fg:w="3130371"/><text x="99.0717%" y="1087.50"></text></g><g><title>aho_corasick::dfa::Builder::finish_build_one_start (3,130,371 samples, 0.23%)</title><rect x="98.8217%" y="1061" width="0.2256%" height="15" fill="rgb(249,206,44)" fg:x="1371003178" fg:w="3130371"/><text x="99.0717%" y="1071.50"></text></g><g><title>aho_corasick::dfa::sparse_iter (3,130,371 samples, 0.23%)</title><rect x="98.8217%" y="1045" width="0.2256%" height="15" fill="rgb(251,153,30)" fg:x="1371003178" fg:w="3130371"/><text x="99.0717%" y="1055.50"></text></g><g><title>&lt;core::iter::sources::from_fn::FromFn&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,130,371 samples, 0.23%)</title><rect x="98.8217%" y="1029" width="0.2256%" height="15" fill="rgb(239,152,38)" fg:x="1371003178" fg:w="3130371"/><text x="99.0717%" y="1039.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::iter_trans::{{closure}} (3,130,371 samples, 0.23%)</title><rect x="98.8217%" y="1013" width="0.2256%" height="15" fill="rgb(249,139,47)" fg:x="1371003178" fg:w="3130371"/><text x="99.0717%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2,924,359 samples, 0.21%)</title><rect x="99.0473%" y="997" width="0.2108%" height="15" fill="rgb(244,64,35)" fg:x="1374133549" fg:w="2924359"/><text x="99.2973%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (2,924,359 samples, 0.21%)</title><rect x="99.0473%" y="981" width="0.2108%" height="15" fill="rgb(216,46,15)" fg:x="1374133549" fg:w="2924359"/><text x="99.2973%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2,924,359 samples, 0.21%)</title><rect x="99.0473%" y="965" width="0.2108%" height="15" fill="rgb(250,74,19)" fg:x="1374133549" fg:w="2924359"/><text x="99.2973%" y="975.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,924,359 samples, 0.21%)</title><rect x="99.0473%" y="949" width="0.2108%" height="15" fill="rgb(249,42,33)" fg:x="1374133549" fg:w="2924359"/><text x="99.2973%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2,924,359 samples, 0.21%)</title><rect x="99.0473%" y="933" width="0.2108%" height="15" fill="rgb(242,149,17)" fg:x="1374133549" fg:w="2924359"/><text x="99.2973%" y="943.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2,924,359 samples, 0.21%)</title><rect x="99.0473%" y="917" width="0.2108%" height="15" fill="rgb(244,29,21)" fg:x="1374133549" fg:w="2924359"/><text x="99.2973%" y="927.50"></text></g><g><title>alloc::alloc::realloc (2,924,359 samples, 0.21%)</title><rect x="99.0473%" y="901" width="0.2108%" height="15" fill="rgb(220,130,37)" fg:x="1374133549" fg:w="2924359"/><text x="99.2973%" y="911.50"></text></g><g><title>realloc (2,924,359 samples, 0.21%)</title><rect x="99.0473%" y="885" width="0.2108%" height="15" fill="rgb(211,67,2)" fg:x="1374133549" fg:w="2924359"/><text x="99.2973%" y="895.50"></text></g><g><title>_int_realloc (2,924,359 samples, 0.21%)</title><rect x="99.0473%" y="869" width="0.2108%" height="15" fill="rgb(235,68,52)" fg:x="1374133549" fg:w="2924359"/><text x="99.2973%" y="879.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::init_unanchored_start_state (6,026,952 samples, 0.43%)</title><rect x="99.0473%" y="1061" width="0.4344%" height="15" fill="rgb(246,142,3)" fg:x="1374133549" fg:w="6026952"/><text x="99.2973%" y="1071.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::init_full_state (6,026,952 samples, 0.43%)</title><rect x="99.0473%" y="1045" width="0.4344%" height="15" fill="rgb(241,25,7)" fg:x="1374133549" fg:w="6026952"/><text x="99.2973%" y="1055.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::alloc_transition (6,026,952 samples, 0.43%)</title><rect x="99.0473%" y="1029" width="0.4344%" height="15" fill="rgb(242,119,39)" fg:x="1374133549" fg:w="6026952"/><text x="99.2973%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6,026,952 samples, 0.43%)</title><rect x="99.0473%" y="1013" width="0.4344%" height="15" fill="rgb(241,98,45)" fg:x="1374133549" fg:w="6026952"/><text x="99.2973%" y="1023.50"></text></g><g><title>core::ptr::write (3,102,593 samples, 0.22%)</title><rect x="99.2581%" y="997" width="0.2236%" height="15" fill="rgb(254,28,30)" fg:x="1377057908" fg:w="3102593"/><text x="99.5081%" y="1007.50"></text></g><g><title>&lt;kaka_nest::pullmark_parsers::format_codeblocks::FormatBlockquotes&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,380,225,078 samples, 99.49%)</title><rect x="0.2151%" y="1237" width="99.4864%" height="15" fill="rgb(241,142,54)" fg:x="2983768" fg:w="1380225078"/><text x="0.4651%" y="1247.50">&lt;kaka_nest::pullmark_parsers::format_codeblocks::FormatBlockquotes&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,380,225,078 samples, 99.49%)</title><rect x="0.2151%" y="1221" width="99.4864%" height="15" fill="rgb(222,85,15)" fg:x="2983768" fg:w="1380225078"/><text x="0.4651%" y="1231.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (1,380,225,078 samples, 99.49%)</title><rect x="0.2151%" y="1205" width="99.4864%" height="15" fill="rgb(210,85,47)" fg:x="2983768" fg:w="1380225078"/><text x="0.4651%" y="1215.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,380,225,078 samples, 99.49%)</title><rect x="0.2151%" y="1189" width="99.4864%" height="15" fill="rgb(224,206,25)" fg:x="2983768" fg:w="1380225078"/><text x="0.4651%" y="1199.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>kaka_nest::pullmark_parsers::highlight_codeblocks::{{closure}} (1,380,225,078 samples, 99.49%)</title><rect x="0.2151%" y="1173" width="99.4864%" height="15" fill="rgb(243,201,19)" fg:x="2983768" fg:w="1380225078"/><text x="0.4651%" y="1183.50">kaka_nest::pullmark_parsers::highlight_codeblocks::{{closure}}</text></g><g><title>syntastica::renderer::render (12,205,668 samples, 0.88%)</title><rect x="98.8217%" y="1157" width="0.8798%" height="15" fill="rgb(236,59,4)" fg:x="1371003178" fg:w="12205668"/><text x="99.0717%" y="1167.50"></text></g><g><title>&lt;syntastica::renderer::HtmlRenderer as syntastica::renderer::Renderer&gt;::escape (12,205,668 samples, 0.88%)</title><rect x="98.8217%" y="1141" width="0.8798%" height="15" fill="rgb(254,179,45)" fg:x="1371003178" fg:w="12205668"/><text x="99.0717%" y="1151.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasick::new (12,205,668 samples, 0.88%)</title><rect x="98.8217%" y="1125" width="0.8798%" height="15" fill="rgb(226,14,10)" fg:x="1371003178" fg:w="12205668"/><text x="99.0717%" y="1135.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build (12,205,668 samples, 0.88%)</title><rect x="98.8217%" y="1109" width="0.8798%" height="15" fill="rgb(244,27,41)" fg:x="1371003178" fg:w="12205668"/><text x="99.0717%" y="1119.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Builder::build (9,075,297 samples, 0.65%)</title><rect x="99.0473%" y="1093" width="0.6541%" height="15" fill="rgb(235,35,32)" fg:x="1374133549" fg:w="9075297"/><text x="99.2973%" y="1103.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::compile (9,075,297 samples, 0.65%)</title><rect x="99.0473%" y="1077" width="0.6541%" height="15" fill="rgb(218,68,31)" fg:x="1374133549" fg:w="9075297"/><text x="99.2973%" y="1087.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::shuffle (3,048,345 samples, 0.22%)</title><rect x="99.4817%" y="1061" width="0.2197%" height="15" fill="rgb(207,120,37)" fg:x="1380160501" fg:w="3048345"/><text x="99.7317%" y="1071.50"></text></g><g><title>aho_corasick::util::remapper::Remapper::remap (3,048,345 samples, 0.22%)</title><rect x="99.4817%" y="1045" width="0.2197%" height="15" fill="rgb(227,98,0)" fg:x="1380160501" fg:w="3048345"/><text x="99.7317%" y="1055.50"></text></g><g><title>&lt;aho_corasick::nfa::noncontiguous::NFA as aho_corasick::util::remapper::Remappable&gt;::remap (3,048,345 samples, 0.22%)</title><rect x="99.4817%" y="1029" width="0.2197%" height="15" fill="rgb(207,7,3)" fg:x="1380160501" fg:w="3048345"/><text x="99.7317%" y="1039.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::remap (3,048,345 samples, 0.22%)</title><rect x="99.4817%" y="1013" width="0.2197%" height="15" fill="rgb(206,98,19)" fg:x="1380160501" fg:w="3048345"/><text x="99.7317%" y="1023.50"></text></g><g><title>std::rt::lang_start::{{closure}} (1,383,364,110 samples, 99.71%)</title><rect x="0.2151%" y="1365" width="99.7126%" height="15" fill="rgb(217,5,26)" fg:x="2983768" fg:w="1383364110"/><text x="0.4651%" y="1375.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,383,364,110 samples, 99.71%)</title><rect x="0.2151%" y="1349" width="99.7126%" height="15" fill="rgb(235,190,38)" fg:x="2983768" fg:w="1383364110"/><text x="0.4651%" y="1359.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,383,364,110 samples, 99.71%)</title><rect x="0.2151%" y="1333" width="99.7126%" height="15" fill="rgb(247,86,24)" fg:x="2983768" fg:w="1383364110"/><text x="0.4651%" y="1343.50">core::ops::function::FnOnce::call_once</text></g><g><title>kaka_nest::main (1,383,364,110 samples, 99.71%)</title><rect x="0.2151%" y="1317" width="99.7126%" height="15" fill="rgb(205,101,16)" fg:x="2983768" fg:w="1383364110"/><text x="0.4651%" y="1327.50">kaka_nest::main</text></g><g><title>kaka_nest::get_markdown::get_blogs (1,383,364,110 samples, 99.71%)</title><rect x="0.2151%" y="1301" width="99.7126%" height="15" fill="rgb(246,168,33)" fg:x="2983768" fg:w="1383364110"/><text x="0.4651%" y="1311.50">kaka_nest::get_markdown::get_blogs</text></g><g><title>pulldown_cmark::html::push_html (1,383,364,110 samples, 99.71%)</title><rect x="0.2151%" y="1285" width="99.7126%" height="15" fill="rgb(231,114,1)" fg:x="2983768" fg:w="1383364110"/><text x="0.4651%" y="1295.50">pulldown_cmark::html::push_html</text></g><g><title>pulldown_cmark::html::write_html_fmt (1,383,364,110 samples, 99.71%)</title><rect x="0.2151%" y="1269" width="99.7126%" height="15" fill="rgb(207,184,53)" fg:x="2983768" fg:w="1383364110"/><text x="0.4651%" y="1279.50">pulldown_cmark::html::write_html_fmt</text></g><g><title>pulldown_cmark::html::HtmlWriter&lt;I,W&gt;::run (1,383,364,110 samples, 99.71%)</title><rect x="0.2151%" y="1253" width="99.7126%" height="15" fill="rgb(224,95,51)" fg:x="2983768" fg:w="1383364110"/><text x="0.4651%" y="1263.50">pulldown_cmark::html::HtmlWriter&lt;I,W&gt;::run</text></g><g><title>core::ptr::drop_in_place&lt;pulldown_cmark::html::HtmlWriter&lt;kaka_nest::pullmark_parsers::format_codeblocks::FormatBlockquotes&lt;core::iter::adapters::map::Map&lt;pulldown_cmark::parse::Parser,kaka_nest::pullmark_parsers::highlight_codeblocks::{{closure}}&gt;&gt;,pulldown_cmark_escape::FmtWriter&lt;&amp;mut alloc::string::String&gt;&gt;&gt; (3,139,032 samples, 0.23%)</title><rect x="99.7014%" y="1237" width="0.2263%" height="15" fill="rgb(212,188,45)" fg:x="1383208846" fg:w="3139032"/><text x="99.9514%" y="1247.50"></text></g><g><title>core::ptr::drop_in_place&lt;kaka_nest::pullmark_parsers::format_codeblocks::FormatBlockquotes&lt;core::iter::adapters::map::Map&lt;pulldown_cmark::parse::Parser,kaka_nest::pullmark_parsers::highlight_codeblocks::{{closure}}&gt;&gt;&gt; (3,139,032 samples, 0.23%)</title><rect x="99.7014%" y="1221" width="0.2263%" height="15" fill="rgb(223,154,38)" fg:x="1383208846" fg:w="3139032"/><text x="99.9514%" y="1231.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (3,139,032 samples, 0.23%)</title><rect x="99.7014%" y="1205" width="0.2263%" height="15" fill="rgb(251,22,52)" fg:x="1383208846" fg:w="3139032"/><text x="99.9514%" y="1215.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,139,032 samples, 0.23%)</title><rect x="99.7014%" y="1189" width="0.2263%" height="15" fill="rgb(229,209,22)" fg:x="1383208846" fg:w="3139032"/><text x="99.9514%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (3,139,032 samples, 0.23%)</title><rect x="99.7014%" y="1173" width="0.2263%" height="15" fill="rgb(234,138,34)" fg:x="1383208846" fg:w="3139032"/><text x="99.9514%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3,139,032 samples, 0.23%)</title><rect x="99.7014%" y="1157" width="0.2263%" height="15" fill="rgb(212,95,11)" fg:x="1383208846" fg:w="3139032"/><text x="99.9514%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,139,032 samples, 0.23%)</title><rect x="99.7014%" y="1141" width="0.2263%" height="15" fill="rgb(240,179,47)" fg:x="1383208846" fg:w="3139032"/><text x="99.9514%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,139,032 samples, 0.23%)</title><rect x="99.7014%" y="1125" width="0.2263%" height="15" fill="rgb(240,163,11)" fg:x="1383208846" fg:w="3139032"/><text x="99.9514%" y="1135.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,139,032 samples, 0.23%)</title><rect x="99.7014%" y="1109" width="0.2263%" height="15" fill="rgb(236,37,12)" fg:x="1383208846" fg:w="3139032"/><text x="99.9514%" y="1119.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,139,032 samples, 0.23%)</title><rect x="99.7014%" y="1093" width="0.2263%" height="15" fill="rgb(232,164,16)" fg:x="1383208846" fg:w="3139032"/><text x="99.9514%" y="1103.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,139,032 samples, 0.23%)</title><rect x="99.7014%" y="1077" width="0.2263%" height="15" fill="rgb(244,205,15)" fg:x="1383208846" fg:w="3139032"/><text x="99.9514%" y="1087.50"></text></g><g><title>alloc::alloc::dealloc (3,139,032 samples, 0.23%)</title><rect x="99.7014%" y="1061" width="0.2263%" height="15" fill="rgb(223,117,47)" fg:x="1383208846" fg:w="3139032"/><text x="99.9514%" y="1071.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3,139,032 samples, 0.23%)</title><rect x="99.7014%" y="1045" width="0.2263%" height="15" fill="rgb(244,107,35)" fg:x="1383208846" fg:w="3139032"/><text x="99.9514%" y="1055.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (1,383,865,614 samples, 99.75%)</title><rect x="0.2151%" y="1429" width="99.7488%" height="15" fill="rgb(205,140,8)" fg:x="2983768" fg:w="1383865614"/><text x="0.4651%" y="1439.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (1,383,865,614 samples, 99.75%)</title><rect x="0.2151%" y="1413" width="99.7488%" height="15" fill="rgb(228,84,46)" fg:x="2983768" fg:w="1383865614"/><text x="0.4651%" y="1423.50">__libc_start_call_main</text></g><g><title>main (1,383,865,614 samples, 99.75%)</title><rect x="0.2151%" y="1397" width="99.7488%" height="15" fill="rgb(254,188,9)" fg:x="2983768" fg:w="1383865614"/><text x="0.4651%" y="1407.50">main</text></g><g><title>std::rt::lang_start_internal (1,383,865,614 samples, 99.75%)</title><rect x="0.2151%" y="1381" width="99.7488%" height="15" fill="rgb(206,112,54)" fg:x="2983768" fg:w="1383865614"/><text x="0.4651%" y="1391.50">std::rt::lang_start_internal</text></g><g><title>std::sys::pal::unix::init (501,504 samples, 0.04%)</title><rect x="99.9277%" y="1365" width="0.0361%" height="15" fill="rgb(216,84,49)" fg:x="1386347878" fg:w="501504"/><text x="100.1777%" y="1375.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::init (501,504 samples, 0.04%)</title><rect x="99.9277%" y="1349" width="0.0361%" height="15" fill="rgb(214,194,35)" fg:x="1386347878" fg:w="501504"/><text x="100.1777%" y="1359.50"></text></g><g><title>pthread_getattr_np@@GLIBC_2.32 (501,504 samples, 0.04%)</title><rect x="99.9277%" y="1333" width="0.0361%" height="15" fill="rgb(249,28,3)" fg:x="1386347878" fg:w="501504"/><text x="100.1777%" y="1343.50"></text></g><g><title>__isoc23_sscanf (501,504 samples, 0.04%)</title><rect x="99.9277%" y="1317" width="0.0361%" height="15" fill="rgb(222,56,52)" fg:x="1386347878" fg:w="501504"/><text x="100.1777%" y="1327.50"></text></g><g><title>__vfscanf_internal (501,504 samples, 0.04%)</title><rect x="99.9277%" y="1301" width="0.0361%" height="15" fill="rgb(245,217,50)" fg:x="1386347878" fg:w="501504"/><text x="100.1777%" y="1311.50"></text></g><g><title>all (1,387,350,886 samples, 100%)</title><rect x="0.0000%" y="1477" width="100.0000%" height="15" fill="rgb(213,201,24)" fg:x="0" fg:w="1387350886"/><text x="0.2500%" y="1487.50"></text></g><g><title>kaka-nest (1,387,350,886 samples, 100.00%)</title><rect x="0.0000%" y="1461" width="100.0000%" height="15" fill="rgb(248,116,28)" fg:x="0" fg:w="1387350886"/><text x="0.2500%" y="1471.50">kaka-nest</text></g><g><title>_start (1,384,367,118 samples, 99.78%)</title><rect x="0.2151%" y="1445" width="99.7849%" height="15" fill="rgb(219,72,43)" fg:x="2983768" fg:w="1384367118"/><text x="0.4651%" y="1455.50">_start</text></g><g><title>_dl_start (501,504 samples, 0.04%)</title><rect x="99.9639%" y="1429" width="0.0361%" height="15" fill="rgb(209,138,14)" fg:x="1386849382" fg:w="501504"/><text x="100.2139%" y="1439.50"></text></g><g><title>_dl_sysdep_start (501,504 samples, 0.04%)</title><rect x="99.9639%" y="1413" width="0.0361%" height="15" fill="rgb(222,18,33)" fg:x="1386849382" fg:w="501504"/><text x="100.2139%" y="1423.50"></text></g><g><title>dl_main (501,504 samples, 0.04%)</title><rect x="99.9639%" y="1397" width="0.0361%" height="15" fill="rgb(213,199,7)" fg:x="1386849382" fg:w="501504"/><text x="100.2139%" y="1407.50"></text></g><g><title>_dl_relocate_object (501,504 samples, 0.04%)</title><rect x="99.9639%" y="1381" width="0.0361%" height="15" fill="rgb(250,110,10)" fg:x="1386849382" fg:w="501504"/><text x="100.2139%" y="1391.50"></text></g></svg></svg>