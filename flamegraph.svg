<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1558" onload="init(evt)" viewBox="0 0 1200 1558" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1558" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1541.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1541.00"> </text><svg id="frames" x="10" width="1180" total_samples="777901586"><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (10,328,283 samples, 1.33%)</title><rect x="0.0000%" y="981" width="1.3277%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="10328283"/><text x="0.2500%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (10,328,283 samples, 1.33%)</title><rect x="0.0000%" y="965" width="1.3277%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="10328283"/><text x="0.2500%" y="975.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (10,328,283 samples, 1.33%)</title><rect x="0.0000%" y="949" width="1.3277%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="10328283"/><text x="0.2500%" y="959.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,328,283 samples, 1.33%)</title><rect x="0.0000%" y="933" width="1.3277%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="10328283"/><text x="0.2500%" y="943.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,328,283 samples, 1.33%)</title><rect x="0.0000%" y="917" width="1.3277%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="10328283"/><text x="0.2500%" y="927.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10,328,283 samples, 1.33%)</title><rect x="0.0000%" y="901" width="1.3277%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="10328283"/><text x="0.2500%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (10,328,283 samples, 1.33%)</title><rect x="0.0000%" y="885" width="1.3277%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="10328283"/><text x="0.2500%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (10,328,283 samples, 1.33%)</title><rect x="0.0000%" y="869" width="1.3277%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="10328283"/><text x="0.2500%" y="879.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (10,328,283 samples, 1.33%)</title><rect x="0.0000%" y="853" width="1.3277%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="10328283"/><text x="0.2500%" y="863.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (10,328,283 samples, 1.33%)</title><rect x="0.0000%" y="837" width="1.3277%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="10328283"/><text x="0.2500%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::{{closure}} (10,328,283 samples, 1.33%)</title><rect x="0.0000%" y="821" width="1.3277%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="10328283"/><text x="0.2500%" y="831.50"></text></g><g><title>tree_sitter::Query::from_raw_parts::{{closure}} (10,328,283 samples, 1.33%)</title><rect x="0.0000%" y="805" width="1.3277%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="10328283"/><text x="0.2500%" y="815.50"></text></g><g><title>tree_sitter::Query::from_raw_parts (15,485,573 samples, 1.99%)</title><rect x="0.0000%" y="997" width="1.9907%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="15485573"/><text x="0.2500%" y="1007.50">t..</text></g><g><title>regex::regex::bytes::Regex::new (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="981" width="0.6630%" height="15" fill="rgb(206,188,39)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="991.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::build (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="965" width="0.6630%" height="15" fill="rgb(217,207,13)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="975.50"></text></g><g><title>regex::builders::Builder::build_one_bytes (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="949" width="0.6630%" height="15" fill="rgb(231,73,38)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="959.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="933" width="0.6630%" height="15" fill="rgb(225,20,46)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="943.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="917" width="0.6630%" height="15" fill="rgb(210,31,41)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="927.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="901" width="0.6630%" height="15" fill="rgb(221,200,47)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="911.50"></text></g><g><title>regex_automata::meta::strategy::new (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="885" width="0.6630%" height="15" fill="rgb(226,26,5)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="895.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="869" width="0.6630%" height="15" fill="rgb(249,33,26)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="879.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="853" width="0.6630%" height="15" fill="rgb(235,183,28)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="863.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="837" width="0.6630%" height="15" fill="rgb(221,5,38)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="847.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="821" width="0.6630%" height="15" fill="rgb(247,18,42)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="805" width="0.6630%" height="15" fill="rgb(241,131,45)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="789" width="0.6630%" height="15" fill="rgb(249,31,29)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="799.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="773" width="0.6630%" height="15" fill="rgb(225,111,53)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="783.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="757" width="0.6630%" height="15" fill="rgb(238,160,17)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="767.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="741" width="0.6630%" height="15" fill="rgb(214,148,48)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="751.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="725" width="0.6630%" height="15" fill="rgb(232,36,49)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="735.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="709" width="0.6630%" height="15" fill="rgb(209,103,24)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="693" width="0.6630%" height="15" fill="rgb(229,88,8)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="677" width="0.6630%" height="15" fill="rgb(213,181,19)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="687.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="661" width="0.6630%" height="15" fill="rgb(254,191,54)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="671.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="645" width="0.6630%" height="15" fill="rgb(241,83,37)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="655.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="629" width="0.6630%" height="15" fill="rgb(233,36,39)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="639.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="613" width="0.6630%" height="15" fill="rgb(226,3,54)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="623.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="597" width="0.6630%" height="15" fill="rgb(245,192,40)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="607.50"></text></g><g><title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::compile (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="581" width="0.6630%" height="15" fill="rgb(238,167,29)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="565" width="0.6630%" height="15" fill="rgb(232,182,51)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="549" width="0.6630%" height="15" fill="rgb(231,60,39)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="533" width="0.6630%" height="15" fill="rgb(208,69,12)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="517" width="0.6630%" height="15" fill="rgb(235,93,37)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (5,157,290 samples, 0.66%)</title><rect x="1.3277%" y="501" width="0.6630%" height="15" fill="rgb(213,116,39)" fg:x="10328284" fg:w="5157290"/><text x="1.5777%" y="511.50"></text></g><g><title>analysis_state_set__push (5,066,423 samples, 0.65%)</title><rect x="4.4475%" y="965" width="0.6513%" height="15" fill="rgb(222,207,29)" fg:x="34596944" fg:w="5066423"/><text x="4.6975%" y="975.50"></text></g><g><title>analysis_state_pool__clone_or_reuse (5,066,423 samples, 0.65%)</title><rect x="4.4475%" y="949" width="0.6513%" height="15" fill="rgb(206,96,30)" fg:x="34596944" fg:w="5066423"/><text x="4.6975%" y="959.50"></text></g><g><title>ts_lookahead_iterator__next (1,903,360 samples, 0.24%)</title><rect x="5.0988%" y="965" width="0.2447%" height="15" fill="rgb(218,138,4)" fg:x="39663367" fg:w="1903360"/><text x="5.3488%" y="975.50"></text></g><g><title>_array__splice (4,463,625 samples, 0.57%)</title><rect x="56.4023%" y="949" width="0.5738%" height="15" fill="rgb(250,191,14)" fg:x="438754323" fg:w="4463625"/><text x="56.6523%" y="959.50"></text></g><g><title>memmove (4,463,625 samples, 0.57%)</title><rect x="56.4023%" y="933" width="0.5738%" height="15" fill="rgb(239,60,40)" fg:x="438754323" fg:w="4463625"/><text x="56.6523%" y="943.50"></text></g><g><title>analysis_state__recursion_depth (20,547,151 samples, 2.64%)</title><rect x="56.9761%" y="949" width="2.6414%" height="15" fill="rgb(206,27,48)" fg:x="443217948" fg:w="20547151"/><text x="57.2261%" y="959.50">an..</text></g><g><title>analysis_state__top (5,112,006 samples, 0.66%)</title><rect x="59.6175%" y="949" width="0.6572%" height="15" fill="rgb(225,35,8)" fg:x="463765099" fg:w="5112006"/><text x="59.8675%" y="959.50"></text></g><g><title>_array__splice (5,139,625 samples, 0.66%)</title><rect x="62.1998%" y="933" width="0.6607%" height="15" fill="rgb(250,213,24)" fg:x="483853292" fg:w="5139625"/><text x="62.4498%" y="943.50"></text></g><g><title>memmove (5,139,625 samples, 0.66%)</title><rect x="62.1998%" y="917" width="0.6607%" height="15" fill="rgb(247,123,22)" fg:x="483853292" fg:w="5139625"/><text x="62.4498%" y="927.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5,139,625 samples, 0.66%)</title><rect x="62.1998%" y="901" width="0.6607%" height="15" fill="rgb(231,138,38)" fg:x="483853292" fg:w="5139625"/><text x="62.4498%" y="911.50"></text></g><g><title>analysis_state__compare (19,780,730 samples, 2.54%)</title><rect x="62.8605%" y="917" width="2.5428%" height="15" fill="rgb(231,145,46)" fg:x="488992917" fg:w="19780730"/><text x="63.1105%" y="927.50">an..</text></g><g><title>analysis_state_set__insert_sorted (78,669,944 samples, 10.11%)</title><rect x="60.2746%" y="949" width="10.1131%" height="15" fill="rgb(251,118,11)" fg:x="468877105" fg:w="78669944"/><text x="60.5246%" y="959.50">analysis_state_..</text></g><g><title>analysis_state__compare (58,554,132 samples, 7.53%)</title><rect x="62.8605%" y="933" width="7.5272%" height="15" fill="rgb(217,147,25)" fg:x="488992917" fg:w="58554132"/><text x="63.1105%" y="943.50">analysis_s..</text></g><g><title>analysis_state__compare_position (38,773,402 samples, 4.98%)</title><rect x="65.4033%" y="917" width="4.9844%" height="15" fill="rgb(247,81,37)" fg:x="508773647" fg:w="38773402"/><text x="65.6533%" y="927.50">analys..</text></g><g><title>analysis_subgraph_node__compare (68,154,248 samples, 8.76%)</title><rect x="70.3877%" y="949" width="8.7613%" height="15" fill="rgb(209,12,38)" fg:x="547547049" fg:w="68154248"/><text x="70.6377%" y="959.50">analysis_sub..</text></g><g><title>ts_language_alias_at (14,965,323 samples, 1.92%)</title><rect x="79.1490%" y="949" width="1.9238%" height="15" fill="rgb(227,1,9)" fg:x="615701297" fg:w="14965323"/><text x="79.3990%" y="959.50">t..</text></g><g><title>ts_language_alias_at (14,965,323 samples, 1.92%)</title><rect x="79.1490%" y="933" width="1.9238%" height="15" fill="rgb(248,47,43)" fg:x="615701297" fg:w="14965323"/><text x="79.3990%" y="943.50">t..</text></g><g><title>ts_query__analyze_patterns (685,189,045 samples, 88.08%)</title><rect x="1.9907%" y="981" width="88.0817%" height="15" fill="rgb(221,10,30)" fg:x="15485574" fg:w="685189045"/><text x="2.2407%" y="991.50">ts_query__analyze_patterns</text></g><g><title>ts_query__perform_analysis (659,107,892 samples, 84.73%)</title><rect x="5.3434%" y="965" width="84.7290%" height="15" fill="rgb(210,229,1)" fg:x="41566727" fg:w="659107892"/><text x="5.5934%" y="975.50">ts_query__perform_analysis</text></g><g><title>ts_lookahead_iterator__next (70,007,999 samples, 9.00%)</title><rect x="81.0728%" y="949" width="8.9996%" height="15" fill="rgb(222,148,37)" fg:x="630666620" fg:w="70007999"/><text x="81.3228%" y="959.50">ts_lookahead_..</text></g><g><title>stream_scan_identifier (5,158,163 samples, 0.66%)</title><rect x="90.0724%" y="965" width="0.6631%" height="15" fill="rgb(234,67,33)" fg:x="700674619" fg:w="5158163"/><text x="90.3224%" y="975.50"></text></g><g><title>&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language (707,348,234 samples, 90.93%)</title><rect x="0.0000%" y="1157" width="90.9303%" height="15" fill="rgb(247,98,35)" fg:x="1" fg:w="707348234"/><text x="0.2500%" y="1167.50">&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (707,348,234 samples, 90.93%)</title><rect x="0.0000%" y="1141" width="90.9303%" height="15" fill="rgb(247,138,52)" fg:x="1" fg:w="707348234"/><text x="0.2500%" y="1151.50">once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (707,348,234 samples, 90.93%)</title><rect x="0.0000%" y="1125" width="90.9303%" height="15" fill="rgb(213,79,30)" fg:x="1" fg:w="707348234"/><text x="0.2500%" y="1135.50">once_cell::imp::OnceCell&lt;T&gt;::initialize</text></g><g><title>once_cell::imp::initialize_or_wait (707,348,234 samples, 90.93%)</title><rect x="0.0000%" y="1109" width="90.9303%" height="15" fill="rgb(246,177,23)" fg:x="1" fg:w="707348234"/><text x="0.2500%" y="1119.50">once_cell::imp::initialize_or_wait</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (707,348,234 samples, 90.93%)</title><rect x="0.0000%" y="1093" width="90.9303%" height="15" fill="rgb(230,62,27)" fg:x="1" fg:w="707348234"/><text x="0.2500%" y="1103.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (707,348,234 samples, 90.93%)</title><rect x="0.0000%" y="1077" width="90.9303%" height="15" fill="rgb(216,154,8)" fg:x="1" fg:w="707348234"/><text x="0.2500%" y="1087.50">once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}}</text></g><g><title>&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language::{{closure}} (707,348,234 samples, 90.93%)</title><rect x="0.0000%" y="1061" width="90.9303%" height="15" fill="rgb(244,35,45)" fg:x="1" fg:w="707348234"/><text x="0.2500%" y="1071.50">&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language::{{closure}}</text></g><g><title>syntastica_parsers::Lang::get_config (707,348,234 samples, 90.93%)</title><rect x="0.0000%" y="1045" width="90.9303%" height="15" fill="rgb(251,115,12)" fg:x="1" fg:w="707348234"/><text x="0.2500%" y="1055.50">syntastica_parsers::Lang::get_config</text></g><g><title>syntastica_highlight::HighlightConfiguration::new (707,348,234 samples, 90.93%)</title><rect x="0.0000%" y="1029" width="90.9303%" height="15" fill="rgb(240,54,50)" fg:x="1" fg:w="707348234"/><text x="0.2500%" y="1039.50">syntastica_highlight::HighlightConfiguration::new</text></g><g><title>tree_sitter::Query::new (707,348,234 samples, 90.93%)</title><rect x="0.0000%" y="1013" width="90.9303%" height="15" fill="rgb(233,84,52)" fg:x="1" fg:w="707348234"/><text x="0.2500%" y="1023.50">tree_sitter::Query::new</text></g><g><title>ts_query_new (691,862,661 samples, 88.94%)</title><rect x="1.9907%" y="997" width="88.9396%" height="15" fill="rgb(207,117,47)" fg:x="15485574" fg:w="691862661"/><text x="2.2407%" y="1007.50">ts_query_new</text></g><g><title>ts_query__parse_pattern (6,673,616 samples, 0.86%)</title><rect x="90.0724%" y="981" width="0.8579%" height="15" fill="rgb(249,43,39)" fg:x="700674619" fg:w="6673616"/><text x="90.3224%" y="991.50"></text></g><g><title>ts_query__parse_pattern (1,515,453 samples, 0.19%)</title><rect x="90.7355%" y="965" width="0.1948%" height="15" fill="rgb(209,38,44)" fg:x="705832782" fg:w="1515453"/><text x="90.9855%" y="975.50"></text></g><g><title>ts_query__parse_pattern (1,515,453 samples, 0.19%)</title><rect x="90.7355%" y="949" width="0.1948%" height="15" fill="rgb(236,212,23)" fg:x="705832782" fg:w="1515453"/><text x="90.9855%" y="959.50"></text></g><g><title>ts_query__parse_pattern (1,515,453 samples, 0.19%)</title><rect x="90.7355%" y="933" width="0.1948%" height="15" fill="rgb(242,79,21)" fg:x="705832782" fg:w="1515453"/><text x="90.9855%" y="943.50"></text></g><g><title>ts_query__parse_pattern (1,515,453 samples, 0.19%)</title><rect x="90.7355%" y="917" width="0.1948%" height="15" fill="rgb(211,96,35)" fg:x="705832782" fg:w="1515453"/><text x="90.9855%" y="927.50"></text></g><g><title>capture_quantifiers_add_for_id (1,515,453 samples, 0.19%)</title><rect x="90.7355%" y="901" width="0.1948%" height="15" fill="rgb(253,215,40)" fg:x="705832782" fg:w="1515453"/><text x="90.9855%" y="911.50"></text></g><g><title>_array__grow (1,515,453 samples, 0.19%)</title><rect x="90.7355%" y="885" width="0.1948%" height="15" fill="rgb(211,81,21)" fg:x="705832782" fg:w="1515453"/><text x="90.9855%" y="895.50"></text></g><g><title>_array__reserve (1,515,453 samples, 0.19%)</title><rect x="90.7355%" y="869" width="0.1948%" height="15" fill="rgb(208,190,38)" fg:x="705832782" fg:w="1515453"/><text x="90.9855%" y="879.50"></text></g><g><title>_array__reserve (1,515,453 samples, 0.19%)</title><rect x="90.7355%" y="853" width="0.1948%" height="15" fill="rgb(235,213,38)" fg:x="705832782" fg:w="1515453"/><text x="90.9855%" y="863.50"></text></g><g><title>ts_malloc_default (1,515,453 samples, 0.19%)</title><rect x="90.7355%" y="837" width="0.1948%" height="15" fill="rgb(237,122,38)" fg:x="705832782" fg:w="1515453"/><text x="90.9855%" y="847.50"></text></g><g><title>malloc (1,515,453 samples, 0.19%)</title><rect x="90.7355%" y="821" width="0.1948%" height="15" fill="rgb(244,218,35)" fg:x="705832782" fg:w="1515453"/><text x="90.9855%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="1061" width="0.6310%" height="15" fill="rgb(240,68,47)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="1071.50"></text></g><g><title>syntastica_core::language_set::SupportedLanguage::for_injection::{{closure}} (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="1045" width="0.6310%" height="15" fill="rgb(210,16,53)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="1055.50"></text></g><g><title>tft::detect::try_detect (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="1029" width="0.6310%" height="15" fill="rgb(235,124,12)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="1039.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="1013" width="0.6310%" height="15" fill="rgb(224,169,11)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="1023.50"></text></g><g><title>tft::detect::try_detect::{{closure}} (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="997" width="0.6310%" height="15" fill="rgb(250,166,2)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="1007.50"></text></g><g><title>regex::regex::string::Regex::is_match (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="981" width="0.6310%" height="15" fill="rgb(242,216,29)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="991.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="965" width="0.6310%" height="15" fill="rgb(230,116,27)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="975.50"></text></g><g><title>regex_automata::meta::regex::Regex::search_half (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="949" width="0.6310%" height="15" fill="rgb(228,99,48)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="959.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="933" width="0.6310%" height="15" fill="rgb(253,11,6)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="943.50"></text></g><g><title>regex_automata::meta::wrappers::HybridEngine::try_search_half_fwd (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="917" width="0.6310%" height="15" fill="rgb(247,143,39)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="927.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::try_search_fwd (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="901" width="0.6310%" height="15" fill="rgb(236,97,10)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="911.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="885" width="0.6310%" height="15" fill="rgb(233,208,19)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="895.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd_imp (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="869" width="0.6310%" height="15" fill="rgb(216,164,2)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="879.50"></text></g><g><title>regex_automata::hybrid::search::init_fwd (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="853" width="0.6310%" height="15" fill="rgb(220,129,5)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="863.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::start_state_forward (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="837" width="0.6310%" height="15" fill="rgb(242,17,10)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="847.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::start_state (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="821" width="0.6310%" height="15" fill="rgb(242,107,0)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="831.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="805" width="0.6310%" height="15" fill="rgb(251,28,31)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="815.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_one (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="789" width="0.6310%" height="15" fill="rgb(233,223,10)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="799.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="773" width="0.6310%" height="15" fill="rgb(215,21,27)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="757" width="0.6310%" height="15" fill="rgb(232,23,21)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="741" width="0.6310%" height="15" fill="rgb(244,5,23)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="725" width="0.6310%" height="15" fill="rgb(226,81,46)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="709" width="0.6310%" height="15" fill="rgb(247,70,30)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="693" width="0.6310%" height="15" fill="rgb(212,68,19)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="703.50"></text></g><g><title>malloc (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="677" width="0.6310%" height="15" fill="rgb(240,187,13)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="687.50"></text></g><g><title>_int_malloc (4,908,386 samples, 0.63%)</title><rect x="90.9303%" y="661" width="0.6310%" height="15" fill="rgb(223,113,26)" fg:x="707348235" fg:w="4908386"/><text x="91.1803%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (5,140,544 samples, 0.66%)</title><rect x="91.5613%" y="549" width="0.6608%" height="15" fill="rgb(206,192,2)" fg:x="712256621" fg:w="5140544"/><text x="91.8113%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (5,140,544 samples, 0.66%)</title><rect x="91.5613%" y="533" width="0.6608%" height="15" fill="rgb(241,108,4)" fg:x="712256621" fg:w="5140544"/><text x="91.8113%" y="543.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5,115,816 samples, 0.66%)</title><rect x="92.2221%" y="501" width="0.6576%" height="15" fill="rgb(247,173,49)" fg:x="717397165" fg:w="5115816"/><text x="92.4721%" y="511.50"></text></g><g><title>_int_free (5,115,816 samples, 0.66%)</title><rect x="92.2221%" y="485" width="0.6576%" height="15" fill="rgb(224,114,35)" fg:x="717397165" fg:w="5115816"/><text x="92.4721%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15,282,151 samples, 1.96%)</title><rect x="92.2221%" y="517" width="1.9645%" height="15" fill="rgb(245,159,27)" fg:x="717397165" fg:w="15282151"/><text x="92.4721%" y="527.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10,166,335 samples, 1.31%)</title><rect x="92.8797%" y="501" width="1.3069%" height="15" fill="rgb(245,172,44)" fg:x="722512981" fg:w="10166335"/><text x="93.1297%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10,166,335 samples, 1.31%)</title><rect x="92.8797%" y="485" width="1.3069%" height="15" fill="rgb(236,23,11)" fg:x="722512981" fg:w="10166335"/><text x="93.1297%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt; (10,166,335 samples, 1.31%)</title><rect x="92.8797%" y="469" width="1.3069%" height="15" fill="rgb(205,117,38)" fg:x="722512981" fg:w="10166335"/><text x="93.1297%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedMap&gt; (10,166,335 samples, 1.31%)</title><rect x="92.8797%" y="453" width="1.3069%" height="15" fill="rgb(237,72,25)" fg:x="722512981" fg:w="10166335"/><text x="93.1297%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (10,166,335 samples, 1.31%)</title><rect x="92.8797%" y="437" width="1.3069%" height="15" fill="rgb(244,70,9)" fg:x="722512981" fg:w="10166335"/><text x="93.1297%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10,166,335 samples, 1.31%)</title><rect x="92.8797%" y="421" width="1.3069%" height="15" fill="rgb(217,125,39)" fg:x="722512981" fg:w="10166335"/><text x="93.1297%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::map::Utf8BoundedEntry]&gt; (10,166,335 samples, 1.31%)</title><rect x="92.8797%" y="405" width="1.3069%" height="15" fill="rgb(235,36,10)" fg:x="722512981" fg:w="10166335"/><text x="93.1297%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt; (10,166,335 samples, 1.31%)</title><rect x="92.8797%" y="389" width="1.3069%" height="15" fill="rgb(251,123,47)" fg:x="722512981" fg:w="10166335"/><text x="93.1297%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (10,166,335 samples, 1.31%)</title><rect x="92.8797%" y="373" width="1.3069%" height="15" fill="rgb(221,13,13)" fg:x="722512981" fg:w="10166335"/><text x="93.1297%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (10,166,335 samples, 1.31%)</title><rect x="92.8797%" y="357" width="1.3069%" height="15" fill="rgb(238,131,9)" fg:x="722512981" fg:w="10166335"/><text x="93.1297%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10,166,335 samples, 1.31%)</title><rect x="92.8797%" y="341" width="1.3069%" height="15" fill="rgb(211,50,8)" fg:x="722512981" fg:w="10166335"/><text x="93.1297%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (5,112,584 samples, 0.66%)</title><rect x="93.5294%" y="325" width="0.6572%" height="15" fill="rgb(245,182,24)" fg:x="727566732" fg:w="5112584"/><text x="93.7794%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (5,112,584 samples, 0.66%)</title><rect x="93.5294%" y="309" width="0.6572%" height="15" fill="rgb(242,14,37)" fg:x="727566732" fg:w="5112584"/><text x="93.7794%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5,121,860 samples, 0.66%)</title><rect x="94.1866%" y="485" width="0.6584%" height="15" fill="rgb(246,228,12)" fg:x="732679316" fg:w="5121860"/><text x="94.4366%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5,121,860 samples, 0.66%)</title><rect x="94.1866%" y="469" width="0.6584%" height="15" fill="rgb(213,55,15)" fg:x="732679316" fg:w="5121860"/><text x="94.4366%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,121,860 samples, 0.66%)</title><rect x="94.1866%" y="453" width="0.6584%" height="15" fill="rgb(209,9,3)" fg:x="732679316" fg:w="5121860"/><text x="94.4366%" y="463.50"></text></g><g><title>core::ptr::write (5,121,860 samples, 0.66%)</title><rect x="94.1866%" y="437" width="0.6584%" height="15" fill="rgb(230,59,30)" fg:x="732679316" fg:w="5121860"/><text x="94.4366%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (5,147,490 samples, 0.66%)</title><rect x="94.8451%" y="245" width="0.6617%" height="15" fill="rgb(209,121,21)" fg:x="737801176" fg:w="5147490"/><text x="95.0951%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5,147,490 samples, 0.66%)</title><rect x="94.8451%" y="229" width="0.6617%" height="15" fill="rgb(220,109,13)" fg:x="737801176" fg:w="5147490"/><text x="95.0951%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5,147,490 samples, 0.66%)</title><rect x="94.8451%" y="213" width="0.6617%" height="15" fill="rgb(232,18,1)" fg:x="737801176" fg:w="5147490"/><text x="95.0951%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5,147,490 samples, 0.66%)</title><rect x="94.8451%" y="197" width="0.6617%" height="15" fill="rgb(215,41,42)" fg:x="737801176" fg:w="5147490"/><text x="95.0951%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (5,147,490 samples, 0.66%)</title><rect x="94.8451%" y="181" width="0.6617%" height="15" fill="rgb(224,123,36)" fg:x="737801176" fg:w="5147490"/><text x="95.0951%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5,147,490 samples, 0.66%)</title><rect x="94.8451%" y="165" width="0.6617%" height="15" fill="rgb(240,125,3)" fg:x="737801176" fg:w="5147490"/><text x="95.0951%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5,147,490 samples, 0.66%)</title><rect x="94.8451%" y="149" width="0.6617%" height="15" fill="rgb(205,98,50)" fg:x="737801176" fg:w="5147490"/><text x="95.0951%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (5,147,490 samples, 0.66%)</title><rect x="94.8451%" y="133" width="0.6617%" height="15" fill="rgb(205,185,37)" fg:x="737801176" fg:w="5147490"/><text x="95.0951%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (5,147,490 samples, 0.66%)</title><rect x="94.8451%" y="117" width="0.6617%" height="15" fill="rgb(238,207,15)" fg:x="737801176" fg:w="5147490"/><text x="95.0951%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,147,490 samples, 0.66%)</title><rect x="94.8451%" y="101" width="0.6617%" height="15" fill="rgb(213,199,42)" fg:x="737801176" fg:w="5147490"/><text x="95.0951%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5,147,490 samples, 0.66%)</title><rect x="94.8451%" y="85" width="0.6617%" height="15" fill="rgb(235,201,11)" fg:x="737801176" fg:w="5147490"/><text x="95.0951%" y="95.50"></text></g><g><title>alloc::alloc::alloc (5,147,490 samples, 0.66%)</title><rect x="94.8451%" y="69" width="0.6617%" height="15" fill="rgb(207,46,11)" fg:x="737801176" fg:w="5147490"/><text x="95.0951%" y="79.50"></text></g><g><title>malloc (5,147,490 samples, 0.66%)</title><rect x="94.8451%" y="53" width="0.6617%" height="15" fill="rgb(241,35,35)" fg:x="737801176" fg:w="5147490"/><text x="95.0951%" y="63.50"></text></g><g><title>_int_malloc (5,147,490 samples, 0.66%)</title><rect x="94.8451%" y="37" width="0.6617%" height="15" fill="rgb(243,32,47)" fg:x="737801176" fg:w="5147490"/><text x="95.0951%" y="47.50"></text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process (763,305,187 samples, 98.12%)</title><rect x="0.0000%" y="1189" width="98.1236%" height="15" fill="rgb(247,202,23)" fg:x="1" fg:w="763305187"/><text x="0.2500%" y="1199.50">syntastica::processor::Processor&lt;Set&gt;::process</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl (763,305,187 samples, 98.12%)</title><rect x="0.0000%" y="1173" width="98.1236%" height="15" fill="rgb(219,102,11)" fg:x="1" fg:w="763305187"/><text x="0.2500%" y="1183.50">syntastica::processor::Processor&lt;Set&gt;::process_impl</text></g><g><title>syntastica::processor::process_highlight_iter (55,956,953 samples, 7.19%)</title><rect x="90.9303%" y="1157" width="7.1933%" height="15" fill="rgb(243,110,44)" fg:x="707348235" fg:w="55956953"/><text x="91.1803%" y="1167.50">syntastica..</text></g><g><title>&lt;syntastica_highlight::HighlightIter&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (55,956,953 samples, 7.19%)</title><rect x="90.9303%" y="1141" width="7.1933%" height="15" fill="rgb(222,74,54)" fg:x="707348235" fg:w="55956953"/><text x="91.1803%" y="1151.50">&lt;syntastic..</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl::{{closure}} (55,956,953 samples, 7.19%)</title><rect x="90.9303%" y="1125" width="7.1933%" height="15" fill="rgb(216,99,12)" fg:x="707348235" fg:w="55956953"/><text x="91.1803%" y="1135.50">syntastica..</text></g><g><title>core::option::Option&lt;T&gt;::or_else (55,956,953 samples, 7.19%)</title><rect x="90.9303%" y="1109" width="7.1933%" height="15" fill="rgb(226,22,26)" fg:x="707348235" fg:w="55956953"/><text x="91.1803%" y="1119.50">core::opti..</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl::{{closure}}::{{closure}} (55,956,953 samples, 7.19%)</title><rect x="90.9303%" y="1093" width="7.1933%" height="15" fill="rgb(217,163,10)" fg:x="707348235" fg:w="55956953"/><text x="91.1803%" y="1103.50">syntastica..</text></g><g><title>syntastica_core::language_set::SupportedLanguage::for_injection (55,956,953 samples, 7.19%)</title><rect x="90.9303%" y="1077" width="7.1933%" height="15" fill="rgb(213,25,53)" fg:x="707348235" fg:w="55956953"/><text x="91.1803%" y="1087.50">syntastica..</text></g><g><title>tft::detect::try_detect (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="1061" width="6.5623%" height="15" fill="rgb(252,105,26)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="1071.50">tft::dete..</text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="1045" width="6.5623%" height="15" fill="rgb(220,39,43)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="1055.50">&lt;once_cel..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="1029" width="6.5623%" height="15" fill="rgb(229,68,48)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="1039.50">once_cell..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="1013" width="6.5623%" height="15" fill="rgb(252,8,32)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="1023.50">once_cell..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="997" width="6.5623%" height="15" fill="rgb(223,20,43)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="1007.50">once_cell..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="981" width="6.5623%" height="15" fill="rgb(229,81,49)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="991.50">once_cell..</text></g><g><title>once_cell::imp::initialize_or_wait (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="965" width="6.5623%" height="15" fill="rgb(236,28,36)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="975.50">once_cell..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="949" width="6.5623%" height="15" fill="rgb(249,185,26)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="959.50">core::ops..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="933" width="6.5623%" height="15" fill="rgb(249,174,33)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="943.50">once_cell..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="917" width="6.5623%" height="15" fill="rgb(233,201,37)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="927.50">once_cell..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="901" width="6.5623%" height="15" fill="rgb(221,78,26)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="911.50">once_cell..</text></g><g><title>core::ops::function::FnOnce::call_once (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="885" width="6.5623%" height="15" fill="rgb(250,127,30)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="895.50">core::ops..</text></g><g><title>core::ops::function::FnOnce::call_once (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="869" width="6.5623%" height="15" fill="rgb(230,49,44)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="879.50">core::ops..</text></g><g><title>tft::detect::pattern::PATTERN::{{closure}} (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="853" width="6.5623%" height="15" fill="rgb(229,67,23)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="863.50">tft::dete..</text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="837" width="6.5623%" height="15" fill="rgb(249,83,47)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="847.50">&lt;once_cel..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="821" width="6.5623%" height="15" fill="rgb(215,43,3)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="831.50">once_cell..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="805" width="6.5623%" height="15" fill="rgb(238,154,13)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="815.50">once_cell..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="789" width="6.5623%" height="15" fill="rgb(219,56,2)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="799.50">once_cell..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="773" width="6.5623%" height="15" fill="rgb(233,0,4)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="783.50">once_cell..</text></g><g><title>once_cell::imp::initialize_or_wait (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="757" width="6.5623%" height="15" fill="rgb(235,30,7)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="767.50">once_cell..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="741" width="6.5623%" height="15" fill="rgb(250,79,13)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="751.50">core::ops..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="725" width="6.5623%" height="15" fill="rgb(211,146,34)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="735.50">once_cell..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="709" width="6.5623%" height="15" fill="rgb(228,22,38)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="719.50">once_cell..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="693" width="6.5623%" height="15" fill="rgb(235,168,5)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="703.50">once_cell..</text></g><g><title>core::ops::function::FnOnce::call_once (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="677" width="6.5623%" height="15" fill="rgb(221,155,16)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="687.50">core::ops..</text></g><g><title>core::ops::function::FnOnce::call_once (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="661" width="6.5623%" height="15" fill="rgb(215,215,53)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="671.50">core::ops..</text></g><g><title>tft::detect::pattern::PATTERN::{{closure}}::RE::{{closure}} (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="645" width="6.5623%" height="15" fill="rgb(223,4,10)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="655.50">tft::dete..</text></g><g><title>regex::builders::string::RegexBuilder::build (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="629" width="6.5623%" height="15" fill="rgb(234,103,6)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="639.50">regex::bu..</text></g><g><title>regex::builders::Builder::build_one_string (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="613" width="6.5623%" height="15" fill="rgb(227,97,0)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="623.50">regex::bu..</text></g><g><title>regex_automata::meta::regex::Builder::build (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="597" width="6.5623%" height="15" fill="rgb(234,150,53)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="607.50">regex_aut..</text></g><g><title>regex_automata::meta::regex::Builder::build_many (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="581" width="6.5623%" height="15" fill="rgb(228,201,54)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="591.50">regex_aut..</text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (51,048,567 samples, 6.56%)</title><rect x="91.5613%" y="565" width="6.5623%" height="15" fill="rgb(222,22,37)" fg:x="712256621" fg:w="51048567"/><text x="91.8113%" y="575.50">regex_aut..</text></g><g><title>regex_automata::meta::strategy::new (45,908,023 samples, 5.90%)</title><rect x="92.2221%" y="549" width="5.9015%" height="15" fill="rgb(237,53,32)" fg:x="717397165" fg:w="45908023"/><text x="92.4721%" y="559.50">regex_au..</text></g><g><title>regex_automata::meta::strategy::Core::new (45,908,023 samples, 5.90%)</title><rect x="92.2221%" y="533" width="5.9015%" height="15" fill="rgb(233,25,53)" fg:x="717397165" fg:w="45908023"/><text x="92.4721%" y="543.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (30,625,872 samples, 3.94%)</title><rect x="94.1866%" y="517" width="3.9370%" height="15" fill="rgb(210,40,34)" fg:x="732679316" fg:w="30625872"/><text x="94.4366%" y="527.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (30,625,872 samples, 3.94%)</title><rect x="94.1866%" y="501" width="3.9370%" height="15" fill="rgb(241,220,44)" fg:x="732679316" fg:w="30625872"/><text x="94.4366%" y="511.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (25,504,012 samples, 3.28%)</title><rect x="94.8451%" y="485" width="3.2786%" height="15" fill="rgb(235,28,35)" fg:x="737801176" fg:w="25504012"/><text x="95.0951%" y="495.50">reg..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25,504,012 samples, 3.28%)</title><rect x="94.8451%" y="469" width="3.2786%" height="15" fill="rgb(210,56,17)" fg:x="737801176" fg:w="25504012"/><text x="95.0951%" y="479.50">&lt;co..</text></g><g><title>core::option::Option&lt;T&gt;::map (25,504,012 samples, 3.28%)</title><rect x="94.8451%" y="453" width="3.2786%" height="15" fill="rgb(224,130,29)" fg:x="737801176" fg:w="25504012"/><text x="95.0951%" y="463.50">cor..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (25,504,012 samples, 3.28%)</title><rect x="94.8451%" y="437" width="3.2786%" height="15" fill="rgb(235,212,8)" fg:x="737801176" fg:w="25504012"/><text x="95.0951%" y="447.50">cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (25,504,012 samples, 3.28%)</title><rect x="94.8451%" y="421" width="3.2786%" height="15" fill="rgb(223,33,50)" fg:x="737801176" fg:w="25504012"/><text x="95.0951%" y="431.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (25,504,012 samples, 3.28%)</title><rect x="94.8451%" y="405" width="3.2786%" height="15" fill="rgb(219,149,13)" fg:x="737801176" fg:w="25504012"/><text x="95.0951%" y="415.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (25,504,012 samples, 3.28%)</title><rect x="94.8451%" y="389" width="3.2786%" height="15" fill="rgb(250,156,29)" fg:x="737801176" fg:w="25504012"/><text x="95.0951%" y="399.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (25,504,012 samples, 3.28%)</title><rect x="94.8451%" y="373" width="3.2786%" height="15" fill="rgb(216,193,19)" fg:x="737801176" fg:w="25504012"/><text x="95.0951%" y="383.50">reg..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25,504,012 samples, 3.28%)</title><rect x="94.8451%" y="357" width="3.2786%" height="15" fill="rgb(216,135,14)" fg:x="737801176" fg:w="25504012"/><text x="95.0951%" y="367.50">&lt;co..</text></g><g><title>core::option::Option&lt;T&gt;::map (25,504,012 samples, 3.28%)</title><rect x="94.8451%" y="341" width="3.2786%" height="15" fill="rgb(241,47,5)" fg:x="737801176" fg:w="25504012"/><text x="95.0951%" y="351.50">cor..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (25,504,012 samples, 3.28%)</title><rect x="94.8451%" y="325" width="3.2786%" height="15" fill="rgb(233,42,35)" fg:x="737801176" fg:w="25504012"/><text x="95.0951%" y="335.50">cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (25,504,012 samples, 3.28%)</title><rect x="94.8451%" y="309" width="3.2786%" height="15" fill="rgb(231,13,6)" fg:x="737801176" fg:w="25504012"/><text x="95.0951%" y="319.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (25,504,012 samples, 3.28%)</title><rect x="94.8451%" y="293" width="3.2786%" height="15" fill="rgb(207,181,40)" fg:x="737801176" fg:w="25504012"/><text x="95.0951%" y="303.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (25,504,012 samples, 3.28%)</title><rect x="94.8451%" y="277" width="3.2786%" height="15" fill="rgb(254,173,49)" fg:x="737801176" fg:w="25504012"/><text x="95.0951%" y="287.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (25,504,012 samples, 3.28%)</title><rect x="94.8451%" y="261" width="3.2786%" height="15" fill="rgb(221,1,38)" fg:x="737801176" fg:w="25504012"/><text x="95.0951%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (20,356,522 samples, 2.62%)</title><rect x="95.5068%" y="245" width="2.6169%" height="15" fill="rgb(206,124,46)" fg:x="742948666" fg:w="20356522"/><text x="95.7568%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (20,356,522 samples, 2.62%)</title><rect x="95.5068%" y="229" width="2.6169%" height="15" fill="rgb(249,21,11)" fg:x="742948666" fg:w="20356522"/><text x="95.7568%" y="239.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (20,356,522 samples, 2.62%)</title><rect x="95.5068%" y="213" width="2.6169%" height="15" fill="rgb(222,201,40)" fg:x="742948666" fg:w="20356522"/><text x="95.7568%" y="223.50">re..</text></g><g><title>alloc::vec::from_elem (20,356,522 samples, 2.62%)</title><rect x="95.5068%" y="197" width="2.6169%" height="15" fill="rgb(235,61,29)" fg:x="742948666" fg:w="20356522"/><text x="95.7568%" y="207.50">al..</text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (20,356,522 samples, 2.62%)</title><rect x="95.5068%" y="181" width="2.6169%" height="15" fill="rgb(219,207,3)" fg:x="742948666" fg:w="20356522"/><text x="95.7568%" y="191.50">&lt;T..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (20,356,522 samples, 2.62%)</title><rect x="95.5068%" y="165" width="2.6169%" height="15" fill="rgb(222,56,46)" fg:x="742948666" fg:w="20356522"/><text x="95.7568%" y="175.50">al..</text></g><g><title>core::ptr::write (20,356,522 samples, 2.62%)</title><rect x="95.5068%" y="149" width="2.6169%" height="15" fill="rgb(239,76,54)" fg:x="742948666" fg:w="20356522"/><text x="95.7568%" y="159.50">co..</text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::set_anchored_start_state (4,817,031 samples, 0.62%)</title><rect x="98.1236%" y="1093" width="0.6192%" height="15" fill="rgb(231,124,27)" fg:x="763305188" fg:w="4817031"/><text x="98.3736%" y="1103.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (777,508,724 samples, 99.95%)</title><rect x="0.0000%" y="1461" width="99.9495%" height="15" fill="rgb(249,195,6)" fg:x="1" fg:w="777508724"/><text x="0.2500%" y="1471.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (777,508,724 samples, 99.95%)</title><rect x="0.0000%" y="1445" width="99.9495%" height="15" fill="rgb(237,174,47)" fg:x="1" fg:w="777508724"/><text x="0.2500%" y="1455.50">__libc_start_call_main</text></g><g><title>main (777,508,724 samples, 99.95%)</title><rect x="0.0000%" y="1429" width="99.9495%" height="15" fill="rgb(206,201,31)" fg:x="1" fg:w="777508724"/><text x="0.2500%" y="1439.50">main</text></g><g><title>std::rt::lang_start_internal (777,508,724 samples, 99.95%)</title><rect x="0.0000%" y="1413" width="99.9495%" height="15" fill="rgb(231,57,52)" fg:x="1" fg:w="777508724"/><text x="0.2500%" y="1423.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (777,508,724 samples, 99.95%)</title><rect x="0.0000%" y="1397" width="99.9495%" height="15" fill="rgb(248,177,22)" fg:x="1" fg:w="777508724"/><text x="0.2500%" y="1407.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (777,508,724 samples, 99.95%)</title><rect x="0.0000%" y="1381" width="99.9495%" height="15" fill="rgb(215,211,37)" fg:x="1" fg:w="777508724"/><text x="0.2500%" y="1391.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (777,508,724 samples, 99.95%)</title><rect x="0.0000%" y="1365" width="99.9495%" height="15" fill="rgb(241,128,51)" fg:x="1" fg:w="777508724"/><text x="0.2500%" y="1375.50">core::ops::function::FnOnce::call_once</text></g><g><title>kaka_nest::main (777,508,724 samples, 99.95%)</title><rect x="0.0000%" y="1349" width="99.9495%" height="15" fill="rgb(227,165,31)" fg:x="1" fg:w="777508724"/><text x="0.2500%" y="1359.50">kaka_nest::main</text></g><g><title>kaka_nest::get_markdown::get_blogs (777,508,724 samples, 99.95%)</title><rect x="0.0000%" y="1333" width="99.9495%" height="15" fill="rgb(228,167,24)" fg:x="1" fg:w="777508724"/><text x="0.2500%" y="1343.50">kaka_nest::get_markdown::get_blogs</text></g><g><title>pulldown_cmark::html::push_html (777,508,724 samples, 99.95%)</title><rect x="0.0000%" y="1317" width="99.9495%" height="15" fill="rgb(228,143,12)" fg:x="1" fg:w="777508724"/><text x="0.2500%" y="1327.50">pulldown_cmark::html::push_html</text></g><g><title>pulldown_cmark::html::write_html_fmt (777,508,724 samples, 99.95%)</title><rect x="0.0000%" y="1301" width="99.9495%" height="15" fill="rgb(249,149,8)" fg:x="1" fg:w="777508724"/><text x="0.2500%" y="1311.50">pulldown_cmark::html::write_html_fmt</text></g><g><title>pulldown_cmark::html::HtmlWriter&lt;I,W&gt;::run (777,508,724 samples, 99.95%)</title><rect x="0.0000%" y="1285" width="99.9495%" height="15" fill="rgb(243,35,44)" fg:x="1" fg:w="777508724"/><text x="0.2500%" y="1295.50">pulldown_cmark::html::HtmlWriter&lt;I,W&gt;::run</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (777,508,724 samples, 99.95%)</title><rect x="0.0000%" y="1269" width="99.9495%" height="15" fill="rgb(246,89,9)" fg:x="1" fg:w="777508724"/><text x="0.2500%" y="1279.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (777,508,724 samples, 99.95%)</title><rect x="0.0000%" y="1253" width="99.9495%" height="15" fill="rgb(233,213,13)" fg:x="1" fg:w="777508724"/><text x="0.2500%" y="1263.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (777,508,724 samples, 99.95%)</title><rect x="0.0000%" y="1237" width="99.9495%" height="15" fill="rgb(233,141,41)" fg:x="1" fg:w="777508724"/><text x="0.2500%" y="1247.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (777,508,724 samples, 99.95%)</title><rect x="0.0000%" y="1221" width="99.9495%" height="15" fill="rgb(239,167,4)" fg:x="1" fg:w="777508724"/><text x="0.2500%" y="1231.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>kaka_nest::pullmark_parsers::highlight_codeblocks::{{closure}} (777,508,724 samples, 99.95%)</title><rect x="0.0000%" y="1205" width="99.9495%" height="15" fill="rgb(209,217,16)" fg:x="1" fg:w="777508724"/><text x="0.2500%" y="1215.50">kaka_nest::pullmark_parsers::highlight_codeblocks::{{closure}}</text></g><g><title>syntastica::renderer::render (14,203,537 samples, 1.83%)</title><rect x="98.1236%" y="1189" width="1.8259%" height="15" fill="rgb(219,88,35)" fg:x="763305188" fg:w="14203537"/><text x="98.3736%" y="1199.50">s..</text></g><g><title>&lt;syntastica::renderer::HtmlRenderer as syntastica::renderer::Renderer&gt;::escape (14,203,537 samples, 1.83%)</title><rect x="98.1236%" y="1173" width="1.8259%" height="15" fill="rgb(220,193,23)" fg:x="763305188" fg:w="14203537"/><text x="98.3736%" y="1183.50">&lt;..</text></g><g><title>aho_corasick::ahocorasick::AhoCorasick::new (14,203,537 samples, 1.83%)</title><rect x="98.1236%" y="1157" width="1.8259%" height="15" fill="rgb(230,90,52)" fg:x="763305188" fg:w="14203537"/><text x="98.3736%" y="1167.50">a..</text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build (14,203,537 samples, 1.83%)</title><rect x="98.1236%" y="1141" width="1.8259%" height="15" fill="rgb(252,106,19)" fg:x="763305188" fg:w="14203537"/><text x="98.3736%" y="1151.50">a..</text></g><g><title>aho_corasick::nfa::noncontiguous::Builder::build (14,203,537 samples, 1.83%)</title><rect x="98.1236%" y="1125" width="1.8259%" height="15" fill="rgb(206,74,20)" fg:x="763305188" fg:w="14203537"/><text x="98.3736%" y="1135.50">a..</text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::compile (14,203,537 samples, 1.83%)</title><rect x="98.1236%" y="1109" width="1.8259%" height="15" fill="rgb(230,138,44)" fg:x="763305188" fg:w="14203537"/><text x="98.3736%" y="1119.50">a..</text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::shuffle (9,386,506 samples, 1.21%)</title><rect x="98.7429%" y="1093" width="1.2066%" height="15" fill="rgb(235,182,43)" fg:x="768122219" fg:w="9386506"/><text x="98.9929%" y="1103.50"></text></g><g><title>aho_corasick::util::remapper::Remapper::remap (4,686,591 samples, 0.60%)</title><rect x="99.3470%" y="1077" width="0.6025%" height="15" fill="rgb(242,16,51)" fg:x="772822134" fg:w="4686591"/><text x="99.5970%" y="1087.50"></text></g><g><title>&lt;aho_corasick::nfa::noncontiguous::NFA as aho_corasick::util::remapper::Remappable&gt;::remap (4,686,591 samples, 0.60%)</title><rect x="99.3470%" y="1061" width="0.6025%" height="15" fill="rgb(248,9,4)" fg:x="772822134" fg:w="4686591"/><text x="99.5970%" y="1071.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::remap (4,686,591 samples, 0.60%)</title><rect x="99.3470%" y="1045" width="0.6025%" height="15" fill="rgb(210,31,22)" fg:x="772822134" fg:w="4686591"/><text x="99.5970%" y="1055.50"></text></g><g><title>aho_corasick::util::remapper::Remapper::remap::{{closure}} (4,686,591 samples, 0.60%)</title><rect x="99.3470%" y="1029" width="0.6025%" height="15" fill="rgb(239,54,39)" fg:x="772822134" fg:w="4686591"/><text x="99.5970%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4,686,591 samples, 0.60%)</title><rect x="99.3470%" y="1013" width="0.6025%" height="15" fill="rgb(230,99,41)" fg:x="772822134" fg:w="4686591"/><text x="99.5970%" y="1023.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4,686,591 samples, 0.60%)</title><rect x="99.3470%" y="997" width="0.6025%" height="15" fill="rgb(253,106,12)" fg:x="772822134" fg:w="4686591"/><text x="99.5970%" y="1007.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4,686,591 samples, 0.60%)</title><rect x="99.3470%" y="981" width="0.6025%" height="15" fill="rgb(213,46,41)" fg:x="772822134" fg:w="4686591"/><text x="99.5970%" y="991.50"></text></g><g><title>all (777,901,586 samples, 100%)</title><rect x="0.0000%" y="1509" width="100.0000%" height="15" fill="rgb(215,133,35)" fg:x="0" fg:w="777901586"/><text x="0.2500%" y="1519.50"></text></g><g><title>kaka-nest (777,901,586 samples, 100.00%)</title><rect x="0.0000%" y="1493" width="100.0000%" height="15" fill="rgb(213,28,5)" fg:x="0" fg:w="777901586"/><text x="0.2500%" y="1503.50">kaka-nest</text></g><g><title>_start (777,901,586 samples, 100.00%)</title><rect x="0.0000%" y="1477" width="100.0000%" height="15" fill="rgb(215,77,49)" fg:x="0" fg:w="777901586"/><text x="0.2500%" y="1487.50">_start</text></g><g><title>_dl_start (392,861 samples, 0.05%)</title><rect x="99.9495%" y="1461" width="0.0505%" height="15" fill="rgb(248,100,22)" fg:x="777508725" fg:w="392861"/><text x="100.1995%" y="1471.50"></text></g><g><title>_dl_sysdep_start (392,333 samples, 0.05%)</title><rect x="99.9496%" y="1445" width="0.0504%" height="15" fill="rgb(208,67,9)" fg:x="777509253" fg:w="392333"/><text x="100.1996%" y="1455.50"></text></g><g><title>dl_main (381,363 samples, 0.05%)</title><rect x="99.9510%" y="1429" width="0.0490%" height="15" fill="rgb(219,133,21)" fg:x="777520223" fg:w="381363"/><text x="100.2010%" y="1439.50"></text></g><g><title>_dl_relocate_object (375,244 samples, 0.05%)</title><rect x="99.9518%" y="1413" width="0.0482%" height="15" fill="rgb(246,46,29)" fg:x="777526342" fg:w="375244"/><text x="100.2018%" y="1423.50"></text></g></svg></svg>