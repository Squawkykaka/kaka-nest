<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1686" onload="init(evt)" viewBox="0 0 1200 1686" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1686" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1669.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1669.00"> </text><svg id="frames" x="10" width="1180" total_samples="795574977"><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse (552,715 samples, 0.07%)</title><rect x="0.0000%" y="1109" width="0.0695%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="1119.50"></text></g><g><title>pest::parser_state::state (552,715 samples, 0.07%)</title><rect x="0.0000%" y="1093" width="0.0695%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="1103.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::{{closure}} (552,715 samples, 0.07%)</title><rect x="0.0000%" y="1077" width="0.0695%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="1087.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::handlebars (552,715 samples, 0.07%)</title><rect x="0.0000%" y="1061" width="0.0695%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="1071.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (552,715 samples, 0.07%)</title><rect x="0.0000%" y="1045" width="0.0695%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="1055.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::handlebars::{{closure}} (552,715 samples, 0.07%)</title><rect x="0.0000%" y="1029" width="0.0695%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="1039.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template (552,715 samples, 0.07%)</title><rect x="0.0000%" y="1013" width="0.0695%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="1023.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::rule (552,715 samples, 0.07%)</title><rect x="0.0000%" y="997" width="0.0695%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="1007.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}} (552,715 samples, 0.07%)</title><rect x="0.0000%" y="981" width="0.0695%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="991.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (552,715 samples, 0.07%)</title><rect x="0.0000%" y="965" width="0.0695%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="975.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}} (552,715 samples, 0.07%)</title><rect x="0.0000%" y="949" width="0.0695%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="959.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::optional (552,715 samples, 0.07%)</title><rect x="0.0000%" y="933" width="0.0695%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="943.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}} (552,715 samples, 0.07%)</title><rect x="0.0000%" y="917" width="0.0695%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="927.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (552,715 samples, 0.07%)</title><rect x="0.0000%" y="901" width="0.0695%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="911.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}}::{{closure}} (552,715 samples, 0.07%)</title><rect x="0.0000%" y="885" width="0.0695%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="895.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::repeat (552,715 samples, 0.07%)</title><rect x="0.0000%" y="869" width="0.0695%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="879.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (552,715 samples, 0.07%)</title><rect x="0.0000%" y="853" width="0.0695%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="863.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (552,715 samples, 0.07%)</title><rect x="0.0000%" y="837" width="0.0695%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="847.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (552,715 samples, 0.07%)</title><rect x="0.0000%" y="821" width="0.0695%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="831.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (552,715 samples, 0.07%)</title><rect x="0.0000%" y="805" width="0.0695%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="815.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (552,715 samples, 0.07%)</title><rect x="0.0000%" y="789" width="0.0695%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="799.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or_else (552,715 samples, 0.07%)</title><rect x="0.0000%" y="773" width="0.0695%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="783.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (552,715 samples, 0.07%)</title><rect x="0.0000%" y="757" width="0.0695%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="767.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::helper_block (552,715 samples, 0.07%)</title><rect x="0.0000%" y="741" width="0.0695%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="751.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (552,715 samples, 0.07%)</title><rect x="0.0000%" y="725" width="0.0695%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="735.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::helper_block::{{closure}} (552,715 samples, 0.07%)</title><rect x="0.0000%" y="709" width="0.0695%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (552,715 samples, 0.07%)</title><rect x="0.0000%" y="693" width="0.0695%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="703.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::helper_block::{{closure}}::{{closure}} (552,715 samples, 0.07%)</title><rect x="0.0000%" y="677" width="0.0695%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="687.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template (552,715 samples, 0.07%)</title><rect x="0.0000%" y="661" width="0.0695%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="671.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::rule (552,715 samples, 0.07%)</title><rect x="0.0000%" y="645" width="0.0695%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="655.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}} (552,715 samples, 0.07%)</title><rect x="0.0000%" y="629" width="0.0695%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="639.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (552,715 samples, 0.07%)</title><rect x="0.0000%" y="613" width="0.0695%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (552,715 samples, 0.07%)</title><rect x="0.0000%" y="597" width="0.0695%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="552715"/><text x="0.2500%" y="607.50"></text></g><g><title>&lt;kaka_nest::HANDLEBARS as core::ops::deref::Deref&gt;::deref (1,365,679 samples, 0.17%)</title><rect x="0.0000%" y="1301" width="0.1717%" height="15" fill="rgb(254,191,54)" fg:x="0" fg:w="1365679"/><text x="0.2500%" y="1311.50"></text></g><g><title>&lt;kaka_nest::HANDLEBARS as core::ops::deref::Deref&gt;::deref::__stability (1,365,679 samples, 0.17%)</title><rect x="0.0000%" y="1285" width="0.1717%" height="15" fill="rgb(241,83,37)" fg:x="0" fg:w="1365679"/><text x="0.2500%" y="1295.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (1,365,679 samples, 0.17%)</title><rect x="0.0000%" y="1269" width="0.1717%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="1365679"/><text x="0.2500%" y="1279.50"></text></g><g><title>std::sync::poison::once::Once::call_once (1,365,679 samples, 0.17%)</title><rect x="0.0000%" y="1253" width="0.1717%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="1365679"/><text x="0.2500%" y="1263.50"></text></g><g><title>std::sys::sync::once::futex::Once::call (1,365,679 samples, 0.17%)</title><rect x="0.0000%" y="1237" width="0.1717%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="1365679"/><text x="0.2500%" y="1247.50"></text></g><g><title>std::sync::poison::once::Once::call_once::{{closure}} (1,365,679 samples, 0.17%)</title><rect x="0.0000%" y="1221" width="0.1717%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="1365679"/><text x="0.2500%" y="1231.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (1,365,679 samples, 0.17%)</title><rect x="0.0000%" y="1205" width="0.1717%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="1365679"/><text x="0.2500%" y="1215.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,365,679 samples, 0.17%)</title><rect x="0.0000%" y="1189" width="0.1717%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="1365679"/><text x="0.2500%" y="1199.50"></text></g><g><title>&lt;kaka_nest::HANDLEBARS as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (1,365,679 samples, 0.17%)</title><rect x="0.0000%" y="1173" width="0.1717%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="1365679"/><text x="0.2500%" y="1183.50"></text></g><g><title>handlebars::registry::Registry::register_template_file (1,365,679 samples, 0.17%)</title><rect x="0.0000%" y="1157" width="0.1717%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="1365679"/><text x="0.2500%" y="1167.50"></text></g><g><title>handlebars::registry::Registry::register_template_string (1,365,679 samples, 0.17%)</title><rect x="0.0000%" y="1141" width="0.1717%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="1365679"/><text x="0.2500%" y="1151.50"></text></g><g><title>handlebars::template::Template::compile2 (1,365,679 samples, 0.17%)</title><rect x="0.0000%" y="1125" width="0.1717%" height="15" fill="rgb(222,207,29)" fg:x="0" fg:w="1365679"/><text x="0.2500%" y="1135.50"></text></g><g><title>pest::position::Position::line_col (812,964 samples, 0.10%)</title><rect x="0.0695%" y="1109" width="0.1022%" height="15" fill="rgb(206,96,30)" fg:x="552715" fg:w="812964"/><text x="0.3195%" y="1119.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (3,892,242 samples, 0.49%)</title><rect x="0.1717%" y="1077" width="0.4892%" height="15" fill="rgb(218,138,4)" fg:x="1365679" fg:w="3892242"/><text x="0.4217%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (3,892,242 samples, 0.49%)</title><rect x="0.1717%" y="1061" width="0.4892%" height="15" fill="rgb(250,191,14)" fg:x="1365679" fg:w="3892242"/><text x="0.4217%" y="1071.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (3,892,242 samples, 0.49%)</title><rect x="0.1717%" y="1045" width="0.4892%" height="15" fill="rgb(239,60,40)" fg:x="1365679" fg:w="3892242"/><text x="0.4217%" y="1055.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,892,242 samples, 0.49%)</title><rect x="0.1717%" y="1029" width="0.4892%" height="15" fill="rgb(206,27,48)" fg:x="1365679" fg:w="3892242"/><text x="0.4217%" y="1039.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,892,242 samples, 0.49%)</title><rect x="0.1717%" y="1013" width="0.4892%" height="15" fill="rgb(225,35,8)" fg:x="1365679" fg:w="3892242"/><text x="0.4217%" y="1023.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,892,242 samples, 0.49%)</title><rect x="0.1717%" y="997" width="0.4892%" height="15" fill="rgb(250,213,24)" fg:x="1365679" fg:w="3892242"/><text x="0.4217%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,892,242 samples, 0.49%)</title><rect x="0.1717%" y="981" width="0.4892%" height="15" fill="rgb(247,123,22)" fg:x="1365679" fg:w="3892242"/><text x="0.4217%" y="991.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (3,892,242 samples, 0.49%)</title><rect x="0.1717%" y="965" width="0.4892%" height="15" fill="rgb(231,138,38)" fg:x="1365679" fg:w="3892242"/><text x="0.4217%" y="975.50"></text></g><g><title>tree_sitter::Query::from_raw_parts (7,851,514 samples, 0.99%)</title><rect x="0.1717%" y="1093" width="0.9869%" height="15" fill="rgb(231,145,46)" fg:x="1365679" fg:w="7851514"/><text x="0.4217%" y="1103.50"></text></g><g><title>regex::regex::bytes::Regex::new (3,959,272 samples, 0.50%)</title><rect x="0.6609%" y="1077" width="0.4977%" height="15" fill="rgb(251,118,11)" fg:x="5257921" fg:w="3959272"/><text x="0.9109%" y="1087.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::build (3,959,272 samples, 0.50%)</title><rect x="0.6609%" y="1061" width="0.4977%" height="15" fill="rgb(217,147,25)" fg:x="5257921" fg:w="3959272"/><text x="0.9109%" y="1071.50"></text></g><g><title>regex::builders::Builder::build_one_bytes (3,959,272 samples, 0.50%)</title><rect x="0.6609%" y="1045" width="0.4977%" height="15" fill="rgb(247,81,37)" fg:x="5257921" fg:w="3959272"/><text x="0.9109%" y="1055.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (3,959,272 samples, 0.50%)</title><rect x="0.6609%" y="1029" width="0.4977%" height="15" fill="rgb(209,12,38)" fg:x="5257921" fg:w="3959272"/><text x="0.9109%" y="1039.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (3,959,272 samples, 0.50%)</title><rect x="0.6609%" y="1013" width="0.4977%" height="15" fill="rgb(227,1,9)" fg:x="5257921" fg:w="3959272"/><text x="0.9109%" y="1023.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (3,959,272 samples, 0.50%)</title><rect x="0.6609%" y="997" width="0.4977%" height="15" fill="rgb(248,47,43)" fg:x="5257921" fg:w="3959272"/><text x="0.9109%" y="1007.50"></text></g><g><title>regex_automata::meta::strategy::new (3,959,272 samples, 0.50%)</title><rect x="0.6609%" y="981" width="0.4977%" height="15" fill="rgb(221,10,30)" fg:x="5257921" fg:w="3959272"/><text x="0.9109%" y="991.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (3,959,272 samples, 0.50%)</title><rect x="0.6609%" y="965" width="0.4977%" height="15" fill="rgb(210,229,1)" fg:x="5257921" fg:w="3959272"/><text x="0.9109%" y="975.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (3,959,272 samples, 0.50%)</title><rect x="0.6609%" y="949" width="0.4977%" height="15" fill="rgb(222,148,37)" fg:x="5257921" fg:w="3959272"/><text x="0.9109%" y="959.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3,959,272 samples, 0.50%)</title><rect x="0.6609%" y="933" width="0.4977%" height="15" fill="rgb(234,67,33)" fg:x="5257921" fg:w="3959272"/><text x="0.9109%" y="943.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3,959,272 samples, 0.50%)</title><rect x="0.6609%" y="917" width="0.4977%" height="15" fill="rgb(247,98,35)" fg:x="5257921" fg:w="3959272"/><text x="0.9109%" y="927.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3,959,272 samples, 0.50%)</title><rect x="0.6609%" y="901" width="0.4977%" height="15" fill="rgb(247,138,52)" fg:x="5257921" fg:w="3959272"/><text x="0.9109%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,959,272 samples, 0.50%)</title><rect x="0.6609%" y="885" width="0.4977%" height="15" fill="rgb(213,79,30)" fg:x="5257921" fg:w="3959272"/><text x="0.9109%" y="895.50"></text></g><g><title>core::ptr::write (3,959,272 samples, 0.50%)</title><rect x="0.6609%" y="869" width="0.4977%" height="15" fill="rgb(246,177,23)" fg:x="5257921" fg:w="3959272"/><text x="0.9109%" y="879.50"></text></g><g><title>state_predecessor_map_add (9,281,433 samples, 1.17%)</title><rect x="2.0342%" y="1061" width="1.1666%" height="15" fill="rgb(230,62,27)" fg:x="16183673" fg:w="9281433"/><text x="2.2842%" y="1071.50"></text></g><g><title>ts_lookahead_iterator__next (1,385,440 samples, 0.17%)</title><rect x="3.2008%" y="1061" width="0.1741%" height="15" fill="rgb(216,154,8)" fg:x="25465106" fg:w="1385440"/><text x="3.4508%" y="1071.50"></text></g><g><title>analysis_state__compare_position (10,942,528 samples, 1.38%)</title><rect x="40.0906%" y="1045" width="1.3754%" height="15" fill="rgb(244,35,45)" fg:x="318950876" fg:w="10942528"/><text x="40.3406%" y="1055.50"></text></g><g><title>analysis_state__compare (6,905,012 samples, 0.87%)</title><rect x="45.5446%" y="1013" width="0.8679%" height="15" fill="rgb(251,115,12)" fg:x="362341339" fg:w="6905012"/><text x="45.7946%" y="1023.50"></text></g><g><title>analysis_state_set__insert_sorted (91,155,011 samples, 11.46%)</title><rect x="41.4660%" y="1045" width="11.4578%" height="15" fill="rgb(240,54,50)" fg:x="329893404" fg:w="91155011"/><text x="41.7160%" y="1055.50">analysis_state_se..</text></g><g><title>analysis_state__compare (58,707,076 samples, 7.38%)</title><rect x="45.5446%" y="1029" width="7.3792%" height="15" fill="rgb(233,84,52)" fg:x="362341339" fg:w="58707076"/><text x="45.7946%" y="1039.50">analysis_s..</text></g><g><title>analysis_state__compare_position (51,802,064 samples, 6.51%)</title><rect x="46.4125%" y="1013" width="6.5113%" height="15" fill="rgb(207,117,47)" fg:x="369246351" fg:w="51802064"/><text x="46.6625%" y="1023.50">analysis_..</text></g><g><title>analysis_subgraph_node__compare (73,654,767 samples, 9.26%)</title><rect x="52.9238%" y="1045" width="9.2581%" height="15" fill="rgb(249,43,39)" fg:x="421048415" fg:w="73654767"/><text x="53.1738%" y="1055.50">analysis_subg..</text></g><g><title>ts_language_alias_at (3,612,113 samples, 0.45%)</title><rect x="62.1818%" y="1045" width="0.4540%" height="15" fill="rgb(209,38,44)" fg:x="494703182" fg:w="3612113"/><text x="62.4318%" y="1055.50"></text></g><g><title>ts_language_alias_at (3,612,113 samples, 0.45%)</title><rect x="62.1818%" y="1029" width="0.4540%" height="15" fill="rgb(236,212,23)" fg:x="494703182" fg:w="3612113"/><text x="62.4318%" y="1039.50"></text></g><g><title>ts_query__analyze_patterns (596,463,071 samples, 74.97%)</title><rect x="1.1586%" y="1077" width="74.9726%" height="15" fill="rgb(242,79,21)" fg:x="9217193" fg:w="596463071"/><text x="1.4086%" y="1087.50">ts_query__analyze_patterns</text></g><g><title>ts_query__perform_analysis (578,829,718 samples, 72.76%)</title><rect x="3.3750%" y="1061" width="72.7561%" height="15" fill="rgb(211,96,35)" fg:x="26850546" fg:w="578829718"/><text x="3.6250%" y="1071.50">ts_query__perform_analysis</text></g><g><title>ts_lookahead_iterator__next (107,364,969 samples, 13.50%)</title><rect x="62.6359%" y="1045" width="13.4953%" height="15" fill="rgb(253,215,40)" fg:x="498315295" fg:w="107364969"/><text x="62.8859%" y="1055.50">ts_lookahead_iterato..</text></g><g><title>&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language (605,495,086 samples, 76.11%)</title><rect x="0.1717%" y="1253" width="76.1079%" height="15" fill="rgb(211,81,21)" fg:x="1365679" fg:w="605495086"/><text x="0.4217%" y="1263.50">&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (605,495,086 samples, 76.11%)</title><rect x="0.1717%" y="1237" width="76.1079%" height="15" fill="rgb(208,190,38)" fg:x="1365679" fg:w="605495086"/><text x="0.4217%" y="1247.50">once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (605,495,086 samples, 76.11%)</title><rect x="0.1717%" y="1221" width="76.1079%" height="15" fill="rgb(235,213,38)" fg:x="1365679" fg:w="605495086"/><text x="0.4217%" y="1231.50">once_cell::imp::OnceCell&lt;T&gt;::initialize</text></g><g><title>once_cell::imp::initialize_or_wait (605,495,086 samples, 76.11%)</title><rect x="0.1717%" y="1205" width="76.1079%" height="15" fill="rgb(237,122,38)" fg:x="1365679" fg:w="605495086"/><text x="0.4217%" y="1215.50">once_cell::imp::initialize_or_wait</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (605,495,086 samples, 76.11%)</title><rect x="0.1717%" y="1189" width="76.1079%" height="15" fill="rgb(244,218,35)" fg:x="1365679" fg:w="605495086"/><text x="0.4217%" y="1199.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (605,495,086 samples, 76.11%)</title><rect x="0.1717%" y="1173" width="76.1079%" height="15" fill="rgb(240,68,47)" fg:x="1365679" fg:w="605495086"/><text x="0.4217%" y="1183.50">once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}}</text></g><g><title>&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language::{{closure}} (605,495,086 samples, 76.11%)</title><rect x="0.1717%" y="1157" width="76.1079%" height="15" fill="rgb(210,16,53)" fg:x="1365679" fg:w="605495086"/><text x="0.4217%" y="1167.50">&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language::{{closure}}</text></g><g><title>syntastica_parsers::Lang::get_config (605,495,086 samples, 76.11%)</title><rect x="0.1717%" y="1141" width="76.1079%" height="15" fill="rgb(235,124,12)" fg:x="1365679" fg:w="605495086"/><text x="0.4217%" y="1151.50">syntastica_parsers::Lang::get_config</text></g><g><title>syntastica_highlight::HighlightConfiguration::new (605,495,086 samples, 76.11%)</title><rect x="0.1717%" y="1125" width="76.1079%" height="15" fill="rgb(224,169,11)" fg:x="1365679" fg:w="605495086"/><text x="0.4217%" y="1135.50">syntastica_highlight::HighlightConfiguration::new</text></g><g><title>tree_sitter::Query::new (605,495,086 samples, 76.11%)</title><rect x="0.1717%" y="1109" width="76.1079%" height="15" fill="rgb(250,166,2)" fg:x="1365679" fg:w="605495086"/><text x="0.4217%" y="1119.50">tree_sitter::Query::new</text></g><g><title>ts_query_new (597,643,572 samples, 75.12%)</title><rect x="1.1586%" y="1093" width="75.1210%" height="15" fill="rgb(242,216,29)" fg:x="9217193" fg:w="597643572"/><text x="1.4086%" y="1103.50">ts_query_new</text></g><g><title>ts_query__parse_pattern (1,180,501 samples, 0.15%)</title><rect x="76.1311%" y="1077" width="0.1484%" height="15" fill="rgb(230,116,27)" fg:x="605680264" fg:w="1180501"/><text x="76.3811%" y="1087.50"></text></g><g><title>ts_query_cursor_next_capture (3,941,318 samples, 0.50%)</title><rect x="76.2795%" y="1157" width="0.4954%" height="15" fill="rgb(228,99,48)" fg:x="606860765" fg:w="3941318"/><text x="76.5295%" y="1167.50"></text></g><g><title>ts_node_end_point (3,941,318 samples, 0.50%)</title><rect x="76.2795%" y="1141" width="0.4954%" height="15" fill="rgb(253,11,6)" fg:x="606860765" fg:w="3941318"/><text x="76.5295%" y="1151.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (7,708,021 samples, 0.97%)</title><rect x="76.2795%" y="1221" width="0.9689%" height="15" fill="rgb(247,143,39)" fg:x="606860765" fg:w="7708021"/><text x="76.5295%" y="1231.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (7,708,021 samples, 0.97%)</title><rect x="76.2795%" y="1205" width="0.9689%" height="15" fill="rgb(236,97,10)" fg:x="606860765" fg:w="7708021"/><text x="76.5295%" y="1215.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (7,708,021 samples, 0.97%)</title><rect x="76.2795%" y="1189" width="0.9689%" height="15" fill="rgb(233,208,19)" fg:x="606860765" fg:w="7708021"/><text x="76.5295%" y="1199.50"></text></g><g><title>&lt;syntastica_highlight::_QueryCaptures&lt;T,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,708,021 samples, 0.97%)</title><rect x="76.2795%" y="1173" width="0.9689%" height="15" fill="rgb(216,164,2)" fg:x="606860765" fg:w="7708021"/><text x="76.5295%" y="1183.50"></text></g><g><title>ts_query_cursor_remove_match (3,766,703 samples, 0.47%)</title><rect x="76.7749%" y="1157" width="0.4735%" height="15" fill="rgb(220,129,5)" fg:x="610802083" fg:w="3766703"/><text x="77.0249%" y="1167.50"></text></g><g><title>core::str::converts::from_utf8 (3,928,361 samples, 0.49%)</title><rect x="77.2484%" y="1109" width="0.4938%" height="15" fill="rgb(242,17,10)" fg:x="614568786" fg:w="3928361"/><text x="77.4984%" y="1119.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (11,534,958 samples, 1.45%)</title><rect x="77.2484%" y="1157" width="1.4499%" height="15" fill="rgb(242,107,0)" fg:x="614568786" fg:w="11534958"/><text x="77.4984%" y="1167.50"></text></g><g><title>syntastica_core::language_set::SupportedLanguage::for_injection::{{closure}} (11,534,958 samples, 1.45%)</title><rect x="77.2484%" y="1141" width="1.4499%" height="15" fill="rgb(251,28,31)" fg:x="614568786" fg:w="11534958"/><text x="77.4984%" y="1151.50"></text></g><g><title>tft::detect::try_detect (11,534,958 samples, 1.45%)</title><rect x="77.2484%" y="1125" width="1.4499%" height="15" fill="rgb(233,223,10)" fg:x="614568786" fg:w="11534958"/><text x="77.4984%" y="1135.50"></text></g><g><title>std::path::Path::ends_with (7,606,597 samples, 0.96%)</title><rect x="77.7422%" y="1109" width="0.9561%" height="15" fill="rgb(215,21,27)" fg:x="618497147" fg:w="7606597"/><text x="77.9922%" y="1119.50"></text></g><g><title>std::path::Path::_ends_with (7,606,597 samples, 0.96%)</title><rect x="77.7422%" y="1093" width="0.9561%" height="15" fill="rgb(232,23,21)" fg:x="618497147" fg:w="7606597"/><text x="77.9922%" y="1103.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3,896,022 samples, 0.49%)</title><rect x="78.2086%" y="1077" width="0.4897%" height="15" fill="rgb(244,5,23)" fg:x="622207722" fg:w="3896022"/><text x="78.4586%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::builder::Builder&gt;&gt; (3,738,737 samples, 0.47%)</title><rect x="78.6983%" y="597" width="0.4699%" height="15" fill="rgb(226,81,46)" fg:x="626103744" fg:w="3738737"/><text x="78.9483%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::builder::Builder&gt;&gt; (3,738,737 samples, 0.47%)</title><rect x="78.6983%" y="581" width="0.4699%" height="15" fill="rgb(247,70,30)" fg:x="626103744" fg:w="3738737"/><text x="78.9483%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::builder::Builder&gt; (3,738,737 samples, 0.47%)</title><rect x="78.6983%" y="565" width="0.4699%" height="15" fill="rgb(212,68,19)" fg:x="626103744" fg:w="3738737"/><text x="78.9483%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt;&gt; (3,738,737 samples, 0.47%)</title><rect x="78.6983%" y="549" width="0.4699%" height="15" fill="rgb(240,187,13)" fg:x="626103744" fg:w="3738737"/><text x="78.9483%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt;&gt; (3,738,737 samples, 0.47%)</title><rect x="78.6983%" y="533" width="0.4699%" height="15" fill="rgb(223,113,26)" fg:x="626103744" fg:w="3738737"/><text x="78.9483%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,738,737 samples, 0.47%)</title><rect x="78.6983%" y="517" width="0.4699%" height="15" fill="rgb(206,192,2)" fg:x="626103744" fg:w="3738737"/><text x="78.9483%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,738,737 samples, 0.47%)</title><rect x="78.6983%" y="501" width="0.4699%" height="15" fill="rgb(241,108,4)" fg:x="626103744" fg:w="3738737"/><text x="78.9483%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,738,737 samples, 0.47%)</title><rect x="78.6983%" y="485" width="0.4699%" height="15" fill="rgb(247,173,49)" fg:x="626103744" fg:w="3738737"/><text x="78.9483%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (3,738,737 samples, 0.47%)</title><rect x="78.6983%" y="469" width="0.4699%" height="15" fill="rgb(224,114,35)" fg:x="626103744" fg:w="3738737"/><text x="78.9483%" y="479.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3,738,737 samples, 0.47%)</title><rect x="78.6983%" y="453" width="0.4699%" height="15" fill="rgb(245,159,27)" fg:x="626103744" fg:w="3738737"/><text x="78.9483%" y="463.50"></text></g><g><title>_int_free (3,738,737 samples, 0.47%)</title><rect x="78.6983%" y="437" width="0.4699%" height="15" fill="rgb(245,172,44)" fg:x="626103744" fg:w="3738737"/><text x="78.9483%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,865,777 samples, 0.99%)</title><rect x="79.1682%" y="517" width="0.9887%" height="15" fill="rgb(236,23,11)" fg:x="629842481" fg:w="7865777"/><text x="79.4182%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::map::Utf8BoundedEntry]&gt; (7,865,777 samples, 0.99%)</title><rect x="79.1682%" y="501" width="0.9887%" height="15" fill="rgb(205,117,38)" fg:x="629842481" fg:w="7865777"/><text x="79.4182%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt; (7,865,777 samples, 0.99%)</title><rect x="79.1682%" y="485" width="0.9887%" height="15" fill="rgb(237,72,25)" fg:x="629842481" fg:w="7865777"/><text x="79.4182%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (7,865,777 samples, 0.99%)</title><rect x="79.1682%" y="469" width="0.9887%" height="15" fill="rgb(244,70,9)" fg:x="629842481" fg:w="7865777"/><text x="79.4182%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (7,865,777 samples, 0.99%)</title><rect x="79.1682%" y="453" width="0.9887%" height="15" fill="rgb(217,125,39)" fg:x="629842481" fg:w="7865777"/><text x="79.4182%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,865,777 samples, 0.99%)</title><rect x="79.1682%" y="437" width="0.9887%" height="15" fill="rgb(235,36,10)" fg:x="629842481" fg:w="7865777"/><text x="79.4182%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (19,494,127 samples, 2.45%)</title><rect x="78.6983%" y="613" width="2.4503%" height="15" fill="rgb(251,123,47)" fg:x="626103744" fg:w="19494127"/><text x="78.9483%" y="623.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (15,755,390 samples, 1.98%)</title><rect x="79.1682%" y="597" width="1.9804%" height="15" fill="rgb(221,13,13)" fg:x="629842481" fg:w="15755390"/><text x="79.4182%" y="607.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (15,755,390 samples, 1.98%)</title><rect x="79.1682%" y="581" width="1.9804%" height="15" fill="rgb(238,131,9)" fg:x="629842481" fg:w="15755390"/><text x="79.4182%" y="591.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt; (15,755,390 samples, 1.98%)</title><rect x="79.1682%" y="565" width="1.9804%" height="15" fill="rgb(211,50,8)" fg:x="629842481" fg:w="15755390"/><text x="79.4182%" y="575.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedMap&gt; (15,755,390 samples, 1.98%)</title><rect x="79.1682%" y="549" width="1.9804%" height="15" fill="rgb(245,182,24)" fg:x="629842481" fg:w="15755390"/><text x="79.4182%" y="559.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (15,755,390 samples, 1.98%)</title><rect x="79.1682%" y="533" width="1.9804%" height="15" fill="rgb(242,14,37)" fg:x="629842481" fg:w="15755390"/><text x="79.4182%" y="543.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (7,889,613 samples, 0.99%)</title><rect x="80.1569%" y="517" width="0.9917%" height="15" fill="rgb(246,228,12)" fg:x="637708258" fg:w="7889613"/><text x="80.4069%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,889,613 samples, 0.99%)</title><rect x="80.1569%" y="501" width="0.9917%" height="15" fill="rgb(213,55,15)" fg:x="637708258" fg:w="7889613"/><text x="80.4069%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7,889,613 samples, 0.99%)</title><rect x="80.1569%" y="485" width="0.9917%" height="15" fill="rgb(209,9,3)" fg:x="637708258" fg:w="7889613"/><text x="80.4069%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7,889,613 samples, 0.99%)</title><rect x="80.1569%" y="469" width="0.9917%" height="15" fill="rgb(230,59,30)" fg:x="637708258" fg:w="7889613"/><text x="80.4069%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (7,889,613 samples, 0.99%)</title><rect x="80.1569%" y="453" width="0.9917%" height="15" fill="rgb(209,121,21)" fg:x="637708258" fg:w="7889613"/><text x="80.4069%" y="463.50"></text></g><g><title>cfree@GLIBC_2.2.5 (7,889,613 samples, 0.99%)</title><rect x="80.1569%" y="437" width="0.9917%" height="15" fill="rgb(220,109,13)" fg:x="637708258" fg:w="7889613"/><text x="80.4069%" y="447.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (7,889,613 samples, 0.99%)</title><rect x="80.1569%" y="421" width="0.9917%" height="15" fill="rgb(232,18,1)" fg:x="637708258" fg:w="7889613"/><text x="80.4069%" y="431.50"></text></g><g><title>malloc_consolidate (7,889,613 samples, 0.99%)</title><rect x="80.1569%" y="405" width="0.9917%" height="15" fill="rgb(215,41,42)" fg:x="637708258" fg:w="7889613"/><text x="80.4069%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3,720,576 samples, 0.47%)</title><rect x="81.1486%" y="581" width="0.4677%" height="15" fill="rgb(224,123,36)" fg:x="645597871" fg:w="3720576"/><text x="81.3986%" y="591.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::set_starts (3,720,576 samples, 0.47%)</title><rect x="81.1486%" y="565" width="0.4677%" height="15" fill="rgb(240,125,3)" fg:x="645597871" fg:w="3720576"/><text x="81.3986%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3,720,576 samples, 0.47%)</title><rect x="81.1486%" y="549" width="0.4677%" height="15" fill="rgb(205,98,50)" fg:x="645597871" fg:w="3720576"/><text x="81.3986%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,720,576 samples, 0.47%)</title><rect x="81.1486%" y="533" width="0.4677%" height="15" fill="rgb(205,185,37)" fg:x="645597871" fg:w="3720576"/><text x="81.3986%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (3,720,576 samples, 0.47%)</title><rect x="81.1486%" y="517" width="0.4677%" height="15" fill="rgb(238,207,15)" fg:x="645597871" fg:w="3720576"/><text x="81.3986%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,720,576 samples, 0.47%)</title><rect x="81.1486%" y="501" width="0.4677%" height="15" fill="rgb(213,199,42)" fg:x="645597871" fg:w="3720576"/><text x="81.3986%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,720,576 samples, 0.47%)</title><rect x="81.1486%" y="485" width="0.4677%" height="15" fill="rgb(235,201,11)" fg:x="645597871" fg:w="3720576"/><text x="81.3986%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,720,576 samples, 0.47%)</title><rect x="81.1486%" y="469" width="0.4677%" height="15" fill="rgb(207,46,11)" fg:x="645597871" fg:w="3720576"/><text x="81.3986%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,720,576 samples, 0.47%)</title><rect x="81.1486%" y="453" width="0.4677%" height="15" fill="rgb(241,35,35)" fg:x="645597871" fg:w="3720576"/><text x="81.3986%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,720,576 samples, 0.47%)</title><rect x="81.1486%" y="437" width="0.4677%" height="15" fill="rgb(243,32,47)" fg:x="645597871" fg:w="3720576"/><text x="81.3986%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,720,576 samples, 0.47%)</title><rect x="81.1486%" y="421" width="0.4677%" height="15" fill="rgb(247,202,23)" fg:x="645597871" fg:w="3720576"/><text x="81.3986%" y="431.50"></text></g><g><title>alloc::alloc::alloc (3,720,576 samples, 0.47%)</title><rect x="81.1486%" y="405" width="0.4677%" height="15" fill="rgb(219,102,11)" fg:x="645597871" fg:w="3720576"/><text x="81.3986%" y="415.50"></text></g><g><title>malloc (3,720,576 samples, 0.47%)</title><rect x="81.1486%" y="389" width="0.4677%" height="15" fill="rgb(243,110,44)" fg:x="645597871" fg:w="3720576"/><text x="81.3986%" y="399.50"></text></g><g><title>_int_malloc (3,720,576 samples, 0.47%)</title><rect x="81.1486%" y="373" width="0.4677%" height="15" fill="rgb(222,74,54)" fg:x="645597871" fg:w="3720576"/><text x="81.3986%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_literal (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="373" width="0.4618%" height="15" fill="rgb(216,99,12)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="357" width="0.4618%" height="15" fill="rgb(226,22,26)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="341" width="0.4618%" height="15" fill="rgb(217,163,10)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="325" width="0.4618%" height="15" fill="rgb(213,25,53)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="309" width="0.4618%" height="15" fill="rgb(252,105,26)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_literal::{{closure}} (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="293" width="0.4618%" height="15" fill="rgb(220,39,43)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_range (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="277" width="0.4618%" height="15" fill="rgb(229,68,48)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::add_range (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="261" width="0.4618%" height="15" fill="rgb(252,8,32)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_range (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="245" width="0.4618%" height="15" fill="rgb(223,20,43)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="229" width="0.4618%" height="15" fill="rgb(229,81,49)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="213" width="0.4618%" height="15" fill="rgb(236,28,36)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="197" width="0.4618%" height="15" fill="rgb(249,185,26)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="181" width="0.4618%" height="15" fill="rgb(249,174,33)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="165" width="0.4618%" height="15" fill="rgb(233,201,37)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="149" width="0.4618%" height="15" fill="rgb(221,78,26)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="133" width="0.4618%" height="15" fill="rgb(250,127,30)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="117" width="0.4618%" height="15" fill="rgb(230,49,44)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="127.50"></text></g><g><title>alloc::alloc::realloc (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="101" width="0.4618%" height="15" fill="rgb(229,67,23)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="111.50"></text></g><g><title>realloc (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="85" width="0.4618%" height="15" fill="rgb(249,83,47)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="95.50"></text></g><g><title>_int_realloc (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="69" width="0.4618%" height="15" fill="rgb(215,43,3)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="79.50"></text></g><g><title>_int_malloc (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="53" width="0.4618%" height="15" fill="rgb(238,154,13)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="63.50"></text></g><g><title>unlink_chunk.isra.0 (3,674,231 samples, 0.46%)</title><rect x="81.6162%" y="37" width="0.4618%" height="15" fill="rgb(219,56,2)" fg:x="649318447" fg:w="3674231"/><text x="81.8662%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (7,448,650 samples, 0.94%)</title><rect x="81.6162%" y="389" width="0.9363%" height="15" fill="rgb(233,0,4)" fg:x="649318447" fg:w="7448650"/><text x="81.8662%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (3,774,419 samples, 0.47%)</title><rect x="82.0781%" y="373" width="0.4744%" height="15" fill="rgb(235,30,7)" fg:x="652992678" fg:w="3774419"/><text x="82.3281%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_exactly (3,774,419 samples, 0.47%)</title><rect x="82.0781%" y="357" width="0.4744%" height="15" fill="rgb(250,79,13)" fg:x="652992678" fg:w="3774419"/><text x="82.3281%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (3,774,419 samples, 0.47%)</title><rect x="82.0781%" y="341" width="0.4744%" height="15" fill="rgb(211,146,34)" fg:x="652992678" fg:w="3774419"/><text x="82.3281%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3,774,419 samples, 0.47%)</title><rect x="82.0781%" y="325" width="0.4744%" height="15" fill="rgb(228,22,38)" fg:x="652992678" fg:w="3774419"/><text x="82.3281%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (3,774,419 samples, 0.47%)</title><rect x="82.0781%" y="309" width="0.4744%" height="15" fill="rgb(235,168,5)" fg:x="652992678" fg:w="3774419"/><text x="82.3281%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (3,774,419 samples, 0.47%)</title><rect x="82.0781%" y="293" width="0.4744%" height="15" fill="rgb(221,155,16)" fg:x="652992678" fg:w="3774419"/><text x="82.3281%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::hash (3,774,419 samples, 0.47%)</title><rect x="82.0781%" y="277" width="0.4744%" height="15" fill="rgb(215,215,53)" fg:x="652992678" fg:w="3774419"/><text x="82.3281%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3,951,843 samples, 0.50%)</title><rect x="82.5525%" y="325" width="0.4967%" height="15" fill="rgb(223,4,10)" fg:x="656767097" fg:w="3951843"/><text x="82.8025%" y="335.50"></text></g><g><title>alloc::vec::from_elem (3,951,843 samples, 0.50%)</title><rect x="82.5525%" y="309" width="0.4967%" height="15" fill="rgb(234,103,6)" fg:x="656767097" fg:w="3951843"/><text x="82.8025%" y="319.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3,951,843 samples, 0.50%)</title><rect x="82.5525%" y="293" width="0.4967%" height="15" fill="rgb(227,97,0)" fg:x="656767097" fg:w="3951843"/><text x="82.8025%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (3,951,843 samples, 0.50%)</title><rect x="82.5525%" y="277" width="0.4967%" height="15" fill="rgb(234,150,53)" fg:x="656767097" fg:w="3951843"/><text x="82.8025%" y="287.50"></text></g><g><title>core::ptr::write (3,951,843 samples, 0.50%)</title><rect x="82.5525%" y="261" width="0.4967%" height="15" fill="rgb(228,201,54)" fg:x="656767097" fg:w="3951843"/><text x="82.8025%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (15,332,838 samples, 1.93%)</title><rect x="81.6162%" y="453" width="1.9273%" height="15" fill="rgb(222,22,37)" fg:x="649318447" fg:w="15332838"/><text x="81.8662%" y="463.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (15,332,838 samples, 1.93%)</title><rect x="81.6162%" y="437" width="1.9273%" height="15" fill="rgb(237,53,32)" fg:x="649318447" fg:w="15332838"/><text x="81.8662%" y="447.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (15,332,838 samples, 1.93%)</title><rect x="81.6162%" y="421" width="1.9273%" height="15" fill="rgb(233,25,53)" fg:x="649318447" fg:w="15332838"/><text x="81.8662%" y="431.50">c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (15,332,838 samples, 1.93%)</title><rect x="81.6162%" y="405" width="1.9273%" height="15" fill="rgb(210,40,34)" fg:x="649318447" fg:w="15332838"/><text x="81.8662%" y="415.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (7,884,188 samples, 0.99%)</title><rect x="82.5525%" y="389" width="0.9910%" height="15" fill="rgb(241,220,44)" fg:x="656767097" fg:w="7884188"/><text x="82.8025%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (7,884,188 samples, 0.99%)</title><rect x="82.5525%" y="373" width="0.9910%" height="15" fill="rgb(235,28,35)" fg:x="656767097" fg:w="7884188"/><text x="82.8025%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (7,884,188 samples, 0.99%)</title><rect x="82.5525%" y="357" width="0.9910%" height="15" fill="rgb(210,56,17)" fg:x="656767097" fg:w="7884188"/><text x="82.8025%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (7,884,188 samples, 0.99%)</title><rect x="82.5525%" y="341" width="0.9910%" height="15" fill="rgb(224,130,29)" fg:x="656767097" fg:w="7884188"/><text x="82.8025%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::get (3,932,345 samples, 0.49%)</title><rect x="83.0492%" y="325" width="0.4943%" height="15" fill="rgb(235,212,8)" fg:x="660718940" fg:w="3932345"/><text x="83.2992%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3,932,345 samples, 0.49%)</title><rect x="83.0492%" y="309" width="0.4943%" height="15" fill="rgb(223,33,50)" fg:x="660718940" fg:w="3932345"/><text x="83.2992%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,932,345 samples, 0.49%)</title><rect x="83.0492%" y="293" width="0.4943%" height="15" fill="rgb(219,149,13)" fg:x="660718940" fg:w="3932345"/><text x="83.2992%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,932,345 samples, 0.49%)</title><rect x="83.0492%" y="277" width="0.4943%" height="15" fill="rgb(250,156,29)" fg:x="660718940" fg:w="3932345"/><text x="83.2992%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3,840,984 samples, 0.48%)</title><rect x="83.5435%" y="389" width="0.4828%" height="15" fill="rgb(216,193,19)" fg:x="664651285" fg:w="3840984"/><text x="83.7935%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (3,840,984 samples, 0.48%)</title><rect x="83.5435%" y="373" width="0.4828%" height="15" fill="rgb(216,135,14)" fg:x="664651285" fg:w="3840984"/><text x="83.7935%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_exactly (3,840,984 samples, 0.48%)</title><rect x="83.5435%" y="357" width="0.4828%" height="15" fill="rgb(241,47,5)" fg:x="664651285" fg:w="3840984"/><text x="83.7935%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (3,840,984 samples, 0.48%)</title><rect x="83.5435%" y="341" width="0.4828%" height="15" fill="rgb(233,42,35)" fg:x="664651285" fg:w="3840984"/><text x="83.7935%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3,840,984 samples, 0.48%)</title><rect x="83.5435%" y="325" width="0.4828%" height="15" fill="rgb(231,13,6)" fg:x="664651285" fg:w="3840984"/><text x="83.7935%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (3,840,984 samples, 0.48%)</title><rect x="83.5435%" y="309" width="0.4828%" height="15" fill="rgb(207,181,40)" fg:x="664651285" fg:w="3840984"/><text x="83.7935%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3,840,984 samples, 0.48%)</title><rect x="83.5435%" y="293" width="0.4828%" height="15" fill="rgb(254,173,49)" fg:x="664651285" fg:w="3840984"/><text x="83.7935%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (3,840,984 samples, 0.48%)</title><rect x="83.5435%" y="277" width="0.4828%" height="15" fill="rgb(221,1,38)" fg:x="664651285" fg:w="3840984"/><text x="83.7935%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,840,984 samples, 0.48%)</title><rect x="83.5435%" y="261" width="0.4828%" height="15" fill="rgb(206,124,46)" fg:x="664651285" fg:w="3840984"/><text x="83.7935%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,840,984 samples, 0.48%)</title><rect x="83.5435%" y="245" width="0.4828%" height="15" fill="rgb(249,21,11)" fg:x="664651285" fg:w="3840984"/><text x="83.7935%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,840,984 samples, 0.48%)</title><rect x="83.5435%" y="229" width="0.4828%" height="15" fill="rgb(222,201,40)" fg:x="664651285" fg:w="3840984"/><text x="83.7935%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (3,840,984 samples, 0.48%)</title><rect x="83.5435%" y="213" width="0.4828%" height="15" fill="rgb(235,61,29)" fg:x="664651285" fg:w="3840984"/><text x="83.7935%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add::{{closure}} (3,840,984 samples, 0.48%)</title><rect x="83.5435%" y="197" width="0.4828%" height="15" fill="rgb(219,207,3)" fg:x="664651285" fg:w="3840984"/><text x="83.7935%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (3,840,984 samples, 0.48%)</title><rect x="83.5435%" y="181" width="0.4828%" height="15" fill="rgb(222,56,46)" fg:x="664651285" fg:w="3840984"/><text x="83.7935%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add::{{closure}}::{{closure}} (3,840,984 samples, 0.48%)</title><rect x="83.5435%" y="165" width="0.4828%" height="15" fill="rgb(239,76,54)" fg:x="664651285" fg:w="3840984"/><text x="83.7935%" y="175.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (3,840,984 samples, 0.48%)</title><rect x="83.5435%" y="149" width="0.4828%" height="15" fill="rgb(231,124,27)" fg:x="664651285" fg:w="3840984"/><text x="83.7935%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (3,840,984 samples, 0.48%)</title><rect x="83.5435%" y="133" width="0.4828%" height="15" fill="rgb(249,195,6)" fg:x="664651285" fg:w="3840984"/><text x="83.7935%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3,694,263 samples, 0.46%)</title><rect x="84.0263%" y="341" width="0.4644%" height="15" fill="rgb(237,174,47)" fg:x="668492269" fg:w="3694263"/><text x="84.2763%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3,694,263 samples, 0.46%)</title><rect x="84.0263%" y="325" width="0.4644%" height="15" fill="rgb(206,201,31)" fg:x="668492269" fg:w="3694263"/><text x="84.2763%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::top_last_freeze (3,694,263 samples, 0.46%)</title><rect x="84.0263%" y="309" width="0.4644%" height="15" fill="rgb(231,57,52)" fg:x="668492269" fg:w="3694263"/><text x="84.2763%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Node::set_last_transition (3,694,263 samples, 0.46%)</title><rect x="84.0263%" y="293" width="0.4644%" height="15" fill="rgb(248,177,22)" fg:x="668492269" fg:w="3694263"/><text x="84.2763%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,694,263 samples, 0.46%)</title><rect x="84.0263%" y="277" width="0.4644%" height="15" fill="rgb(215,211,37)" fg:x="668492269" fg:w="3694263"/><text x="84.2763%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,694,263 samples, 0.46%)</title><rect x="84.0263%" y="261" width="0.4644%" height="15" fill="rgb(241,128,51)" fg:x="668492269" fg:w="3694263"/><text x="84.2763%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,694,263 samples, 0.46%)</title><rect x="84.0263%" y="245" width="0.4644%" height="15" fill="rgb(227,165,31)" fg:x="668492269" fg:w="3694263"/><text x="84.2763%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,694,263 samples, 0.46%)</title><rect x="84.0263%" y="229" width="0.4644%" height="15" fill="rgb(228,167,24)" fg:x="668492269" fg:w="3694263"/><text x="84.2763%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,694,263 samples, 0.46%)</title><rect x="84.0263%" y="213" width="0.4644%" height="15" fill="rgb(228,143,12)" fg:x="668492269" fg:w="3694263"/><text x="84.2763%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,694,263 samples, 0.46%)</title><rect x="84.0263%" y="197" width="0.4644%" height="15" fill="rgb(249,149,8)" fg:x="668492269" fg:w="3694263"/><text x="84.2763%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,694,263 samples, 0.46%)</title><rect x="84.0263%" y="181" width="0.4644%" height="15" fill="rgb(243,35,44)" fg:x="668492269" fg:w="3694263"/><text x="84.2763%" y="191.50"></text></g><g><title>alloc::alloc::realloc (3,694,263 samples, 0.46%)</title><rect x="84.0263%" y="165" width="0.4644%" height="15" fill="rgb(246,89,9)" fg:x="668492269" fg:w="3694263"/><text x="84.2763%" y="175.50"></text></g><g><title>realloc (3,694,263 samples, 0.46%)</title><rect x="84.0263%" y="149" width="0.4644%" height="15" fill="rgb(233,213,13)" fg:x="668492269" fg:w="3694263"/><text x="84.2763%" y="159.50"></text></g><g><title>_int_realloc (3,694,263 samples, 0.46%)</title><rect x="84.0263%" y="133" width="0.4644%" height="15" fill="rgb(233,141,41)" fg:x="668492269" fg:w="3694263"/><text x="84.2763%" y="143.50"></text></g><g><title>_int_malloc (3,694,263 samples, 0.46%)</title><rect x="84.0263%" y="117" width="0.4644%" height="15" fill="rgb(239,167,4)" fg:x="668492269" fg:w="3694263"/><text x="84.2763%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (22,633,751 samples, 2.84%)</title><rect x="84.4907%" y="261" width="2.8450%" height="15" fill="rgb(209,217,16)" fg:x="672186532" fg:w="22633751"/><text x="84.7407%" y="271.50">al..</text></g><g><title>core::ptr::write (22,633,751 samples, 2.84%)</title><rect x="84.4907%" y="245" width="2.8450%" height="15" fill="rgb(219,88,35)" fg:x="672186532" fg:w="22633751"/><text x="84.7407%" y="255.50">co..</text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (72,430,453 samples, 9.10%)</title><rect x="78.6983%" y="661" width="9.1042%" height="15" fill="rgb(220,193,23)" fg:x="626103744" fg:w="72430453"/><text x="78.9483%" y="671.50">regex_automat..</text></g><g><title>regex_automata::meta::strategy::new (72,430,453 samples, 9.10%)</title><rect x="78.6983%" y="645" width="9.1042%" height="15" fill="rgb(230,90,52)" fg:x="626103744" fg:w="72430453"/><text x="78.9483%" y="655.50">regex_automat..</text></g><g><title>regex_automata::meta::strategy::Core::new (72,430,453 samples, 9.10%)</title><rect x="78.6983%" y="629" width="9.1042%" height="15" fill="rgb(252,106,19)" fg:x="626103744" fg:w="72430453"/><text x="78.9483%" y="639.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (52,936,326 samples, 6.65%)</title><rect x="81.1486%" y="613" width="6.6538%" height="15" fill="rgb(206,74,20)" fg:x="645597871" fg:w="52936326"/><text x="81.3986%" y="623.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (52,936,326 samples, 6.65%)</title><rect x="81.1486%" y="597" width="6.6538%" height="15" fill="rgb(230,138,44)" fg:x="645597871" fg:w="52936326"/><text x="81.3986%" y="607.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (49,215,750 samples, 6.19%)</title><rect x="81.6162%" y="581" width="6.1862%" height="15" fill="rgb(235,182,43)" fg:x="649318447" fg:w="49215750"/><text x="81.8662%" y="591.50">regex_au..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (49,215,750 samples, 6.19%)</title><rect x="81.6162%" y="565" width="6.1862%" height="15" fill="rgb(242,16,51)" fg:x="649318447" fg:w="49215750"/><text x="81.8662%" y="575.50">&lt;core::i..</text></g><g><title>core::option::Option&lt;T&gt;::map (49,215,750 samples, 6.19%)</title><rect x="81.6162%" y="549" width="6.1862%" height="15" fill="rgb(248,9,4)" fg:x="649318447" fg:w="49215750"/><text x="81.8662%" y="559.50">core::op..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (49,215,750 samples, 6.19%)</title><rect x="81.6162%" y="533" width="6.1862%" height="15" fill="rgb(210,31,22)" fg:x="649318447" fg:w="49215750"/><text x="81.8662%" y="543.50">core::op..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (49,215,750 samples, 6.19%)</title><rect x="81.6162%" y="517" width="6.1862%" height="15" fill="rgb(239,54,39)" fg:x="649318447" fg:w="49215750"/><text x="81.8662%" y="527.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (49,215,750 samples, 6.19%)</title><rect x="81.6162%" y="501" width="6.1862%" height="15" fill="rgb(230,99,41)" fg:x="649318447" fg:w="49215750"/><text x="81.8662%" y="511.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (49,215,750 samples, 6.19%)</title><rect x="81.6162%" y="485" width="6.1862%" height="15" fill="rgb(253,106,12)" fg:x="649318447" fg:w="49215750"/><text x="81.8662%" y="495.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (49,215,750 samples, 6.19%)</title><rect x="81.6162%" y="469" width="6.1862%" height="15" fill="rgb(213,46,41)" fg:x="649318447" fg:w="49215750"/><text x="81.8662%" y="479.50">regex_au..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (33,882,912 samples, 4.26%)</title><rect x="83.5435%" y="453" width="4.2589%" height="15" fill="rgb(215,133,35)" fg:x="664651285" fg:w="33882912"/><text x="83.7935%" y="463.50">&lt;core..</text></g><g><title>core::option::Option&lt;T&gt;::map (33,882,912 samples, 4.26%)</title><rect x="83.5435%" y="437" width="4.2589%" height="15" fill="rgb(213,28,5)" fg:x="664651285" fg:w="33882912"/><text x="83.7935%" y="447.50">core:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (33,882,912 samples, 4.26%)</title><rect x="83.5435%" y="421" width="4.2589%" height="15" fill="rgb(215,77,49)" fg:x="664651285" fg:w="33882912"/><text x="83.7935%" y="431.50">core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (33,882,912 samples, 4.26%)</title><rect x="83.5435%" y="405" width="4.2589%" height="15" fill="rgb(248,100,22)" fg:x="664651285" fg:w="33882912"/><text x="83.7935%" y="415.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (30,041,928 samples, 3.78%)</title><rect x="84.0263%" y="389" width="3.7761%" height="15" fill="rgb(208,67,9)" fg:x="668492269" fg:w="30041928"/><text x="84.2763%" y="399.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (30,041,928 samples, 3.78%)</title><rect x="84.0263%" y="373" width="3.7761%" height="15" fill="rgb(219,133,21)" fg:x="668492269" fg:w="30041928"/><text x="84.2763%" y="383.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (30,041,928 samples, 3.78%)</title><rect x="84.0263%" y="357" width="3.7761%" height="15" fill="rgb(246,46,29)" fg:x="668492269" fg:w="30041928"/><text x="84.2763%" y="367.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (26,347,665 samples, 3.31%)</title><rect x="84.4907%" y="341" width="3.3118%" height="15" fill="rgb(246,185,52)" fg:x="672186532" fg:w="26347665"/><text x="84.7407%" y="351.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (26,347,665 samples, 3.31%)</title><rect x="84.4907%" y="325" width="3.3118%" height="15" fill="rgb(252,136,11)" fg:x="672186532" fg:w="26347665"/><text x="84.7407%" y="335.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (26,347,665 samples, 3.31%)</title><rect x="84.4907%" y="309" width="3.3118%" height="15" fill="rgb(219,138,53)" fg:x="672186532" fg:w="26347665"/><text x="84.7407%" y="319.50">reg..</text></g><g><title>alloc::vec::from_elem (26,347,665 samples, 3.31%)</title><rect x="84.4907%" y="293" width="3.3118%" height="15" fill="rgb(211,51,23)" fg:x="672186532" fg:w="26347665"/><text x="84.7407%" y="303.50">all..</text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (26,347,665 samples, 3.31%)</title><rect x="84.4907%" y="277" width="3.3118%" height="15" fill="rgb(247,221,28)" fg:x="672186532" fg:w="26347665"/><text x="84.7407%" y="287.50">&lt;T ..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,713,914 samples, 0.47%)</title><rect x="87.3356%" y="261" width="0.4668%" height="15" fill="rgb(251,222,45)" fg:x="694820283" fg:w="3713914"/><text x="87.5856%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,713,914 samples, 0.47%)</title><rect x="87.3356%" y="245" width="0.4668%" height="15" fill="rgb(217,162,53)" fg:x="694820283" fg:w="3713914"/><text x="87.5856%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3,713,914 samples, 0.47%)</title><rect x="87.3356%" y="229" width="0.4668%" height="15" fill="rgb(229,93,14)" fg:x="694820283" fg:w="3713914"/><text x="87.5856%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3,713,914 samples, 0.47%)</title><rect x="87.3356%" y="213" width="0.4668%" height="15" fill="rgb(209,67,49)" fg:x="694820283" fg:w="3713914"/><text x="87.5856%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,713,914 samples, 0.47%)</title><rect x="87.3356%" y="197" width="0.4668%" height="15" fill="rgb(213,87,29)" fg:x="694820283" fg:w="3713914"/><text x="87.5856%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,713,914 samples, 0.47%)</title><rect x="87.3356%" y="181" width="0.4668%" height="15" fill="rgb(205,151,52)" fg:x="694820283" fg:w="3713914"/><text x="87.5856%" y="191.50"></text></g><g><title>alloc::alloc::alloc (3,713,914 samples, 0.47%)</title><rect x="87.3356%" y="165" width="0.4668%" height="15" fill="rgb(253,215,39)" fg:x="694820283" fg:w="3713914"/><text x="87.5856%" y="175.50"></text></g><g><title>malloc (3,713,914 samples, 0.47%)</title><rect x="87.3356%" y="149" width="0.4668%" height="15" fill="rgb(221,220,41)" fg:x="694820283" fg:w="3713914"/><text x="87.5856%" y="159.50"></text></g><g><title>_int_malloc (3,713,914 samples, 0.47%)</title><rect x="87.3356%" y="133" width="0.4668%" height="15" fill="rgb(218,133,21)" fg:x="694820283" fg:w="3713914"/><text x="87.5856%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3,941,682 samples, 0.50%)</title><rect x="87.8024%" y="661" width="0.4955%" height="15" fill="rgb(221,193,43)" fg:x="698534197" fg:w="3941682"/><text x="88.0524%" y="671.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse (3,941,682 samples, 0.50%)</title><rect x="87.8024%" y="645" width="0.4955%" height="15" fill="rgb(240,128,52)" fg:x="698534197" fg:w="3941682"/><text x="88.0524%" y="655.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3,941,682 samples, 0.50%)</title><rect x="87.8024%" y="629" width="0.4955%" height="15" fill="rgb(253,114,12)" fg:x="698534197" fg:w="3941682"/><text x="88.0524%" y="639.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_primitive (3,941,682 samples, 0.50%)</title><rect x="87.8024%" y="613" width="0.4955%" height="15" fill="rgb(215,223,47)" fg:x="698534197" fg:w="3941682"/><text x="88.0524%" y="623.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (3,941,682 samples, 0.50%)</title><rect x="87.8024%" y="597" width="0.4955%" height="15" fill="rgb(248,225,23)" fg:x="698534197" fg:w="3941682"/><text x="88.0524%" y="607.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char (3,941,682 samples, 0.50%)</title><rect x="87.8024%" y="581" width="0.4955%" height="15" fill="rgb(250,108,0)" fg:x="698534197" fg:w="3941682"/><text x="88.0524%" y="591.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::offset (3,941,682 samples, 0.50%)</title><rect x="87.8024%" y="565" width="0.4955%" height="15" fill="rgb(228,208,7)" fg:x="698534197" fg:w="3941682"/><text x="88.0524%" y="575.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parser (3,941,682 samples, 0.50%)</title><rect x="87.8024%" y="549" width="0.4955%" height="15" fill="rgb(244,45,10)" fg:x="698534197" fg:w="3941682"/><text x="88.0524%" y="559.50"></text></g><g><title>syntastica::processor::process_highlight_iter (99,308,305 samples, 12.48%)</title><rect x="76.2795%" y="1253" width="12.4826%" height="15" fill="rgb(207,125,25)" fg:x="606860765" fg:w="99308305"/><text x="76.5295%" y="1263.50">syntastica::process..</text></g><g><title>&lt;syntastica_highlight::HighlightIter&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (99,308,305 samples, 12.48%)</title><rect x="76.2795%" y="1237" width="12.4826%" height="15" fill="rgb(210,195,18)" fg:x="606860765" fg:w="99308305"/><text x="76.5295%" y="1247.50">&lt;syntastica_highlig..</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl::{{closure}} (91,600,284 samples, 11.51%)</title><rect x="77.2484%" y="1221" width="11.5137%" height="15" fill="rgb(249,80,12)" fg:x="614568786" fg:w="91600284"/><text x="77.4984%" y="1231.50">syntastica::proce..</text></g><g><title>core::option::Option&lt;T&gt;::or_else (91,600,284 samples, 11.51%)</title><rect x="77.2484%" y="1205" width="11.5137%" height="15" fill="rgb(221,65,9)" fg:x="614568786" fg:w="91600284"/><text x="77.4984%" y="1215.50">core::option::Opt..</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl::{{closure}}::{{closure}} (91,600,284 samples, 11.51%)</title><rect x="77.2484%" y="1189" width="11.5137%" height="15" fill="rgb(235,49,36)" fg:x="614568786" fg:w="91600284"/><text x="77.4984%" y="1199.50">syntastica::proce..</text></g><g><title>syntastica_core::language_set::SupportedLanguage::for_injection (91,600,284 samples, 11.51%)</title><rect x="77.2484%" y="1173" width="11.5137%" height="15" fill="rgb(225,32,20)" fg:x="614568786" fg:w="91600284"/><text x="77.4984%" y="1183.50">syntastica_core::..</text></g><g><title>tft::detect::try_detect (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="1157" width="10.0638%" height="15" fill="rgb(215,141,46)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="1167.50">tft::detect::tr..</text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="1141" width="10.0638%" height="15" fill="rgb(250,160,47)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="1151.50">&lt;once_cell::syn..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="1125" width="10.0638%" height="15" fill="rgb(216,222,40)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="1135.50">once_cell::sync..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="1109" width="10.0638%" height="15" fill="rgb(234,217,39)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="1119.50">once_cell::sync..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="1093" width="10.0638%" height="15" fill="rgb(207,178,40)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="1103.50">once_cell::sync..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="1077" width="10.0638%" height="15" fill="rgb(221,136,13)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="1087.50">once_cell::imp:..</text></g><g><title>once_cell::imp::initialize_or_wait (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="1061" width="10.0638%" height="15" fill="rgb(249,199,10)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="1071.50">once_cell::imp:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="1045" width="10.0638%" height="15" fill="rgb(249,222,13)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="1055.50">core::ops::func..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="1029" width="10.0638%" height="15" fill="rgb(244,185,38)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="1039.50">once_cell::imp:..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="1013" width="10.0638%" height="15" fill="rgb(236,202,9)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="1023.50">once_cell::sync..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="997" width="10.0638%" height="15" fill="rgb(250,229,37)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="1007.50">once_cell::sync..</text></g><g><title>core::ops::function::FnOnce::call_once (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="981" width="10.0638%" height="15" fill="rgb(206,174,23)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="991.50">core::ops::func..</text></g><g><title>core::ops::function::FnOnce::call_once (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="965" width="10.0638%" height="15" fill="rgb(211,33,43)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="975.50">core::ops::func..</text></g><g><title>tft::detect::pattern::PATTERN::{{closure}} (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="949" width="10.0638%" height="15" fill="rgb(245,58,50)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="959.50">tft::detect::pa..</text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="933" width="10.0638%" height="15" fill="rgb(244,68,36)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="943.50">&lt;once_cell::syn..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="917" width="10.0638%" height="15" fill="rgb(232,229,15)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="927.50">once_cell::sync..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="901" width="10.0638%" height="15" fill="rgb(254,30,23)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="911.50">once_cell::sync..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="885" width="10.0638%" height="15" fill="rgb(235,160,14)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="895.50">once_cell::sync..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="869" width="10.0638%" height="15" fill="rgb(212,155,44)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="879.50">once_cell::imp:..</text></g><g><title>once_cell::imp::initialize_or_wait (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="853" width="10.0638%" height="15" fill="rgb(226,2,50)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="863.50">once_cell::imp:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="837" width="10.0638%" height="15" fill="rgb(234,177,6)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="847.50">core::ops::func..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="821" width="10.0638%" height="15" fill="rgb(217,24,9)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="831.50">once_cell::imp:..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="805" width="10.0638%" height="15" fill="rgb(220,13,46)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="815.50">once_cell::sync..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="789" width="10.0638%" height="15" fill="rgb(239,221,27)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="799.50">once_cell::sync..</text></g><g><title>core::ops::function::FnOnce::call_once (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="773" width="10.0638%" height="15" fill="rgb(222,198,25)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="783.50">core::ops::func..</text></g><g><title>core::ops::function::FnOnce::call_once (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="757" width="10.0638%" height="15" fill="rgb(211,99,13)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="767.50">core::ops::func..</text></g><g><title>tft::detect::pattern::PATTERN::{{closure}}::RE::{{closure}} (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="741" width="10.0638%" height="15" fill="rgb(232,111,31)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="751.50">tft::detect::pa..</text></g><g><title>regex::builders::string::RegexBuilder::build (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="725" width="10.0638%" height="15" fill="rgb(245,82,37)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="735.50">regex::builders..</text></g><g><title>regex::builders::Builder::build_one_string (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="709" width="10.0638%" height="15" fill="rgb(227,149,46)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="719.50">regex::builders..</text></g><g><title>regex_automata::meta::regex::Builder::build (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="693" width="10.0638%" height="15" fill="rgb(218,36,50)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="703.50">regex_automata:..</text></g><g><title>regex_automata::meta::regex::Builder::build_many (80,065,326 samples, 10.06%)</title><rect x="78.6983%" y="677" width="10.0638%" height="15" fill="rgb(226,80,48)" fg:x="626103744" fg:w="80065326"/><text x="78.9483%" y="687.50">regex_automata:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3,693,191 samples, 0.46%)</title><rect x="88.2979%" y="661" width="0.4642%" height="15" fill="rgb(238,224,15)" fg:x="702475879" fg:w="3693191"/><text x="88.5479%" y="671.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3,693,191 samples, 0.46%)</title><rect x="88.2979%" y="645" width="0.4642%" height="15" fill="rgb(241,136,10)" fg:x="702475879" fg:w="3693191"/><text x="88.5479%" y="655.50"></text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit (3,693,191 samples, 0.46%)</title><rect x="88.2979%" y="629" width="0.4642%" height="15" fill="rgb(208,32,45)" fg:x="702475879" fg:w="3693191"/><text x="88.5479%" y="639.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3,693,191 samples, 0.46%)</title><rect x="88.2979%" y="613" width="0.4642%" height="15" fill="rgb(207,135,9)" fg:x="702475879" fg:w="3693191"/><text x="88.5479%" y="623.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::pop_concat_expr (3,693,191 samples, 0.46%)</title><rect x="88.2979%" y="597" width="0.4642%" height="15" fill="rgb(206,86,44)" fg:x="702475879" fg:w="3693191"/><text x="88.5479%" y="607.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::pop (3,693,191 samples, 0.46%)</title><rect x="88.2979%" y="581" width="0.4642%" height="15" fill="rgb(245,177,15)" fg:x="702475879" fg:w="3693191"/><text x="88.5479%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3,693,191 samples, 0.46%)</title><rect x="88.2979%" y="565" width="0.4642%" height="15" fill="rgb(206,64,50)" fg:x="702475879" fg:w="3693191"/><text x="88.5479%" y="575.50"></text></g><g><title>core::ptr::read (3,693,191 samples, 0.46%)</title><rect x="88.2979%" y="549" width="0.4642%" height="15" fill="rgb(234,36,40)" fg:x="702475879" fg:w="3693191"/><text x="88.5479%" y="559.50"></text></g><g><title>syntastica_highlight::HighlightIter&lt;F&gt;::sort_layers (3,956,106 samples, 0.50%)</title><rect x="88.7621%" y="1237" width="0.4973%" height="15" fill="rgb(213,64,8)" fg:x="706169070" fg:w="3956106"/><text x="89.0121%" y="1247.50"></text></g><g><title>syntastica_highlight::HighlightIterLayer::sort_key (3,956,106 samples, 0.50%)</title><rect x="88.7621%" y="1221" width="0.4973%" height="15" fill="rgb(210,75,36)" fg:x="706169070" fg:w="3956106"/><text x="89.0121%" y="1231.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (3,956,106 samples, 0.50%)</title><rect x="88.7621%" y="1205" width="0.4973%" height="15" fill="rgb(229,88,21)" fg:x="706169070" fg:w="3956106"/><text x="89.0121%" y="1215.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (3,956,106 samples, 0.50%)</title><rect x="88.7621%" y="1189" width="0.4973%" height="15" fill="rgb(252,204,47)" fg:x="706169070" fg:w="3956106"/><text x="89.0121%" y="1199.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (3,956,106 samples, 0.50%)</title><rect x="88.7621%" y="1173" width="0.4973%" height="15" fill="rgb(208,77,27)" fg:x="706169070" fg:w="3956106"/><text x="89.0121%" y="1183.50"></text></g><g><title>&lt;syntastica_highlight::_QueryCaptures&lt;T,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,956,106 samples, 0.50%)</title><rect x="88.7621%" y="1157" width="0.4973%" height="15" fill="rgb(221,76,26)" fg:x="706169070" fg:w="3956106"/><text x="89.0121%" y="1167.50"></text></g><g><title>ts_query_cursor_next_capture (3,956,106 samples, 0.50%)</title><rect x="88.7621%" y="1141" width="0.4973%" height="15" fill="rgb(225,139,18)" fg:x="706169070" fg:w="3956106"/><text x="89.0121%" y="1151.50"></text></g><g><title>ts_query_cursor__advance (3,956,106 samples, 0.50%)</title><rect x="88.7621%" y="1125" width="0.4973%" height="15" fill="rgb(230,137,11)" fg:x="706169070" fg:w="3956106"/><text x="89.0121%" y="1135.50"></text></g><g><title>ts_tree_cursor_goto_first_child_internal (3,956,106 samples, 0.50%)</title><rect x="88.7621%" y="1109" width="0.4973%" height="15" fill="rgb(212,28,1)" fg:x="706169070" fg:w="3956106"/><text x="89.0121%" y="1119.50"></text></g><g><title>ts_language_table_entry (3,796,018 samples, 0.48%)</title><rect x="89.2594%" y="1157" width="0.4771%" height="15" fill="rgb(248,164,17)" fg:x="710125176" fg:w="3796018"/><text x="89.5094%" y="1167.50"></text></g><g><title>ts_language_lookup (3,796,018 samples, 0.48%)</title><rect x="89.2594%" y="1141" width="0.4771%" height="15" fill="rgb(222,171,42)" fg:x="710125176" fg:w="3796018"/><text x="89.5094%" y="1151.50"></text></g><g><title>ts_parser__advance (7,322,850 samples, 0.92%)</title><rect x="89.2594%" y="1173" width="0.9204%" height="15" fill="rgb(243,84,45)" fg:x="710125176" fg:w="7322850"/><text x="89.5094%" y="1183.50"></text></g><g><title>ts_parser__check_progress (3,526,832 samples, 0.44%)</title><rect x="89.7365%" y="1157" width="0.4433%" height="15" fill="rgb(252,49,23)" fg:x="713921194" fg:w="3526832"/><text x="89.9865%" y="1167.50"></text></g><g><title>tree_sitter::Parser::parse_with_options::progress (3,526,832 samples, 0.44%)</title><rect x="89.7365%" y="1141" width="0.4433%" height="15" fill="rgb(215,19,7)" fg:x="713921194" fg:w="3526832"/><text x="89.9865%" y="1151.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,526,832 samples, 0.44%)</title><rect x="89.7365%" y="1125" width="0.4433%" height="15" fill="rgb(238,81,41)" fg:x="713921194" fg:w="3526832"/><text x="89.9865%" y="1135.50"></text></g><g><title>syntastica_highlight::HighlightIterLayer::new::{{closure}} (3,526,832 samples, 0.44%)</title><rect x="89.7365%" y="1109" width="0.4433%" height="15" fill="rgb(210,199,37)" fg:x="713921194" fg:w="3526832"/><text x="89.9865%" y="1119.50"></text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process (720,044,109 samples, 90.51%)</title><rect x="0.1717%" y="1285" width="90.5061%" height="15" fill="rgb(244,192,49)" fg:x="1365679" fg:w="720044109"/><text x="0.4217%" y="1295.50">syntastica::processor::Processor&lt;Set&gt;::process</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl (720,044,109 samples, 90.51%)</title><rect x="0.1717%" y="1269" width="90.5061%" height="15" fill="rgb(226,211,11)" fg:x="1365679" fg:w="720044109"/><text x="0.4217%" y="1279.50">syntastica::processor::Processor&lt;Set&gt;::process_impl</text></g><g><title>syntastica_highlight::Highlighter::highlight (15,240,718 samples, 1.92%)</title><rect x="88.7621%" y="1253" width="1.9157%" height="15" fill="rgb(236,162,54)" fg:x="706169070" fg:w="15240718"/><text x="89.0121%" y="1263.50">s..</text></g><g><title>syntastica_highlight::HighlightIterLayer::new (11,284,612 samples, 1.42%)</title><rect x="89.2594%" y="1237" width="1.4184%" height="15" fill="rgb(220,229,9)" fg:x="710125176" fg:w="11284612"/><text x="89.5094%" y="1247.50"></text></g><g><title>tree_sitter::Parser::parse_with_options (11,284,612 samples, 1.42%)</title><rect x="89.2594%" y="1221" width="1.4184%" height="15" fill="rgb(250,87,22)" fg:x="710125176" fg:w="11284612"/><text x="89.5094%" y="1231.50"></text></g><g><title>ts_parser_parse_with_options (11,284,612 samples, 1.42%)</title><rect x="89.2594%" y="1205" width="1.4184%" height="15" fill="rgb(239,43,17)" fg:x="710125176" fg:w="11284612"/><text x="89.5094%" y="1215.50"></text></g><g><title>ts_parser_parse (11,284,612 samples, 1.42%)</title><rect x="89.2594%" y="1189" width="1.4184%" height="15" fill="rgb(231,177,25)" fg:x="710125176" fg:w="11284612"/><text x="89.5094%" y="1199.50"></text></g><g><title>ts_parser__condense_stack (3,961,762 samples, 0.50%)</title><rect x="90.1798%" y="1173" width="0.4980%" height="15" fill="rgb(219,179,1)" fg:x="717448026" fg:w="3961762"/><text x="90.4298%" y="1183.50"></text></g><g><title>ts_parser__handle_error (3,961,762 samples, 0.50%)</title><rect x="90.1798%" y="1157" width="0.4980%" height="15" fill="rgb(238,219,53)" fg:x="717448026" fg:w="3961762"/><text x="90.4298%" y="1167.50"></text></g><g><title>ts_stack_merge (3,961,762 samples, 0.50%)</title><rect x="90.1798%" y="1141" width="0.4980%" height="15" fill="rgb(232,167,36)" fg:x="717448026" fg:w="3961762"/><text x="90.4298%" y="1151.50"></text></g><g><title>ts_stack_can_merge (3,961,762 samples, 0.50%)</title><rect x="90.1798%" y="1125" width="0.4980%" height="15" fill="rgb(244,19,51)" fg:x="717448026" fg:w="3961762"/><text x="90.4298%" y="1135.50"></text></g><g><title>&lt;core::iter::sources::from_fn::FromFn&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,942,501 samples, 0.50%)</title><rect x="91.1708%" y="1157" width="0.4956%" height="15" fill="rgb(224,6,22)" fg:x="725332185" fg:w="3942501"/><text x="91.4208%" y="1167.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::iter_trans::{{closure}} (3,942,501 samples, 0.50%)</title><rect x="91.1708%" y="1141" width="0.4956%" height="15" fill="rgb(224,145,5)" fg:x="725332185" fg:w="3942501"/><text x="91.4208%" y="1151.50"></text></g><g><title>aho_corasick::dfa::Builder::finish_build_one_start::{{closure}} (3,939,573 samples, 0.50%)</title><rect x="91.6664%" y="1157" width="0.4952%" height="15" fill="rgb(234,130,49)" fg:x="729274686" fg:w="3939573"/><text x="91.9164%" y="1167.50"></text></g><g><title>aho_corasick::util::alphabet::ByteClasses::get (3,819,724 samples, 0.48%)</title><rect x="92.1616%" y="1157" width="0.4801%" height="15" fill="rgb(254,6,2)" fg:x="733214259" fg:w="3819724"/><text x="92.4116%" y="1167.50"></text></g><g><title>aho_corasick::dfa::Builder::finish_build_one_start (19,301,257 samples, 2.43%)</title><rect x="90.6778%" y="1189" width="2.4261%" height="15" fill="rgb(208,96,46)" fg:x="721409788" fg:w="19301257"/><text x="90.9278%" y="1199.50">ah..</text></g><g><title>aho_corasick::dfa::sparse_iter (19,301,257 samples, 2.43%)</title><rect x="90.6778%" y="1173" width="2.4261%" height="15" fill="rgb(239,3,39)" fg:x="721409788" fg:w="19301257"/><text x="90.9278%" y="1183.50">ah..</text></g><g><title>core::cmp::PartialEq::ne (3,677,062 samples, 0.46%)</title><rect x="92.6417%" y="1157" width="0.4622%" height="15" fill="rgb(233,210,1)" fg:x="737033983" fg:w="3677062"/><text x="92.8917%" y="1167.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3,677,062 samples, 0.46%)</title><rect x="92.6417%" y="1141" width="0.4622%" height="15" fill="rgb(244,137,37)" fg:x="737033983" fg:w="3677062"/><text x="92.8917%" y="1151.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build_auto (23,238,178 samples, 2.92%)</title><rect x="90.6778%" y="1221" width="2.9209%" height="15" fill="rgb(240,136,2)" fg:x="721409788" fg:w="23238178"/><text x="90.9278%" y="1231.50">ah..</text></g><g><title>aho_corasick::dfa::Builder::build_from_noncontiguous (23,238,178 samples, 2.92%)</title><rect x="90.6778%" y="1205" width="2.9209%" height="15" fill="rgb(239,18,37)" fg:x="721409788" fg:w="23238178"/><text x="90.9278%" y="1215.50">ah..</text></g><g><title>alloc::vec::from_elem (3,936,921 samples, 0.49%)</title><rect x="93.1039%" y="1189" width="0.4949%" height="15" fill="rgb(218,185,22)" fg:x="740711045" fg:w="3936921"/><text x="93.3539%" y="1199.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3,936,921 samples, 0.49%)</title><rect x="93.1039%" y="1173" width="0.4949%" height="15" fill="rgb(225,218,4)" fg:x="740711045" fg:w="3936921"/><text x="93.3539%" y="1183.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (3,936,921 samples, 0.49%)</title><rect x="93.1039%" y="1157" width="0.4949%" height="15" fill="rgb(230,182,32)" fg:x="740711045" fg:w="3936921"/><text x="93.3539%" y="1167.50"></text></g><g><title>core::ptr::write (3,936,921 samples, 0.49%)</title><rect x="93.1039%" y="1141" width="0.4949%" height="15" fill="rgb(242,56,43)" fg:x="740711045" fg:w="3936921"/><text x="93.3539%" y="1151.50"></text></g><g><title>__memset_avx2_unaligned_erms (3,936,921 samples, 0.49%)</title><rect x="93.1039%" y="1125" width="0.4949%" height="15" fill="rgb(233,99,24)" fg:x="740711045" fg:w="3936921"/><text x="93.3539%" y="1135.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::add_dead_state_loop (3,900,787 samples, 0.49%)</title><rect x="94.0520%" y="1189" width="0.4903%" height="15" fill="rgb(234,209,42)" fg:x="748254568" fg:w="3900787"/><text x="94.3020%" y="1199.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::init_full_state (3,900,787 samples, 0.49%)</title><rect x="94.0520%" y="1173" width="0.4903%" height="15" fill="rgb(227,7,12)" fg:x="748254568" fg:w="3900787"/><text x="94.3020%" y="1183.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::add_unanchored_start_state_loop (3,934,196 samples, 0.49%)</title><rect x="94.5424%" y="1189" width="0.4945%" height="15" fill="rgb(245,203,43)" fg:x="752155355" fg:w="3934196"/><text x="94.7924%" y="1199.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::fill_failure_transitions (7,807,282 samples, 0.98%)</title><rect x="95.0369%" y="1189" width="0.9813%" height="15" fill="rgb(238,205,33)" fg:x="756089551" fg:w="7807282"/><text x="95.2869%" y="1199.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::next_link (3,934,786 samples, 0.49%)</title><rect x="95.5236%" y="1173" width="0.4946%" height="15" fill="rgb(231,56,7)" fg:x="759962047" fg:w="3934786"/><text x="95.7736%" y="1183.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::init_unanchored_start_state (7,626,954 samples, 0.96%)</title><rect x="96.0182%" y="1189" width="0.9587%" height="15" fill="rgb(244,186,29)" fg:x="763896833" fg:w="7626954"/><text x="96.2682%" y="1199.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::init_full_state (7,626,954 samples, 0.96%)</title><rect x="96.0182%" y="1173" width="0.9587%" height="15" fill="rgb(234,111,31)" fg:x="763896833" fg:w="7626954"/><text x="96.2682%" y="1183.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::alloc_transition (7,626,954 samples, 0.96%)</title><rect x="96.0182%" y="1157" width="0.9587%" height="15" fill="rgb(241,149,10)" fg:x="763896833" fg:w="7626954"/><text x="96.2682%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7,626,954 samples, 0.96%)</title><rect x="96.0182%" y="1141" width="0.9587%" height="15" fill="rgb(249,206,44)" fg:x="763896833" fg:w="7626954"/><text x="96.2682%" y="1151.50"></text></g><g><title>core::ptr::write (7,626,954 samples, 0.96%)</title><rect x="96.0182%" y="1125" width="0.9587%" height="15" fill="rgb(251,153,30)" fg:x="763896833" fg:w="7626954"/><text x="96.2682%" y="1135.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::set_anchored_start_state (7,764,171 samples, 0.98%)</title><rect x="96.9769%" y="1189" width="0.9759%" height="15" fill="rgb(239,152,38)" fg:x="771523787" fg:w="7764171"/><text x="97.2269%" y="1199.50"></text></g><g><title>aho_corasick::util::primitives::&lt;impl core::ops::index::IndexMut&lt;aho_corasick::util::primitives::StateID&gt; for alloc::vec::Vec&lt;T&gt;&gt;::index_mut (3,928,187 samples, 0.49%)</title><rect x="97.9528%" y="1125" width="0.4938%" height="15" fill="rgb(249,139,47)" fg:x="779287958" fg:w="3928187"/><text x="98.2028%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3,928,187 samples, 0.49%)</title><rect x="97.9528%" y="1109" width="0.4938%" height="15" fill="rgb(244,64,35)" fg:x="779287958" fg:w="3928187"/><text x="98.2028%" y="1119.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3,928,187 samples, 0.49%)</title><rect x="97.9528%" y="1093" width="0.4938%" height="15" fill="rgb(216,46,15)" fg:x="779287958" fg:w="3928187"/><text x="98.2028%" y="1103.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3,928,187 samples, 0.49%)</title><rect x="97.9528%" y="1077" width="0.4938%" height="15" fill="rgb(250,74,19)" fg:x="779287958" fg:w="3928187"/><text x="98.2028%" y="1087.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasick::new (65,482,717 samples, 8.23%)</title><rect x="90.6778%" y="1253" width="8.2309%" height="15" fill="rgb(249,42,33)" fg:x="721409788" fg:w="65482717"/><text x="90.9278%" y="1263.50">aho_corasic..</text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build (65,482,717 samples, 8.23%)</title><rect x="90.6778%" y="1237" width="8.2309%" height="15" fill="rgb(242,149,17)" fg:x="721409788" fg:w="65482717"/><text x="90.9278%" y="1247.50">aho_corasic..</text></g><g><title>aho_corasick::nfa::noncontiguous::Builder::build (42,244,539 samples, 5.31%)</title><rect x="93.5987%" y="1221" width="5.3099%" height="15" fill="rgb(244,29,21)" fg:x="744647966" fg:w="42244539"/><text x="93.8487%" y="1231.50">aho_co..</text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::compile (42,244,539 samples, 5.31%)</title><rect x="93.5987%" y="1205" width="5.3099%" height="15" fill="rgb(220,130,37)" fg:x="744647966" fg:w="42244539"/><text x="93.8487%" y="1215.50">aho_co..</text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::shuffle (7,604,547 samples, 0.96%)</title><rect x="97.9528%" y="1189" width="0.9559%" height="15" fill="rgb(211,67,2)" fg:x="779287958" fg:w="7604547"/><text x="98.2028%" y="1199.50"></text></g><g><title>aho_corasick::util::remapper::Remapper::remap (7,604,547 samples, 0.96%)</title><rect x="97.9528%" y="1173" width="0.9559%" height="15" fill="rgb(235,68,52)" fg:x="779287958" fg:w="7604547"/><text x="98.2028%" y="1183.50"></text></g><g><title>&lt;aho_corasick::nfa::noncontiguous::NFA as aho_corasick::util::remapper::Remappable&gt;::remap (7,604,547 samples, 0.96%)</title><rect x="97.9528%" y="1157" width="0.9559%" height="15" fill="rgb(246,142,3)" fg:x="779287958" fg:w="7604547"/><text x="98.2028%" y="1167.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::remap (7,604,547 samples, 0.96%)</title><rect x="97.9528%" y="1141" width="0.9559%" height="15" fill="rgb(241,25,7)" fg:x="779287958" fg:w="7604547"/><text x="98.2028%" y="1151.50"></text></g><g><title>aho_corasick::util::remapper::Remapper::remap::{{closure}} (3,676,360 samples, 0.46%)</title><rect x="98.4466%" y="1125" width="0.4621%" height="15" fill="rgb(242,119,39)" fg:x="783216145" fg:w="3676360"/><text x="98.6966%" y="1135.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1589" width="99.4026%" height="15" fill="rgb(241,98,45)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1599.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1573" width="99.4026%" height="15" fill="rgb(254,28,30)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1583.50">__libc_start_call_main</text></g><g><title>main (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1557" width="99.4026%" height="15" fill="rgb(241,142,54)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1567.50">main</text></g><g><title>std::rt::lang_start_internal (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1541" width="99.4026%" height="15" fill="rgb(222,85,15)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1551.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1525" width="99.4026%" height="15" fill="rgb(210,85,47)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1535.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1509" width="99.4026%" height="15" fill="rgb(224,206,25)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1519.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1493" width="99.4026%" height="15" fill="rgb(243,201,19)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1503.50">core::ops::function::FnOnce::call_once</text></g><g><title>kaka_nest::main (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1477" width="99.4026%" height="15" fill="rgb(236,59,4)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1487.50">kaka_nest::main</text></g><g><title>kaka_nest::get_markdown::get_blogs (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1461" width="99.4026%" height="15" fill="rgb(254,179,45)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1471.50">kaka_nest::get_markdown::get_blogs</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1445" width="99.4026%" height="15" fill="rgb(226,14,10)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1455.50">std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1429" width="99.4026%" height="15" fill="rgb(244,27,41)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1439.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1413" width="99.4026%" height="15" fill="rgb(235,35,32)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1423.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::{{closure}} (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1397" width="99.4026%" height="15" fill="rgb(218,68,31)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1407.50">std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::{{closure}}</text></g><g><title>kaka_nest::get_markdown::get_blogs::{{closure}} (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1381" width="99.4026%" height="15" fill="rgb(207,120,37)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1391.50">kaka_nest::get_markdown::get_blogs::{{closure}}</text></g><g><title>pulldown_cmark::html::push_html (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1365" width="99.4026%" height="15" fill="rgb(227,98,0)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1375.50">pulldown_cmark::html::push_html</text></g><g><title>pulldown_cmark::html::write_html_fmt (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1349" width="99.4026%" height="15" fill="rgb(207,7,3)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1359.50">pulldown_cmark::html::write_html_fmt</text></g><g><title>pulldown_cmark::html::HtmlWriter&lt;I,W&gt;::run (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1333" width="99.4026%" height="15" fill="rgb(206,98,19)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1343.50">pulldown_cmark::html::HtmlWriter&lt;I,W&gt;::run</text></g><g><title>&lt;kaka_nest::pullmark_parsers::format_blockquotes::FormatBlockquotes&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (790,822,435 samples, 99.40%)</title><rect x="0.0000%" y="1317" width="99.4026%" height="15" fill="rgb(217,5,26)" fg:x="0" fg:w="790822435"/><text x="0.2500%" y="1327.50">&lt;kaka_nest::pullmark_parsers::format_blockquotes::FormatBlockquotes&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;kaka_nest::pullmark_parsers::highlight_codeblocks::HighlightCodeblocks&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (789,456,756 samples, 99.23%)</title><rect x="0.1717%" y="1301" width="99.2310%" height="15" fill="rgb(235,190,38)" fg:x="1365679" fg:w="789456756"/><text x="0.4217%" y="1311.50">&lt;kaka_nest::pullmark_parsers::highlight_codeblocks::HighlightCodeblocks&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>syntastica::renderer::render (69,412,647 samples, 8.72%)</title><rect x="90.6778%" y="1285" width="8.7248%" height="15" fill="rgb(247,86,24)" fg:x="721409788" fg:w="69412647"/><text x="90.9278%" y="1295.50">syntastica::..</text></g><g><title>&lt;syntastica::renderer::HtmlRenderer as syntastica::renderer::Renderer&gt;::escape (69,412,647 samples, 8.72%)</title><rect x="90.6778%" y="1269" width="8.7248%" height="15" fill="rgb(205,101,16)" fg:x="721409788" fg:w="69412647"/><text x="90.9278%" y="1279.50">&lt;syntastica:..</text></g><g><title>core::ptr::drop_in_place&lt;aho_corasick::ahocorasick::AhoCorasick&gt; (3,929,930 samples, 0.49%)</title><rect x="98.9087%" y="1253" width="0.4940%" height="15" fill="rgb(246,168,33)" fg:x="786892505" fg:w="3929930"/><text x="99.1587%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;dyn aho_corasick::ahocorasick::AcAutomaton&gt;&gt; (3,929,930 samples, 0.49%)</title><rect x="98.9087%" y="1237" width="0.4940%" height="15" fill="rgb(231,114,1)" fg:x="786892505" fg:w="3929930"/><text x="99.1587%" y="1247.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,929,930 samples, 0.49%)</title><rect x="98.9087%" y="1221" width="0.4940%" height="15" fill="rgb(207,184,53)" fg:x="786892505" fg:w="3929930"/><text x="99.1587%" y="1231.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3,929,930 samples, 0.49%)</title><rect x="98.9087%" y="1205" width="0.4940%" height="15" fill="rgb(224,95,51)" fg:x="786892505" fg:w="3929930"/><text x="99.1587%" y="1215.50"></text></g><g><title>core::ptr::drop_in_place&lt;dyn aho_corasick::util::prefilter::PrefilterI&gt; (3,929,930 samples, 0.49%)</title><rect x="98.9087%" y="1189" width="0.4940%" height="15" fill="rgb(212,188,45)" fg:x="786892505" fg:w="3929930"/><text x="99.1587%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;aho_corasick::dfa::DFA&gt; (3,929,930 samples, 0.49%)</title><rect x="98.9087%" y="1173" width="0.4940%" height="15" fill="rgb(223,154,38)" fg:x="786892505" fg:w="3929930"/><text x="99.1587%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;aho_corasick::util::primitives::StateID&gt;&gt; (3,929,930 samples, 0.49%)</title><rect x="98.9087%" y="1157" width="0.4940%" height="15" fill="rgb(251,22,52)" fg:x="786892505" fg:w="3929930"/><text x="99.1587%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;aho_corasick::util::primitives::StateID&gt;&gt; (3,929,930 samples, 0.49%)</title><rect x="98.9087%" y="1141" width="0.4940%" height="15" fill="rgb(229,209,22)" fg:x="786892505" fg:w="3929930"/><text x="99.1587%" y="1151.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,929,930 samples, 0.49%)</title><rect x="98.9087%" y="1125" width="0.4940%" height="15" fill="rgb(234,138,34)" fg:x="786892505" fg:w="3929930"/><text x="99.1587%" y="1135.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,929,930 samples, 0.49%)</title><rect x="98.9087%" y="1109" width="0.4940%" height="15" fill="rgb(212,95,11)" fg:x="786892505" fg:w="3929930"/><text x="99.1587%" y="1119.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,929,930 samples, 0.49%)</title><rect x="98.9087%" y="1093" width="0.4940%" height="15" fill="rgb(240,179,47)" fg:x="786892505" fg:w="3929930"/><text x="99.1587%" y="1103.50"></text></g><g><title>alloc::alloc::dealloc (3,929,930 samples, 0.49%)</title><rect x="98.9087%" y="1077" width="0.4940%" height="15" fill="rgb(240,163,11)" fg:x="786892505" fg:w="3929930"/><text x="99.1587%" y="1087.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3,929,930 samples, 0.49%)</title><rect x="98.9087%" y="1061" width="0.4940%" height="15" fill="rgb(236,37,12)" fg:x="786892505" fg:w="3929930"/><text x="99.1587%" y="1071.50"></text></g><g><title>_start (791,323,939 samples, 99.47%)</title><rect x="0.0000%" y="1605" width="99.4657%" height="15" fill="rgb(232,164,16)" fg:x="0" fg:w="791323939"/><text x="0.2500%" y="1615.50">_start</text></g><g><title>_dl_start (501,504 samples, 0.06%)</title><rect x="99.4026%" y="1589" width="0.0630%" height="15" fill="rgb(244,205,15)" fg:x="790822435" fg:w="501504"/><text x="99.6526%" y="1599.50"></text></g><g><title>_dl_sysdep_start (501,504 samples, 0.06%)</title><rect x="99.4026%" y="1573" width="0.0630%" height="15" fill="rgb(223,117,47)" fg:x="790822435" fg:w="501504"/><text x="99.6526%" y="1583.50"></text></g><g><title>dl_main (501,504 samples, 0.06%)</title><rect x="99.4026%" y="1557" width="0.0630%" height="15" fill="rgb(244,107,35)" fg:x="790822435" fg:w="501504"/><text x="99.6526%" y="1567.50"></text></g><g><title>_dl_relocate_object (501,504 samples, 0.06%)</title><rect x="99.4026%" y="1541" width="0.0630%" height="15" fill="rgb(205,140,8)" fg:x="790822435" fg:w="501504"/><text x="99.6526%" y="1551.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3,749,534 samples, 0.47%)</title><rect x="99.4657%" y="1605" width="0.4713%" height="15" fill="rgb(228,84,46)" fg:x="791323939" fg:w="3749534"/><text x="99.7157%" y="1615.50"></text></g><g><title>all (795,574,977 samples, 100%)</title><rect x="0.0000%" y="1637" width="100.0000%" height="15" fill="rgb(254,188,9)" fg:x="0" fg:w="795574977"/><text x="0.2500%" y="1647.50"></text></g><g><title>kaka-nest (795,574,977 samples, 100.00%)</title><rect x="0.0000%" y="1621" width="100.0000%" height="15" fill="rgb(206,112,54)" fg:x="0" fg:w="795574977"/><text x="0.2500%" y="1631.50">kaka-nest</text></g><g><title>std::sys::random::linux::getrandom (501,504 samples, 0.06%)</title><rect x="99.9370%" y="1605" width="0.0630%" height="15" fill="rgb(216,84,49)" fg:x="795073473" fg:w="501504"/><text x="100.1870%" y="1615.50"></text></g></svg></svg>