<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1670" onload="init(evt)" viewBox="0 0 1200 1670" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1670" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1653.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1653.00"> </text><svg id="frames" x="10" width="1180" total_samples="723234334"><g><title>[unknown] (2,532,673 samples, 0.35%)</title><rect x="0.0000%" y="1589" width="0.3502%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2532673"/><text x="0.2500%" y="1599.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2,532,673 samples, 0.35%)</title><rect x="0.0000%" y="1573" width="0.3502%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2532673"/><text x="0.2500%" y="1583.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="1141" width="0.0719%" height="15" fill="rgb(221,193,54)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="1151.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::handlebars (520,367 samples, 0.07%)</title><rect x="0.3502%" y="1125" width="0.0719%" height="15" fill="rgb(248,212,6)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="1135.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (520,367 samples, 0.07%)</title><rect x="0.3502%" y="1109" width="0.0719%" height="15" fill="rgb(208,68,35)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="1119.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::handlebars::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="1093" width="0.0719%" height="15" fill="rgb(232,128,0)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="1103.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template (520,367 samples, 0.07%)</title><rect x="0.3502%" y="1077" width="0.0719%" height="15" fill="rgb(207,160,47)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="1087.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::rule (520,367 samples, 0.07%)</title><rect x="0.3502%" y="1061" width="0.0719%" height="15" fill="rgb(228,23,34)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="1071.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="1045" width="0.0719%" height="15" fill="rgb(218,30,26)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="1055.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (520,367 samples, 0.07%)</title><rect x="0.3502%" y="1029" width="0.0719%" height="15" fill="rgb(220,122,19)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="1039.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="1013" width="0.0719%" height="15" fill="rgb(250,228,42)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="1023.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::optional (520,367 samples, 0.07%)</title><rect x="0.3502%" y="997" width="0.0719%" height="15" fill="rgb(240,193,28)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="1007.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="981" width="0.0719%" height="15" fill="rgb(216,20,37)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="991.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (520,367 samples, 0.07%)</title><rect x="0.3502%" y="965" width="0.0719%" height="15" fill="rgb(206,188,39)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="975.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}}::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="949" width="0.0719%" height="15" fill="rgb(217,207,13)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="959.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::repeat (520,367 samples, 0.07%)</title><rect x="0.3502%" y="933" width="0.0719%" height="15" fill="rgb(231,73,38)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="943.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="917" width="0.0719%" height="15" fill="rgb(225,20,46)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="927.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (520,367 samples, 0.07%)</title><rect x="0.3502%" y="901" width="0.0719%" height="15" fill="rgb(210,31,41)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="911.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="885" width="0.0719%" height="15" fill="rgb(221,200,47)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="895.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (520,367 samples, 0.07%)</title><rect x="0.3502%" y="869" width="0.0719%" height="15" fill="rgb(226,26,5)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="879.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="853" width="0.0719%" height="15" fill="rgb(249,33,26)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="863.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or_else (520,367 samples, 0.07%)</title><rect x="0.3502%" y="837" width="0.0719%" height="15" fill="rgb(235,183,28)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="847.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="821" width="0.0719%" height="15" fill="rgb(221,5,38)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="831.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::helper_block (520,367 samples, 0.07%)</title><rect x="0.3502%" y="805" width="0.0719%" height="15" fill="rgb(247,18,42)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="815.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (520,367 samples, 0.07%)</title><rect x="0.3502%" y="789" width="0.0719%" height="15" fill="rgb(241,131,45)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="799.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::helper_block::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="773" width="0.0719%" height="15" fill="rgb(249,31,29)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="783.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (520,367 samples, 0.07%)</title><rect x="0.3502%" y="757" width="0.0719%" height="15" fill="rgb(225,111,53)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="767.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::helper_block::{{closure}}::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="741" width="0.0719%" height="15" fill="rgb(238,160,17)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="751.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template (520,367 samples, 0.07%)</title><rect x="0.3502%" y="725" width="0.0719%" height="15" fill="rgb(214,148,48)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="735.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::rule (520,367 samples, 0.07%)</title><rect x="0.3502%" y="709" width="0.0719%" height="15" fill="rgb(232,36,49)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="719.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="693" width="0.0719%" height="15" fill="rgb(209,103,24)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="703.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (520,367 samples, 0.07%)</title><rect x="0.3502%" y="677" width="0.0719%" height="15" fill="rgb(229,88,8)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="687.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="661" width="0.0719%" height="15" fill="rgb(213,181,19)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="671.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::optional (520,367 samples, 0.07%)</title><rect x="0.3502%" y="645" width="0.0719%" height="15" fill="rgb(254,191,54)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="655.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="629" width="0.0719%" height="15" fill="rgb(241,83,37)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="639.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text (520,367 samples, 0.07%)</title><rect x="0.3502%" y="613" width="0.0719%" height="15" fill="rgb(233,36,39)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="623.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::atomic (520,367 samples, 0.07%)</title><rect x="0.3502%" y="597" width="0.0719%" height="15" fill="rgb(226,3,54)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="607.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="581" width="0.0719%" height="15" fill="rgb(245,192,40)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="591.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::rule (520,367 samples, 0.07%)</title><rect x="0.3502%" y="565" width="0.0719%" height="15" fill="rgb(238,167,29)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="575.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}}::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="549" width="0.0719%" height="15" fill="rgb(232,182,51)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="559.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (520,367 samples, 0.07%)</title><rect x="0.3502%" y="533" width="0.0719%" height="15" fill="rgb(231,60,39)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="543.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}}::{{closure}}::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="517" width="0.0719%" height="15" fill="rgb(208,69,12)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (520,367 samples, 0.07%)</title><rect x="0.3502%" y="501" width="0.0719%" height="15" fill="rgb(235,93,37)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="511.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}}::{{closure}}::{{closure}}::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="485" width="0.0719%" height="15" fill="rgb(213,116,39)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="495.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::repeat (520,367 samples, 0.07%)</title><rect x="0.3502%" y="469" width="0.0719%" height="15" fill="rgb(222,207,29)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="479.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="453" width="0.0719%" height="15" fill="rgb(206,96,30)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or_else (520,367 samples, 0.07%)</title><rect x="0.3502%" y="437" width="0.0719%" height="15" fill="rgb(218,138,4)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="447.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (520,367 samples, 0.07%)</title><rect x="0.3502%" y="421" width="0.0719%" height="15" fill="rgb(250,191,14)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="431.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (520,367 samples, 0.07%)</title><rect x="0.3502%" y="405" width="0.0719%" height="15" fill="rgb(239,60,40)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="415.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::inc_call_check_limit (520,367 samples, 0.07%)</title><rect x="0.3502%" y="389" width="0.0719%" height="15" fill="rgb(206,27,48)" fg:x="2532673" fg:w="520367"/><text x="0.6002%" y="399.50"></text></g><g><title>&lt;kaka_nest::HANDLEBARS as core::ops::deref::Deref&gt;::deref (993,384 samples, 0.14%)</title><rect x="0.3502%" y="1365" width="0.1374%" height="15" fill="rgb(225,35,8)" fg:x="2532673" fg:w="993384"/><text x="0.6002%" y="1375.50"></text></g><g><title>&lt;kaka_nest::HANDLEBARS as core::ops::deref::Deref&gt;::deref::__stability (993,384 samples, 0.14%)</title><rect x="0.3502%" y="1349" width="0.1374%" height="15" fill="rgb(250,213,24)" fg:x="2532673" fg:w="993384"/><text x="0.6002%" y="1359.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (993,384 samples, 0.14%)</title><rect x="0.3502%" y="1333" width="0.1374%" height="15" fill="rgb(247,123,22)" fg:x="2532673" fg:w="993384"/><text x="0.6002%" y="1343.50"></text></g><g><title>std::sync::poison::once::Once::call_once (993,384 samples, 0.14%)</title><rect x="0.3502%" y="1317" width="0.1374%" height="15" fill="rgb(231,138,38)" fg:x="2532673" fg:w="993384"/><text x="0.6002%" y="1327.50"></text></g><g><title>std::sys::sync::once::futex::Once::call (993,384 samples, 0.14%)</title><rect x="0.3502%" y="1301" width="0.1374%" height="15" fill="rgb(231,145,46)" fg:x="2532673" fg:w="993384"/><text x="0.6002%" y="1311.50"></text></g><g><title>std::sync::poison::once::Once::call_once::{{closure}} (993,384 samples, 0.14%)</title><rect x="0.3502%" y="1285" width="0.1374%" height="15" fill="rgb(251,118,11)" fg:x="2532673" fg:w="993384"/><text x="0.6002%" y="1295.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (993,384 samples, 0.14%)</title><rect x="0.3502%" y="1269" width="0.1374%" height="15" fill="rgb(217,147,25)" fg:x="2532673" fg:w="993384"/><text x="0.6002%" y="1279.50"></text></g><g><title>core::ops::function::FnOnce::call_once (993,384 samples, 0.14%)</title><rect x="0.3502%" y="1253" width="0.1374%" height="15" fill="rgb(247,81,37)" fg:x="2532673" fg:w="993384"/><text x="0.6002%" y="1263.50"></text></g><g><title>&lt;kaka_nest::HANDLEBARS as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (993,384 samples, 0.14%)</title><rect x="0.3502%" y="1237" width="0.1374%" height="15" fill="rgb(209,12,38)" fg:x="2532673" fg:w="993384"/><text x="0.6002%" y="1247.50"></text></g><g><title>handlebars::registry::Registry::register_template_file (993,384 samples, 0.14%)</title><rect x="0.3502%" y="1221" width="0.1374%" height="15" fill="rgb(227,1,9)" fg:x="2532673" fg:w="993384"/><text x="0.6002%" y="1231.50"></text></g><g><title>handlebars::registry::Registry::register_template_string (993,384 samples, 0.14%)</title><rect x="0.3502%" y="1205" width="0.1374%" height="15" fill="rgb(248,47,43)" fg:x="2532673" fg:w="993384"/><text x="0.6002%" y="1215.50"></text></g><g><title>handlebars::template::Template::compile2 (993,384 samples, 0.14%)</title><rect x="0.3502%" y="1189" width="0.1374%" height="15" fill="rgb(221,10,30)" fg:x="2532673" fg:w="993384"/><text x="0.6002%" y="1199.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse (993,384 samples, 0.14%)</title><rect x="0.3502%" y="1173" width="0.1374%" height="15" fill="rgb(210,229,1)" fg:x="2532673" fg:w="993384"/><text x="0.6002%" y="1183.50"></text></g><g><title>pest::parser_state::state (993,384 samples, 0.14%)</title><rect x="0.3502%" y="1157" width="0.1374%" height="15" fill="rgb(222,148,37)" fg:x="2532673" fg:w="993384"/><text x="0.6002%" y="1167.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::new (473,017 samples, 0.07%)</title><rect x="0.4221%" y="1141" width="0.0654%" height="15" fill="rgb(234,67,33)" fg:x="3053040" fg:w="473017"/><text x="0.6721%" y="1151.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (473,017 samples, 0.07%)</title><rect x="0.4221%" y="1125" width="0.0654%" height="15" fill="rgb(247,98,35)" fg:x="3053040" fg:w="473017"/><text x="0.6721%" y="1135.50"></text></g><g><title>alloc::alloc::exchange_malloc (473,017 samples, 0.07%)</title><rect x="0.4221%" y="1109" width="0.0654%" height="15" fill="rgb(247,138,52)" fg:x="3053040" fg:w="473017"/><text x="0.6721%" y="1119.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (473,017 samples, 0.07%)</title><rect x="0.4221%" y="1093" width="0.0654%" height="15" fill="rgb(213,79,30)" fg:x="3053040" fg:w="473017"/><text x="0.6721%" y="1103.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (473,017 samples, 0.07%)</title><rect x="0.4221%" y="1077" width="0.0654%" height="15" fill="rgb(246,177,23)" fg:x="3053040" fg:w="473017"/><text x="0.6721%" y="1087.50"></text></g><g><title>alloc::alloc::alloc (473,017 samples, 0.07%)</title><rect x="0.4221%" y="1061" width="0.0654%" height="15" fill="rgb(230,62,27)" fg:x="3053040" fg:w="473017"/><text x="0.6721%" y="1071.50"></text></g><g><title>malloc (473,017 samples, 0.07%)</title><rect x="0.4221%" y="1045" width="0.0654%" height="15" fill="rgb(216,154,8)" fg:x="3053040" fg:w="473017"/><text x="0.6721%" y="1055.50"></text></g><g><title>_int_malloc (473,017 samples, 0.07%)</title><rect x="0.4221%" y="1029" width="0.0654%" height="15" fill="rgb(244,35,45)" fg:x="3053040" fg:w="473017"/><text x="0.6721%" y="1039.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,558,708 samples, 0.35%)</title><rect x="0.4875%" y="1093" width="0.3538%" height="15" fill="rgb(251,115,12)" fg:x="3526057" fg:w="2558708"/><text x="0.7375%" y="1103.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,558,708 samples, 0.35%)</title><rect x="0.4875%" y="1077" width="0.3538%" height="15" fill="rgb(240,54,50)" fg:x="3526057" fg:w="2558708"/><text x="0.7375%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,558,708 samples, 0.35%)</title><rect x="0.4875%" y="1061" width="0.3538%" height="15" fill="rgb(233,84,52)" fg:x="3526057" fg:w="2558708"/><text x="0.7375%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,558,708 samples, 0.35%)</title><rect x="0.4875%" y="1045" width="0.3538%" height="15" fill="rgb(207,117,47)" fg:x="3526057" fg:w="2558708"/><text x="0.7375%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,558,708 samples, 0.35%)</title><rect x="0.4875%" y="1029" width="0.3538%" height="15" fill="rgb(249,43,39)" fg:x="3526057" fg:w="2558708"/><text x="0.7375%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2,558,708 samples, 0.35%)</title><rect x="0.4875%" y="1013" width="0.3538%" height="15" fill="rgb(209,38,44)" fg:x="3526057" fg:w="2558708"/><text x="0.7375%" y="1023.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,558,708 samples, 0.35%)</title><rect x="0.4875%" y="997" width="0.3538%" height="15" fill="rgb(236,212,23)" fg:x="3526057" fg:w="2558708"/><text x="0.7375%" y="1007.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,558,708 samples, 0.35%)</title><rect x="0.4875%" y="981" width="0.3538%" height="15" fill="rgb(242,79,21)" fg:x="3526057" fg:w="2558708"/><text x="0.7375%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2,558,708 samples, 0.35%)</title><rect x="0.4875%" y="965" width="0.3538%" height="15" fill="rgb(211,96,35)" fg:x="3526057" fg:w="2558708"/><text x="0.7375%" y="975.50"></text></g><g><title>tree_sitter::Query::from_raw_parts (4,989,395 samples, 0.69%)</title><rect x="0.8413%" y="1077" width="0.6899%" height="15" fill="rgb(253,215,40)" fg:x="6084765" fg:w="4989395"/><text x="1.0913%" y="1087.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (4,989,395 samples, 0.69%)</title><rect x="0.8413%" y="1061" width="0.6899%" height="15" fill="rgb(211,81,21)" fg:x="6084765" fg:w="4989395"/><text x="1.0913%" y="1071.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (4,989,395 samples, 0.69%)</title><rect x="0.8413%" y="1045" width="0.6899%" height="15" fill="rgb(208,190,38)" fg:x="6084765" fg:w="4989395"/><text x="1.0913%" y="1055.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (4,989,395 samples, 0.69%)</title><rect x="0.8413%" y="1029" width="0.6899%" height="15" fill="rgb(235,213,38)" fg:x="6084765" fg:w="4989395"/><text x="1.0913%" y="1039.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,989,395 samples, 0.69%)</title><rect x="0.8413%" y="1013" width="0.6899%" height="15" fill="rgb(237,122,38)" fg:x="6084765" fg:w="4989395"/><text x="1.0913%" y="1023.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,989,395 samples, 0.69%)</title><rect x="0.8413%" y="997" width="0.6899%" height="15" fill="rgb(244,218,35)" fg:x="6084765" fg:w="4989395"/><text x="1.0913%" y="1007.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4,989,395 samples, 0.69%)</title><rect x="0.8413%" y="981" width="0.6899%" height="15" fill="rgb(240,68,47)" fg:x="6084765" fg:w="4989395"/><text x="1.0913%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4,989,395 samples, 0.69%)</title><rect x="0.8413%" y="965" width="0.6899%" height="15" fill="rgb(210,16,53)" fg:x="6084765" fg:w="4989395"/><text x="1.0913%" y="975.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (4,989,395 samples, 0.69%)</title><rect x="0.8413%" y="949" width="0.6899%" height="15" fill="rgb(235,124,12)" fg:x="6084765" fg:w="4989395"/><text x="1.0913%" y="959.50"></text></g><g><title>ts_lookahead_iterator__next (5,994,123 samples, 0.83%)</title><rect x="3.2063%" y="1045" width="0.8288%" height="15" fill="rgb(224,169,11)" fg:x="23189350" fg:w="5994123"/><text x="3.4563%" y="1055.50"></text></g><g><title>_array__splice (2,556,603 samples, 0.35%)</title><rect x="46.3355%" y="1029" width="0.3535%" height="15" fill="rgb(250,166,2)" fg:x="335113949" fg:w="2556603"/><text x="46.5855%" y="1039.50"></text></g><g><title>memmove (2,556,603 samples, 0.35%)</title><rect x="46.3355%" y="1013" width="0.3535%" height="15" fill="rgb(242,216,29)" fg:x="335113949" fg:w="2556603"/><text x="46.5855%" y="1023.50"></text></g><g><title>analysis_state__compare_position (7,679,858 samples, 1.06%)</title><rect x="46.6890%" y="1029" width="1.0619%" height="15" fill="rgb(230,116,27)" fg:x="337670552" fg:w="7679858"/><text x="46.9390%" y="1039.50"></text></g><g><title>analysis_state__recursion_depth (15,284,253 samples, 2.11%)</title><rect x="47.7508%" y="1029" width="2.1133%" height="15" fill="rgb(228,99,48)" fg:x="345350410" fg:w="15284253"/><text x="48.0008%" y="1039.50">a..</text></g><g><title>analysis_state__compare (12,564,931 samples, 1.74%)</title><rect x="56.9129%" y="997" width="1.7373%" height="15" fill="rgb(253,11,6)" fg:x="411613400" fg:w="12564931"/><text x="57.1629%" y="1007.50"></text></g><g><title>analysis_state_set__insert_sorted (101,816,752 samples, 14.08%)</title><rect x="49.8642%" y="1029" width="14.0780%" height="15" fill="rgb(247,143,39)" fg:x="360634663" fg:w="101816752"/><text x="50.1142%" y="1039.50">analysis_state_set__i..</text></g><g><title>analysis_state__compare (58,513,638 samples, 8.09%)</title><rect x="55.8516%" y="1013" width="8.0906%" height="15" fill="rgb(236,97,10)" fg:x="403937777" fg:w="58513638"/><text x="56.1016%" y="1023.50">analysis_st..</text></g><g><title>analysis_state__compare_position (38,273,084 samples, 5.29%)</title><rect x="58.6502%" y="997" width="5.2919%" height="15" fill="rgb(233,208,19)" fg:x="424178331" fg:w="38273084"/><text x="58.9002%" y="1007.50">analys..</text></g><g><title>analysis_subgraph_node__compare (55,956,001 samples, 7.74%)</title><rect x="63.9421%" y="1029" width="7.7369%" height="15" fill="rgb(216,164,2)" fg:x="462451415" fg:w="55956001"/><text x="64.1921%" y="1039.50">analysis_su..</text></g><g><title>ts_language_alias_at (5,181,347 samples, 0.72%)</title><rect x="71.6790%" y="1029" width="0.7164%" height="15" fill="rgb(220,129,5)" fg:x="518407416" fg:w="5181347"/><text x="71.9290%" y="1039.50"></text></g><g><title>ts_language_alias_at (5,181,347 samples, 0.72%)</title><rect x="71.6790%" y="1013" width="0.7164%" height="15" fill="rgb(242,17,10)" fg:x="518407416" fg:w="5181347"/><text x="71.9290%" y="1023.50"></text></g><g><title>ts_language_field_map (5,119,692 samples, 0.71%)</title><rect x="72.3955%" y="1029" width="0.7079%" height="15" fill="rgb(242,107,0)" fg:x="523588763" fg:w="5119692"/><text x="72.6455%" y="1039.50"></text></g><g><title>ts_language_field_map (5,119,692 samples, 0.71%)</title><rect x="72.3955%" y="1013" width="0.7079%" height="15" fill="rgb(251,28,31)" fg:x="523588763" fg:w="5119692"/><text x="72.6455%" y="1023.50"></text></g><g><title>ts_language_lookaheads (2,556,755 samples, 0.35%)</title><rect x="73.1033%" y="1029" width="0.3535%" height="15" fill="rgb(233,223,10)" fg:x="528708455" fg:w="2556755"/><text x="73.3533%" y="1039.50"></text></g><g><title>ts_query__analyze_patterns (597,931,079 samples, 82.67%)</title><rect x="1.5312%" y="1061" width="82.6746%" height="15" fill="rgb(215,21,27)" fg:x="11074160" fg:w="597931079"/><text x="1.7812%" y="1071.50">ts_query__analyze_patterns</text></g><g><title>ts_query__perform_analysis (579,821,766 samples, 80.17%)</title><rect x="4.0351%" y="1045" width="80.1707%" height="15" fill="rgb(232,23,21)" fg:x="29183473" fg:w="579821766"/><text x="4.2851%" y="1055.50">ts_query__perform_analysis</text></g><g><title>ts_lookahead_iterator__next (77,740,029 samples, 10.75%)</title><rect x="73.4569%" y="1029" width="10.7489%" height="15" fill="rgb(244,5,23)" fg:x="531265210" fg:w="77740029"/><text x="73.7069%" y="1039.50">ts_lookahead_ite..</text></g><g><title>ts_query__parse_pattern (889,048 samples, 0.12%)</title><rect x="84.2058%" y="1029" width="0.1229%" height="15" fill="rgb(226,81,46)" fg:x="609005239" fg:w="889048"/><text x="84.4558%" y="1039.50"></text></g><g><title>ts_query__parse_string_literal (889,048 samples, 0.12%)</title><rect x="84.2058%" y="1013" width="0.1229%" height="15" fill="rgb(247,70,30)" fg:x="609005239" fg:w="889048"/><text x="84.4558%" y="1023.50"></text></g><g><title>_array__splice (889,048 samples, 0.12%)</title><rect x="84.2058%" y="997" width="0.1229%" height="15" fill="rgb(212,68,19)" fg:x="609005239" fg:w="889048"/><text x="84.4558%" y="1007.50"></text></g><g><title>&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language (607,099,563 samples, 83.94%)</title><rect x="0.4875%" y="1237" width="83.9423%" height="15" fill="rgb(240,187,13)" fg:x="3526057" fg:w="607099563"/><text x="0.7375%" y="1247.50">&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (607,099,563 samples, 83.94%)</title><rect x="0.4875%" y="1221" width="83.9423%" height="15" fill="rgb(223,113,26)" fg:x="3526057" fg:w="607099563"/><text x="0.7375%" y="1231.50">once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (607,099,563 samples, 83.94%)</title><rect x="0.4875%" y="1205" width="83.9423%" height="15" fill="rgb(206,192,2)" fg:x="3526057" fg:w="607099563"/><text x="0.7375%" y="1215.50">once_cell::imp::OnceCell&lt;T&gt;::initialize</text></g><g><title>once_cell::imp::initialize_or_wait (607,099,563 samples, 83.94%)</title><rect x="0.4875%" y="1189" width="83.9423%" height="15" fill="rgb(241,108,4)" fg:x="3526057" fg:w="607099563"/><text x="0.7375%" y="1199.50">once_cell::imp::initialize_or_wait</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (607,099,563 samples, 83.94%)</title><rect x="0.4875%" y="1173" width="83.9423%" height="15" fill="rgb(247,173,49)" fg:x="3526057" fg:w="607099563"/><text x="0.7375%" y="1183.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (607,099,563 samples, 83.94%)</title><rect x="0.4875%" y="1157" width="83.9423%" height="15" fill="rgb(224,114,35)" fg:x="3526057" fg:w="607099563"/><text x="0.7375%" y="1167.50">once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}}</text></g><g><title>&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language::{{closure}} (607,099,563 samples, 83.94%)</title><rect x="0.4875%" y="1141" width="83.9423%" height="15" fill="rgb(245,159,27)" fg:x="3526057" fg:w="607099563"/><text x="0.7375%" y="1151.50">&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language::{{closure}}</text></g><g><title>syntastica_parsers::Lang::get_config (607,099,563 samples, 83.94%)</title><rect x="0.4875%" y="1125" width="83.9423%" height="15" fill="rgb(245,172,44)" fg:x="3526057" fg:w="607099563"/><text x="0.7375%" y="1135.50">syntastica_parsers::Lang::get_config</text></g><g><title>syntastica_highlight::HighlightConfiguration::new (607,099,563 samples, 83.94%)</title><rect x="0.4875%" y="1109" width="83.9423%" height="15" fill="rgb(236,23,11)" fg:x="3526057" fg:w="607099563"/><text x="0.7375%" y="1119.50">syntastica_highlight::HighlightConfiguration::new</text></g><g><title>tree_sitter::Query::new (604,540,855 samples, 83.59%)</title><rect x="0.8413%" y="1093" width="83.5885%" height="15" fill="rgb(205,117,38)" fg:x="6084765" fg:w="604540855"/><text x="1.0913%" y="1103.50">tree_sitter::Query::new</text></g><g><title>ts_query_new (599,551,460 samples, 82.90%)</title><rect x="1.5312%" y="1077" width="82.8986%" height="15" fill="rgb(237,72,25)" fg:x="11074160" fg:w="599551460"/><text x="1.7812%" y="1087.50">ts_query_new</text></g><g><title>ts_query__parse_pattern (1,620,381 samples, 0.22%)</title><rect x="84.2058%" y="1061" width="0.2240%" height="15" fill="rgb(244,70,9)" fg:x="609005239" fg:w="1620381"/><text x="84.4558%" y="1071.50"></text></g><g><title>ts_query__parse_pattern (1,620,381 samples, 0.22%)</title><rect x="84.2058%" y="1045" width="0.2240%" height="15" fill="rgb(217,125,39)" fg:x="609005239" fg:w="1620381"/><text x="84.4558%" y="1055.50"></text></g><g><title>ts_query__parse_predicate (731,333 samples, 0.10%)</title><rect x="84.3287%" y="1029" width="0.1011%" height="15" fill="rgb(235,36,10)" fg:x="609894287" fg:w="731333"/><text x="84.5787%" y="1039.50"></text></g><g><title>symbol_table_insert_name (731,333 samples, 0.10%)</title><rect x="84.3287%" y="1013" width="0.1011%" height="15" fill="rgb(251,123,47)" fg:x="609894287" fg:w="731333"/><text x="84.5787%" y="1023.50"></text></g><g><title>symbol_table_id_for_name (731,333 samples, 0.10%)</title><rect x="84.3287%" y="997" width="0.1011%" height="15" fill="rgb(221,13,13)" fg:x="609894287" fg:w="731333"/><text x="84.5787%" y="1007.50"></text></g><g><title>__strncmp_avx2 (731,333 samples, 0.10%)</title><rect x="84.3287%" y="981" width="0.1011%" height="15" fill="rgb(238,131,9)" fg:x="609894287" fg:w="731333"/><text x="84.5787%" y="991.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (2,541,561 samples, 0.35%)</title><rect x="84.4298%" y="1205" width="0.3514%" height="15" fill="rgb(211,50,8)" fg:x="610625620" fg:w="2541561"/><text x="84.6798%" y="1215.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (2,541,561 samples, 0.35%)</title><rect x="84.4298%" y="1189" width="0.3514%" height="15" fill="rgb(245,182,24)" fg:x="610625620" fg:w="2541561"/><text x="84.6798%" y="1199.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (2,541,561 samples, 0.35%)</title><rect x="84.4298%" y="1173" width="0.3514%" height="15" fill="rgb(242,14,37)" fg:x="610625620" fg:w="2541561"/><text x="84.6798%" y="1183.50"></text></g><g><title>&lt;syntastica_highlight::_QueryCaptures&lt;T,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,541,561 samples, 0.35%)</title><rect x="84.4298%" y="1157" width="0.3514%" height="15" fill="rgb(246,228,12)" fg:x="610625620" fg:w="2541561"/><text x="84.6798%" y="1167.50"></text></g><g><title>tree_sitter::QueryMatch::satisfies_text_predicates (2,541,561 samples, 0.35%)</title><rect x="84.4298%" y="1141" width="0.3514%" height="15" fill="rgb(213,55,15)" fg:x="610625620" fg:w="2541561"/><text x="84.6798%" y="1151.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::is_impossible (2,341,354 samples, 0.32%)</title><rect x="84.7813%" y="1013" width="0.3237%" height="15" fill="rgb(209,9,3)" fg:x="613167181" fg:w="2341354"/><text x="85.0313%" y="1023.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (4,697,482 samples, 0.65%)</title><rect x="84.7813%" y="1141" width="0.6495%" height="15" fill="rgb(230,59,30)" fg:x="613167181" fg:w="4697482"/><text x="85.0313%" y="1151.50"></text></g><g><title>syntastica_core::language_set::SupportedLanguage::for_injection::{{closure}} (4,697,482 samples, 0.65%)</title><rect x="84.7813%" y="1125" width="0.6495%" height="15" fill="rgb(209,121,21)" fg:x="613167181" fg:w="4697482"/><text x="85.0313%" y="1135.50"></text></g><g><title>tft::detect::try_detect (4,697,482 samples, 0.65%)</title><rect x="84.7813%" y="1109" width="0.6495%" height="15" fill="rgb(220,109,13)" fg:x="613167181" fg:w="4697482"/><text x="85.0313%" y="1119.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (4,697,482 samples, 0.65%)</title><rect x="84.7813%" y="1093" width="0.6495%" height="15" fill="rgb(232,18,1)" fg:x="613167181" fg:w="4697482"/><text x="85.0313%" y="1103.50"></text></g><g><title>tft::detect::try_detect::{{closure}} (4,697,482 samples, 0.65%)</title><rect x="84.7813%" y="1077" width="0.6495%" height="15" fill="rgb(215,41,42)" fg:x="613167181" fg:w="4697482"/><text x="85.0313%" y="1087.50"></text></g><g><title>regex::regex::string::Regex::is_match (4,697,482 samples, 0.65%)</title><rect x="84.7813%" y="1061" width="0.6495%" height="15" fill="rgb(224,123,36)" fg:x="613167181" fg:w="4697482"/><text x="85.0313%" y="1071.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (4,697,482 samples, 0.65%)</title><rect x="84.7813%" y="1045" width="0.6495%" height="15" fill="rgb(240,125,3)" fg:x="613167181" fg:w="4697482"/><text x="85.0313%" y="1055.50"></text></g><g><title>regex_automata::meta::regex::Regex::search_half (4,697,482 samples, 0.65%)</title><rect x="84.7813%" y="1029" width="0.6495%" height="15" fill="rgb(205,98,50)" fg:x="613167181" fg:w="4697482"/><text x="85.0313%" y="1039.50"></text></g><g><title>regex_automata::util::pool::Pool&lt;T,F&gt;::get (2,356,128 samples, 0.33%)</title><rect x="85.1050%" y="1013" width="0.3258%" height="15" fill="rgb(205,185,37)" fg:x="615508535" fg:w="2356128"/><text x="85.3550%" y="1023.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get (2,356,128 samples, 0.33%)</title><rect x="85.1050%" y="997" width="0.3258%" height="15" fill="rgb(238,207,15)" fg:x="615508535" fg:w="2356128"/><text x="85.3550%" y="1007.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2,356,128 samples, 0.33%)</title><rect x="85.1050%" y="981" width="0.3258%" height="15" fill="rgb(213,199,42)" fg:x="615508535" fg:w="2356128"/><text x="85.3550%" y="991.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (2,356,128 samples, 0.33%)</title><rect x="85.1050%" y="965" width="0.3258%" height="15" fill="rgb(235,201,11)" fg:x="615508535" fg:w="2356128"/><text x="85.3550%" y="975.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2,356,128 samples, 0.33%)</title><rect x="85.1050%" y="949" width="0.3258%" height="15" fill="rgb(207,46,11)" fg:x="615508535" fg:w="2356128"/><text x="85.3550%" y="959.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2,356,128 samples, 0.33%)</title><rect x="85.1050%" y="933" width="0.3258%" height="15" fill="rgb(241,35,35)" fg:x="615508535" fg:w="2356128"/><text x="85.3550%" y="943.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::create_cache (2,356,128 samples, 0.33%)</title><rect x="85.1050%" y="917" width="0.3258%" height="15" fill="rgb(243,32,47)" fg:x="615508535" fg:w="2356128"/><text x="85.3550%" y="927.50"></text></g><g><title>regex_automata::meta::wrappers::HybridCache::new (2,356,128 samples, 0.33%)</title><rect x="85.1050%" y="901" width="0.3258%" height="15" fill="rgb(247,202,23)" fg:x="615508535" fg:w="2356128"/><text x="85.3550%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2,356,128 samples, 0.33%)</title><rect x="85.1050%" y="885" width="0.3258%" height="15" fill="rgb(219,102,11)" fg:x="615508535" fg:w="2356128"/><text x="85.3550%" y="895.50"></text></g><g><title>regex_automata::meta::wrappers::HybridCache::new::{{closure}} (2,356,128 samples, 0.33%)</title><rect x="85.1050%" y="869" width="0.3258%" height="15" fill="rgb(243,110,44)" fg:x="615508535" fg:w="2356128"/><text x="85.3550%" y="879.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::create_cache (2,356,128 samples, 0.33%)</title><rect x="85.1050%" y="853" width="0.3258%" height="15" fill="rgb(222,74,54)" fg:x="615508535" fg:w="2356128"/><text x="85.3550%" y="863.50"></text></g><g><title>regex_automata::hybrid::regex::Cache::new (2,356,128 samples, 0.33%)</title><rect x="85.1050%" y="837" width="0.3258%" height="15" fill="rgb(216,99,12)" fg:x="615508535" fg:w="2356128"/><text x="85.3550%" y="847.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2,356,128 samples, 0.33%)</title><rect x="85.1050%" y="821" width="0.3258%" height="15" fill="rgb(226,22,26)" fg:x="615508535" fg:w="2356128"/><text x="85.3550%" y="831.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2,356,128 samples, 0.33%)</title><rect x="85.1050%" y="805" width="0.3258%" height="15" fill="rgb(217,163,10)" fg:x="615508535" fg:w="2356128"/><text x="85.3550%" y="815.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_all_transitions (2,356,128 samples, 0.33%)</title><rect x="85.1050%" y="789" width="0.3258%" height="15" fill="rgb(213,25,53)" fg:x="615508535" fg:w="2356128"/><text x="85.3550%" y="799.50"></text></g><g><title>&lt;regex_automata::util::alphabet::ByteClassRepresentatives as core::iter::traits::iterator::Iterator&gt;::next (2,356,128 samples, 0.33%)</title><rect x="85.1050%" y="773" width="0.3258%" height="15" fill="rgb(252,105,26)" fg:x="615508535" fg:w="2356128"/><text x="85.3550%" y="783.50"></text></g><g><title>regex_automata::util::alphabet::ByteClasses::get (2,356,128 samples, 0.33%)</title><rect x="85.1050%" y="757" width="0.3258%" height="15" fill="rgb(220,39,43)" fg:x="615508535" fg:w="2356128"/><text x="85.3550%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (2,373,317 samples, 0.33%)</title><rect x="85.4308%" y="565" width="0.3282%" height="15" fill="rgb(229,68,48)" fg:x="617864663" fg:w="2373317"/><text x="85.6808%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2,373,317 samples, 0.33%)</title><rect x="85.4308%" y="549" width="0.3282%" height="15" fill="rgb(252,8,32)" fg:x="617864663" fg:w="2373317"/><text x="85.6808%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2,373,317 samples, 0.33%)</title><rect x="85.4308%" y="533" width="0.3282%" height="15" fill="rgb(223,20,43)" fg:x="617864663" fg:w="2373317"/><text x="85.6808%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (2,373,317 samples, 0.33%)</title><rect x="85.4308%" y="517" width="0.3282%" height="15" fill="rgb(229,81,49)" fg:x="617864663" fg:w="2373317"/><text x="85.6808%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (2,373,317 samples, 0.33%)</title><rect x="85.4308%" y="501" width="0.3282%" height="15" fill="rgb(236,28,36)" fg:x="617864663" fg:w="2373317"/><text x="85.6808%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::ast::Ast&gt;&gt; (4,787,317 samples, 0.66%)</title><rect x="85.4308%" y="645" width="0.6619%" height="15" fill="rgb(249,185,26)" fg:x="617864663" fg:w="4787317"/><text x="85.6808%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,787,317 samples, 0.66%)</title><rect x="85.4308%" y="629" width="0.6619%" height="15" fill="rgb(249,174,33)" fg:x="617864663" fg:w="4787317"/><text x="85.6808%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_syntax::ast::Ast]&gt; (4,787,317 samples, 0.66%)</title><rect x="85.4308%" y="613" width="0.6619%" height="15" fill="rgb(233,201,37)" fg:x="617864663" fg:w="4787317"/><text x="85.6808%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4,787,317 samples, 0.66%)</title><rect x="85.4308%" y="597" width="0.6619%" height="15" fill="rgb(221,78,26)" fg:x="617864663" fg:w="4787317"/><text x="85.6808%" y="607.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4,787,317 samples, 0.66%)</title><rect x="85.4308%" y="581" width="0.6619%" height="15" fill="rgb(250,127,30)" fg:x="617864663" fg:w="4787317"/><text x="85.6808%" y="591.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,414,000 samples, 0.33%)</title><rect x="85.7589%" y="565" width="0.3338%" height="15" fill="rgb(230,49,44)" fg:x="620237980" fg:w="2414000"/><text x="86.0089%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::builder::Builder&gt;&gt; (2,392,594 samples, 0.33%)</title><rect x="86.0927%" y="581" width="0.3308%" height="15" fill="rgb(229,67,23)" fg:x="622651980" fg:w="2392594"/><text x="86.3427%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::builder::Builder&gt;&gt; (2,392,594 samples, 0.33%)</title><rect x="86.0927%" y="565" width="0.3308%" height="15" fill="rgb(249,83,47)" fg:x="622651980" fg:w="2392594"/><text x="86.3427%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::builder::Builder&gt; (2,392,594 samples, 0.33%)</title><rect x="86.0927%" y="549" width="0.3308%" height="15" fill="rgb(215,43,3)" fg:x="622651980" fg:w="2392594"/><text x="86.3427%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::builder::State&gt;&gt; (2,392,594 samples, 0.33%)</title><rect x="86.0927%" y="533" width="0.3308%" height="15" fill="rgb(238,154,13)" fg:x="622651980" fg:w="2392594"/><text x="86.3427%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,392,594 samples, 0.33%)</title><rect x="86.0927%" y="517" width="0.3308%" height="15" fill="rgb(219,56,2)" fg:x="622651980" fg:w="2392594"/><text x="86.3427%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::builder::State]&gt; (2,392,594 samples, 0.33%)</title><rect x="86.0927%" y="501" width="0.3308%" height="15" fill="rgb(233,0,4)" fg:x="622651980" fg:w="2392594"/><text x="86.3427%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::builder::State&gt; (2,392,594 samples, 0.33%)</title><rect x="86.0927%" y="485" width="0.3308%" height="15" fill="rgb(235,30,7)" fg:x="622651980" fg:w="2392594"/><text x="86.3427%" y="495.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,392,594 samples, 0.33%)</title><rect x="86.0927%" y="469" width="0.3308%" height="15" fill="rgb(250,79,13)" fg:x="622651980" fg:w="2392594"/><text x="86.3427%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14,601,830 samples, 2.02%)</title><rect x="86.0927%" y="597" width="2.0190%" height="15" fill="rgb(211,146,34)" fg:x="622651980" fg:w="14601830"/><text x="86.3427%" y="607.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12,209,236 samples, 1.69%)</title><rect x="86.4235%" y="581" width="1.6881%" height="15" fill="rgb(228,22,38)" fg:x="625044574" fg:w="12209236"/><text x="86.6735%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12,209,236 samples, 1.69%)</title><rect x="86.4235%" y="565" width="1.6881%" height="15" fill="rgb(235,168,5)" fg:x="625044574" fg:w="12209236"/><text x="86.6735%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt; (12,209,236 samples, 1.69%)</title><rect x="86.4235%" y="549" width="1.6881%" height="15" fill="rgb(221,155,16)" fg:x="625044574" fg:w="12209236"/><text x="86.6735%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedMap&gt; (12,209,236 samples, 1.69%)</title><rect x="86.4235%" y="533" width="1.6881%" height="15" fill="rgb(215,215,53)" fg:x="625044574" fg:w="12209236"/><text x="86.6735%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (12,209,236 samples, 1.69%)</title><rect x="86.4235%" y="517" width="1.6881%" height="15" fill="rgb(223,4,10)" fg:x="625044574" fg:w="12209236"/><text x="86.6735%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,209,236 samples, 1.69%)</title><rect x="86.4235%" y="501" width="1.6881%" height="15" fill="rgb(234,103,6)" fg:x="625044574" fg:w="12209236"/><text x="86.6735%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::map::Utf8BoundedEntry]&gt; (12,209,236 samples, 1.69%)</title><rect x="86.4235%" y="485" width="1.6881%" height="15" fill="rgb(227,97,0)" fg:x="625044574" fg:w="12209236"/><text x="86.6735%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt; (12,209,236 samples, 1.69%)</title><rect x="86.4235%" y="469" width="1.6881%" height="15" fill="rgb(234,150,53)" fg:x="625044574" fg:w="12209236"/><text x="86.6735%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (12,209,236 samples, 1.69%)</title><rect x="86.4235%" y="453" width="1.6881%" height="15" fill="rgb(228,201,54)" fg:x="625044574" fg:w="12209236"/><text x="86.6735%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (12,209,236 samples, 1.69%)</title><rect x="86.4235%" y="437" width="1.6881%" height="15" fill="rgb(222,22,37)" fg:x="625044574" fg:w="12209236"/><text x="86.6735%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,209,236 samples, 1.69%)</title><rect x="86.4235%" y="421" width="1.6881%" height="15" fill="rgb(237,53,32)" fg:x="625044574" fg:w="12209236"/><text x="86.6735%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,341,067 samples, 0.32%)</title><rect x="88.1117%" y="549" width="0.3237%" height="15" fill="rgb(233,25,53)" fg:x="637253810" fg:w="2341067"/><text x="88.3617%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2,341,067 samples, 0.32%)</title><rect x="88.1117%" y="533" width="0.3237%" height="15" fill="rgb(210,40,34)" fg:x="637253810" fg:w="2341067"/><text x="88.3617%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2,341,067 samples, 0.32%)</title><rect x="88.1117%" y="517" width="0.3237%" height="15" fill="rgb(241,220,44)" fg:x="637253810" fg:w="2341067"/><text x="88.3617%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (2,341,067 samples, 0.32%)</title><rect x="88.1117%" y="501" width="0.3237%" height="15" fill="rgb(235,28,35)" fg:x="637253810" fg:w="2341067"/><text x="88.3617%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (2,341,067 samples, 0.32%)</title><rect x="88.1117%" y="485" width="0.3237%" height="15" fill="rgb(210,56,17)" fg:x="637253810" fg:w="2341067"/><text x="88.3617%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4,851,113 samples, 0.67%)</title><rect x="88.1117%" y="565" width="0.6708%" height="15" fill="rgb(224,130,29)" fg:x="637253810" fg:w="4851113"/><text x="88.3617%" y="575.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2,510,046 samples, 0.35%)</title><rect x="88.4354%" y="549" width="0.3471%" height="15" fill="rgb(235,212,8)" fg:x="639594877" fg:w="2510046"/><text x="88.6854%" y="559.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_range (2,369,194 samples, 0.33%)</title><rect x="88.7824%" y="261" width="0.3276%" height="15" fill="rgb(223,33,50)" fg:x="642104923" fg:w="2369194"/><text x="89.0324%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::add_range (2,369,194 samples, 0.33%)</title><rect x="88.7824%" y="245" width="0.3276%" height="15" fill="rgb(219,149,13)" fg:x="642104923" fg:w="2369194"/><text x="89.0324%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_range (2,369,194 samples, 0.33%)</title><rect x="88.7824%" y="229" width="0.3276%" height="15" fill="rgb(250,156,29)" fg:x="642104923" fg:w="2369194"/><text x="89.0324%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2,369,194 samples, 0.33%)</title><rect x="88.7824%" y="213" width="0.3276%" height="15" fill="rgb(216,193,19)" fg:x="642104923" fg:w="2369194"/><text x="89.0324%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,369,194 samples, 0.33%)</title><rect x="88.7824%" y="197" width="0.3276%" height="15" fill="rgb(216,135,14)" fg:x="642104923" fg:w="2369194"/><text x="89.0324%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2,369,194 samples, 0.33%)</title><rect x="88.7824%" y="181" width="0.3276%" height="15" fill="rgb(241,47,5)" fg:x="642104923" fg:w="2369194"/><text x="89.0324%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (2,369,194 samples, 0.33%)</title><rect x="88.7824%" y="165" width="0.3276%" height="15" fill="rgb(233,42,35)" fg:x="642104923" fg:w="2369194"/><text x="89.0324%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2,369,194 samples, 0.33%)</title><rect x="88.7824%" y="149" width="0.3276%" height="15" fill="rgb(231,13,6)" fg:x="642104923" fg:w="2369194"/><text x="89.0324%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,369,194 samples, 0.33%)</title><rect x="88.7824%" y="133" width="0.3276%" height="15" fill="rgb(207,181,40)" fg:x="642104923" fg:w="2369194"/><text x="89.0324%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2,369,194 samples, 0.33%)</title><rect x="88.7824%" y="117" width="0.3276%" height="15" fill="rgb(254,173,49)" fg:x="642104923" fg:w="2369194"/><text x="89.0324%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2,369,194 samples, 0.33%)</title><rect x="88.7824%" y="101" width="0.3276%" height="15" fill="rgb(221,1,38)" fg:x="642104923" fg:w="2369194"/><text x="89.0324%" y="111.50"></text></g><g><title>alloc::alloc::realloc (2,369,194 samples, 0.33%)</title><rect x="88.7824%" y="85" width="0.3276%" height="15" fill="rgb(206,124,46)" fg:x="642104923" fg:w="2369194"/><text x="89.0324%" y="95.50"></text></g><g><title>realloc (2,369,194 samples, 0.33%)</title><rect x="88.7824%" y="69" width="0.3276%" height="15" fill="rgb(249,21,11)" fg:x="642104923" fg:w="2369194"/><text x="89.0324%" y="79.50"></text></g><g><title>_int_realloc (2,369,194 samples, 0.33%)</title><rect x="88.7824%" y="53" width="0.3276%" height="15" fill="rgb(222,201,40)" fg:x="642104923" fg:w="2369194"/><text x="89.0324%" y="63.50"></text></g><g><title>__memmove_avx_unaligned_erms (2,369,194 samples, 0.33%)</title><rect x="88.7824%" y="37" width="0.3276%" height="15" fill="rgb(235,61,29)" fg:x="642104923" fg:w="2369194"/><text x="89.0324%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4,774,977 samples, 0.66%)</title><rect x="88.7824%" y="373" width="0.6602%" height="15" fill="rgb(219,207,3)" fg:x="642104923" fg:w="4774977"/><text x="89.0324%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (4,774,977 samples, 0.66%)</title><rect x="88.7824%" y="357" width="0.6602%" height="15" fill="rgb(222,56,46)" fg:x="642104923" fg:w="4774977"/><text x="89.0324%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_exactly (4,774,977 samples, 0.66%)</title><rect x="88.7824%" y="341" width="0.6602%" height="15" fill="rgb(239,76,54)" fg:x="642104923" fg:w="4774977"/><text x="89.0324%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (4,774,977 samples, 0.66%)</title><rect x="88.7824%" y="325" width="0.6602%" height="15" fill="rgb(231,124,27)" fg:x="642104923" fg:w="4774977"/><text x="89.0324%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4,774,977 samples, 0.66%)</title><rect x="88.7824%" y="309" width="0.6602%" height="15" fill="rgb(249,195,6)" fg:x="642104923" fg:w="4774977"/><text x="89.0324%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (4,774,977 samples, 0.66%)</title><rect x="88.7824%" y="293" width="0.6602%" height="15" fill="rgb(237,174,47)" fg:x="642104923" fg:w="4774977"/><text x="89.0324%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (4,774,977 samples, 0.66%)</title><rect x="88.7824%" y="277" width="0.6602%" height="15" fill="rgb(206,201,31)" fg:x="642104923" fg:w="4774977"/><text x="89.0324%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::hash (2,405,783 samples, 0.33%)</title><rect x="89.1100%" y="261" width="0.3326%" height="15" fill="rgb(231,57,52)" fg:x="644474117" fg:w="2405783"/><text x="89.3600%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2,528,693 samples, 0.35%)</title><rect x="89.4426%" y="309" width="0.3496%" height="15" fill="rgb(248,177,22)" fg:x="646879900" fg:w="2528693"/><text x="89.6926%" y="319.50"></text></g><g><title>alloc::vec::from_elem (2,528,693 samples, 0.35%)</title><rect x="89.4426%" y="293" width="0.3496%" height="15" fill="rgb(215,211,37)" fg:x="646879900" fg:w="2528693"/><text x="89.6926%" y="303.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2,528,693 samples, 0.35%)</title><rect x="89.4426%" y="277" width="0.3496%" height="15" fill="rgb(241,128,51)" fg:x="646879900" fg:w="2528693"/><text x="89.6926%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2,528,693 samples, 0.35%)</title><rect x="89.4426%" y="261" width="0.3496%" height="15" fill="rgb(227,165,31)" fg:x="646879900" fg:w="2528693"/><text x="89.6926%" y="271.50"></text></g><g><title>core::ptr::write (2,528,693 samples, 0.35%)</title><rect x="89.4426%" y="245" width="0.3496%" height="15" fill="rgb(228,167,24)" fg:x="646879900" fg:w="2528693"/><text x="89.6926%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (9,730,314 samples, 1.35%)</title><rect x="88.7824%" y="437" width="1.3454%" height="15" fill="rgb(228,143,12)" fg:x="642104923" fg:w="9730314"/><text x="89.0324%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (9,730,314 samples, 1.35%)</title><rect x="88.7824%" y="421" width="1.3454%" height="15" fill="rgb(249,149,8)" fg:x="642104923" fg:w="9730314"/><text x="89.0324%" y="431.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (9,730,314 samples, 1.35%)</title><rect x="88.7824%" y="405" width="1.3454%" height="15" fill="rgb(243,35,44)" fg:x="642104923" fg:w="9730314"/><text x="89.0324%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (9,730,314 samples, 1.35%)</title><rect x="88.7824%" y="389" width="1.3454%" height="15" fill="rgb(246,89,9)" fg:x="642104923" fg:w="9730314"/><text x="89.0324%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (4,955,337 samples, 0.69%)</title><rect x="89.4426%" y="373" width="0.6852%" height="15" fill="rgb(233,213,13)" fg:x="646879900" fg:w="4955337"/><text x="89.6926%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4,955,337 samples, 0.69%)</title><rect x="89.4426%" y="357" width="0.6852%" height="15" fill="rgb(233,141,41)" fg:x="646879900" fg:w="4955337"/><text x="89.6926%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (4,955,337 samples, 0.69%)</title><rect x="89.4426%" y="341" width="0.6852%" height="15" fill="rgb(239,167,4)" fg:x="646879900" fg:w="4955337"/><text x="89.6926%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (4,955,337 samples, 0.69%)</title><rect x="89.4426%" y="325" width="0.6852%" height="15" fill="rgb(209,217,16)" fg:x="646879900" fg:w="4955337"/><text x="89.6926%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::hash (2,426,644 samples, 0.34%)</title><rect x="89.7923%" y="309" width="0.3355%" height="15" fill="rgb(219,88,35)" fg:x="649408593" fg:w="2426644"/><text x="90.0423%" y="319.50"></text></g><g><title>regex_automata::util::primitives::StateID::as_u64 (2,426,644 samples, 0.34%)</title><rect x="89.7923%" y="293" width="0.3355%" height="15" fill="rgb(220,193,23)" fg:x="649408593" fg:w="2426644"/><text x="90.0423%" y="303.50"></text></g><g><title>regex_automata::util::primitives::SmallIndex::as_u64 (2,426,644 samples, 0.34%)</title><rect x="89.7923%" y="277" width="0.3355%" height="15" fill="rgb(230,90,52)" fg:x="649408593" fg:w="2426644"/><text x="90.0423%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5,016,710 samples, 0.69%)</title><rect x="90.1278%" y="373" width="0.6936%" height="15" fill="rgb(252,106,19)" fg:x="651835237" fg:w="5016710"/><text x="90.3778%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (5,016,710 samples, 0.69%)</title><rect x="90.1278%" y="357" width="0.6936%" height="15" fill="rgb(206,74,20)" fg:x="651835237" fg:w="5016710"/><text x="90.3778%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_exactly (5,016,710 samples, 0.69%)</title><rect x="90.1278%" y="341" width="0.6936%" height="15" fill="rgb(230,138,44)" fg:x="651835237" fg:w="5016710"/><text x="90.3778%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (5,016,710 samples, 0.69%)</title><rect x="90.1278%" y="325" width="0.6936%" height="15" fill="rgb(235,182,43)" fg:x="651835237" fg:w="5016710"/><text x="90.3778%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5,016,710 samples, 0.69%)</title><rect x="90.1278%" y="309" width="0.6936%" height="15" fill="rgb(242,16,51)" fg:x="651835237" fg:w="5016710"/><text x="90.3778%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (5,016,710 samples, 0.69%)</title><rect x="90.1278%" y="293" width="0.6936%" height="15" fill="rgb(248,9,4)" fg:x="651835237" fg:w="5016710"/><text x="90.3778%" y="303.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2,552,258 samples, 0.35%)</title><rect x="90.4686%" y="277" width="0.3529%" height="15" fill="rgb(210,31,22)" fg:x="654299689" fg:w="2552258"/><text x="90.7186%" y="287.50"></text></g><g><title>alloc::alloc::exchange_malloc (2,552,258 samples, 0.35%)</title><rect x="90.4686%" y="261" width="0.3529%" height="15" fill="rgb(239,54,39)" fg:x="654299689" fg:w="2552258"/><text x="90.7186%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,552,258 samples, 0.35%)</title><rect x="90.4686%" y="245" width="0.3529%" height="15" fill="rgb(230,99,41)" fg:x="654299689" fg:w="2552258"/><text x="90.7186%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,552,258 samples, 0.35%)</title><rect x="90.4686%" y="229" width="0.3529%" height="15" fill="rgb(253,106,12)" fg:x="654299689" fg:w="2552258"/><text x="90.7186%" y="239.50"></text></g><g><title>alloc::alloc::alloc (2,552,258 samples, 0.35%)</title><rect x="90.4686%" y="213" width="0.3529%" height="15" fill="rgb(213,46,41)" fg:x="654299689" fg:w="2552258"/><text x="90.7186%" y="223.50"></text></g><g><title>malloc (2,552,258 samples, 0.35%)</title><rect x="90.4686%" y="197" width="0.3529%" height="15" fill="rgb(215,133,35)" fg:x="654299689" fg:w="2552258"/><text x="90.7186%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,410,871 samples, 0.33%)</title><rect x="90.8215%" y="277" width="0.3333%" height="15" fill="rgb(213,28,5)" fg:x="656851947" fg:w="2410871"/><text x="91.0715%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,410,871 samples, 0.33%)</title><rect x="90.8215%" y="261" width="0.3333%" height="15" fill="rgb(215,77,49)" fg:x="656851947" fg:w="2410871"/><text x="91.0715%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2,410,871 samples, 0.33%)</title><rect x="90.8215%" y="245" width="0.3333%" height="15" fill="rgb(248,100,22)" fg:x="656851947" fg:w="2410871"/><text x="91.0715%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,410,871 samples, 0.33%)</title><rect x="90.8215%" y="229" width="0.3333%" height="15" fill="rgb(208,67,9)" fg:x="656851947" fg:w="2410871"/><text x="91.0715%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,410,871 samples, 0.33%)</title><rect x="90.8215%" y="213" width="0.3333%" height="15" fill="rgb(219,133,21)" fg:x="656851947" fg:w="2410871"/><text x="91.0715%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,410,871 samples, 0.33%)</title><rect x="90.8215%" y="197" width="0.3333%" height="15" fill="rgb(246,46,29)" fg:x="656851947" fg:w="2410871"/><text x="91.0715%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,410,871 samples, 0.33%)</title><rect x="90.8215%" y="181" width="0.3333%" height="15" fill="rgb(246,185,52)" fg:x="656851947" fg:w="2410871"/><text x="91.0715%" y="191.50"></text></g><g><title>alloc::raw_vec::layout_array (2,410,871 samples, 0.33%)</title><rect x="90.8215%" y="165" width="0.3333%" height="15" fill="rgb(252,136,11)" fg:x="656851947" fg:w="2410871"/><text x="91.0715%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::repeat (2,410,871 samples, 0.33%)</title><rect x="90.8215%" y="149" width="0.3333%" height="15" fill="rgb(219,138,53)" fg:x="656851947" fg:w="2410871"/><text x="91.0715%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4,777,681 samples, 0.66%)</title><rect x="90.8215%" y="325" width="0.6606%" height="15" fill="rgb(211,51,23)" fg:x="656851947" fg:w="4777681"/><text x="91.0715%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4,777,681 samples, 0.66%)</title><rect x="90.8215%" y="309" width="0.6606%" height="15" fill="rgb(247,221,28)" fg:x="656851947" fg:w="4777681"/><text x="91.0715%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4,777,681 samples, 0.66%)</title><rect x="90.8215%" y="293" width="0.6606%" height="15" fill="rgb(251,222,45)" fg:x="656851947" fg:w="4777681"/><text x="91.0715%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::hash (2,366,810 samples, 0.33%)</title><rect x="91.1548%" y="277" width="0.3273%" height="15" fill="rgb(217,162,53)" fg:x="659262818" fg:w="2366810"/><text x="91.4048%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2,408,450 samples, 0.33%)</title><rect x="91.4821%" y="325" width="0.3330%" height="15" fill="rgb(229,93,14)" fg:x="661629628" fg:w="2408450"/><text x="91.7321%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2,408,450 samples, 0.33%)</title><rect x="91.4821%" y="309" width="0.3330%" height="15" fill="rgb(209,67,49)" fg:x="661629628" fg:w="2408450"/><text x="91.7321%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::hash (2,408,450 samples, 0.33%)</title><rect x="91.4821%" y="293" width="0.3330%" height="15" fill="rgb(213,87,29)" fg:x="661629628" fg:w="2408450"/><text x="91.7321%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (2,408,450 samples, 0.33%)</title><rect x="91.4821%" y="277" width="0.3330%" height="15" fill="rgb(205,151,52)" fg:x="661629628" fg:w="2408450"/><text x="91.7321%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (68,560,843 samples, 9.48%)</title><rect x="86.0927%" y="629" width="9.4798%" height="15" fill="rgb(253,215,39)" fg:x="622651980" fg:w="68560843"/><text x="86.3427%" y="639.50">regex_automata..</text></g><g><title>regex_automata::meta::strategy::Core::new (68,560,843 samples, 9.48%)</title><rect x="86.0927%" y="613" width="9.4798%" height="15" fill="rgb(221,220,41)" fg:x="622651980" fg:w="68560843"/><text x="86.3427%" y="623.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (53,959,013 samples, 7.46%)</title><rect x="88.1117%" y="597" width="7.4608%" height="15" fill="rgb(218,133,21)" fg:x="637253810" fg:w="53959013"/><text x="88.3617%" y="607.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (53,959,013 samples, 7.46%)</title><rect x="88.1117%" y="581" width="7.4608%" height="15" fill="rgb(221,193,43)" fg:x="637253810" fg:w="53959013"/><text x="88.3617%" y="591.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (49,107,900 samples, 6.79%)</title><rect x="88.7824%" y="565" width="6.7900%" height="15" fill="rgb(240,128,52)" fg:x="642104923" fg:w="49107900"/><text x="89.0324%" y="575.50">regex_aut..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (49,107,900 samples, 6.79%)</title><rect x="88.7824%" y="549" width="6.7900%" height="15" fill="rgb(253,114,12)" fg:x="642104923" fg:w="49107900"/><text x="89.0324%" y="559.50">&lt;core::it..</text></g><g><title>core::option::Option&lt;T&gt;::map (49,107,900 samples, 6.79%)</title><rect x="88.7824%" y="533" width="6.7900%" height="15" fill="rgb(215,223,47)" fg:x="642104923" fg:w="49107900"/><text x="89.0324%" y="543.50">core::opt..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (49,107,900 samples, 6.79%)</title><rect x="88.7824%" y="517" width="6.7900%" height="15" fill="rgb(248,225,23)" fg:x="642104923" fg:w="49107900"/><text x="89.0324%" y="527.50">core::ops..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (49,107,900 samples, 6.79%)</title><rect x="88.7824%" y="501" width="6.7900%" height="15" fill="rgb(250,108,0)" fg:x="642104923" fg:w="49107900"/><text x="89.0324%" y="511.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (49,107,900 samples, 6.79%)</title><rect x="88.7824%" y="485" width="6.7900%" height="15" fill="rgb(228,208,7)" fg:x="642104923" fg:w="49107900"/><text x="89.0324%" y="495.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (49,107,900 samples, 6.79%)</title><rect x="88.7824%" y="469" width="6.7900%" height="15" fill="rgb(244,45,10)" fg:x="642104923" fg:w="49107900"/><text x="89.0324%" y="479.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (49,107,900 samples, 6.79%)</title><rect x="88.7824%" y="453" width="6.7900%" height="15" fill="rgb(207,125,25)" fg:x="642104923" fg:w="49107900"/><text x="89.0324%" y="463.50">regex_aut..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (39,377,586 samples, 5.44%)</title><rect x="90.1278%" y="437" width="5.4447%" height="15" fill="rgb(210,195,18)" fg:x="651835237" fg:w="39377586"/><text x="90.3778%" y="447.50">&lt;core::..</text></g><g><title>core::option::Option&lt;T&gt;::map (39,377,586 samples, 5.44%)</title><rect x="90.1278%" y="421" width="5.4447%" height="15" fill="rgb(249,80,12)" fg:x="651835237" fg:w="39377586"/><text x="90.3778%" y="431.50">core::o..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (39,377,586 samples, 5.44%)</title><rect x="90.1278%" y="405" width="5.4447%" height="15" fill="rgb(221,65,9)" fg:x="651835237" fg:w="39377586"/><text x="90.3778%" y="415.50">core::o..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (39,377,586 samples, 5.44%)</title><rect x="90.1278%" y="389" width="5.4447%" height="15" fill="rgb(235,49,36)" fg:x="651835237" fg:w="39377586"/><text x="90.3778%" y="399.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (34,360,876 samples, 4.75%)</title><rect x="90.8215%" y="373" width="4.7510%" height="15" fill="rgb(225,32,20)" fg:x="656851947" fg:w="34360876"/><text x="91.0715%" y="383.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (34,360,876 samples, 4.75%)</title><rect x="90.8215%" y="357" width="4.7510%" height="15" fill="rgb(215,141,46)" fg:x="656851947" fg:w="34360876"/><text x="91.0715%" y="367.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (34,360,876 samples, 4.75%)</title><rect x="90.8215%" y="341" width="4.7510%" height="15" fill="rgb(250,160,47)" fg:x="656851947" fg:w="34360876"/><text x="91.0715%" y="351.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (27,174,745 samples, 3.76%)</title><rect x="91.8151%" y="325" width="3.7574%" height="15" fill="rgb(216,222,40)" fg:x="664038078" fg:w="27174745"/><text x="92.0651%" y="335.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (27,174,745 samples, 3.76%)</title><rect x="91.8151%" y="309" width="3.7574%" height="15" fill="rgb(234,217,39)" fg:x="664038078" fg:w="27174745"/><text x="92.0651%" y="319.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (27,174,745 samples, 3.76%)</title><rect x="91.8151%" y="293" width="3.7574%" height="15" fill="rgb(207,178,40)" fg:x="664038078" fg:w="27174745"/><text x="92.0651%" y="303.50">rege..</text></g><g><title>alloc::vec::from_elem (27,174,745 samples, 3.76%)</title><rect x="91.8151%" y="277" width="3.7574%" height="15" fill="rgb(221,136,13)" fg:x="664038078" fg:w="27174745"/><text x="92.0651%" y="287.50">allo..</text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (27,174,745 samples, 3.76%)</title><rect x="91.8151%" y="261" width="3.7574%" height="15" fill="rgb(249,199,10)" fg:x="664038078" fg:w="27174745"/><text x="92.0651%" y="271.50">&lt;T a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (27,174,745 samples, 3.76%)</title><rect x="91.8151%" y="245" width="3.7574%" height="15" fill="rgb(249,222,13)" fg:x="664038078" fg:w="27174745"/><text x="92.0651%" y="255.50">allo..</text></g><g><title>core::ptr::write (27,174,745 samples, 3.76%)</title><rect x="91.8151%" y="229" width="3.7574%" height="15" fill="rgb(244,185,38)" fg:x="664038078" fg:w="27174745"/><text x="92.0651%" y="239.50">core..</text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (71,095,322 samples, 9.83%)</title><rect x="86.0927%" y="645" width="9.8302%" height="15" fill="rgb(236,202,9)" fg:x="622651980" fg:w="71095322"/><text x="86.3427%" y="655.50">regex_automata..</text></g><g><title>regex_automata::util::pool::Pool&lt;T,F&gt;::new (2,534,479 samples, 0.35%)</title><rect x="95.5725%" y="629" width="0.3504%" height="15" fill="rgb(250,229,37)" fg:x="691212823" fg:w="2534479"/><text x="95.8225%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2,534,479 samples, 0.35%)</title><rect x="95.5725%" y="613" width="0.3504%" height="15" fill="rgb(206,174,23)" fg:x="691212823" fg:w="2534479"/><text x="95.8225%" y="623.50"></text></g><g><title>alloc::alloc::exchange_malloc (2,534,479 samples, 0.35%)</title><rect x="95.5725%" y="597" width="0.3504%" height="15" fill="rgb(211,33,43)" fg:x="691212823" fg:w="2534479"/><text x="95.8225%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,534,479 samples, 0.35%)</title><rect x="95.5725%" y="581" width="0.3504%" height="15" fill="rgb(245,58,50)" fg:x="691212823" fg:w="2534479"/><text x="95.8225%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,534,479 samples, 0.35%)</title><rect x="95.5725%" y="565" width="0.3504%" height="15" fill="rgb(244,68,36)" fg:x="691212823" fg:w="2534479"/><text x="95.8225%" y="575.50"></text></g><g><title>alloc::alloc::alloc (2,534,479 samples, 0.35%)</title><rect x="95.5725%" y="549" width="0.3504%" height="15" fill="rgb(232,229,15)" fg:x="691212823" fg:w="2534479"/><text x="95.8225%" y="559.50"></text></g><g><title>malloc (2,534,479 samples, 0.35%)</title><rect x="95.5725%" y="533" width="0.3504%" height="15" fill="rgb(254,30,23)" fg:x="691212823" fg:w="2534479"/><text x="95.8225%" y="543.50"></text></g><g><title>_int_malloc (2,534,479 samples, 0.35%)</title><rect x="95.5725%" y="517" width="0.3504%" height="15" fill="rgb(235,160,14)" fg:x="691212823" fg:w="2534479"/><text x="95.8225%" y="527.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2,321,567 samples, 0.32%)</title><rect x="95.9229%" y="597" width="0.3210%" height="15" fill="rgb(212,155,44)" fg:x="693747302" fg:w="2321567"/><text x="96.1729%" y="607.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (2,321,567 samples, 0.32%)</title><rect x="95.9229%" y="581" width="0.3210%" height="15" fill="rgb(226,2,50)" fg:x="693747302" fg:w="2321567"/><text x="96.1729%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,321,567 samples, 0.32%)</title><rect x="95.9229%" y="565" width="0.3210%" height="15" fill="rgb(234,177,6)" fg:x="693747302" fg:w="2321567"/><text x="96.1729%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2,321,567 samples, 0.32%)</title><rect x="95.9229%" y="549" width="0.3210%" height="15" fill="rgb(217,24,9)" fg:x="693747302" fg:w="2321567"/><text x="96.1729%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (2,321,567 samples, 0.32%)</title><rect x="95.9229%" y="533" width="0.3210%" height="15" fill="rgb(220,13,46)" fg:x="693747302" fg:w="2321567"/><text x="96.1729%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2,321,567 samples, 0.32%)</title><rect x="95.9229%" y="517" width="0.3210%" height="15" fill="rgb(239,221,27)" fg:x="693747302" fg:w="2321567"/><text x="96.1729%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,321,567 samples, 0.32%)</title><rect x="95.9229%" y="501" width="0.3210%" height="15" fill="rgb(222,198,25)" fg:x="693747302" fg:w="2321567"/><text x="96.1729%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2,321,567 samples, 0.32%)</title><rect x="95.9229%" y="485" width="0.3210%" height="15" fill="rgb(211,99,13)" fg:x="693747302" fg:w="2321567"/><text x="96.1729%" y="495.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2,321,567 samples, 0.32%)</title><rect x="95.9229%" y="469" width="0.3210%" height="15" fill="rgb(232,111,31)" fg:x="693747302" fg:w="2321567"/><text x="96.1729%" y="479.50"></text></g><g><title>alloc::alloc::realloc (2,321,567 samples, 0.32%)</title><rect x="95.9229%" y="453" width="0.3210%" height="15" fill="rgb(245,82,37)" fg:x="693747302" fg:w="2321567"/><text x="96.1729%" y="463.50"></text></g><g><title>realloc (2,321,567 samples, 0.32%)</title><rect x="95.9229%" y="437" width="0.3210%" height="15" fill="rgb(227,149,46)" fg:x="693747302" fg:w="2321567"/><text x="96.1729%" y="447.50"></text></g><g><title>_int_realloc (2,321,567 samples, 0.32%)</title><rect x="95.9229%" y="421" width="0.3210%" height="15" fill="rgb(218,36,50)" fg:x="693747302" fg:w="2321567"/><text x="96.1729%" y="431.50"></text></g><g><title>_int_malloc (2,321,567 samples, 0.32%)</title><rect x="95.9229%" y="405" width="0.3210%" height="15" fill="rgb(226,80,48)" fg:x="693747302" fg:w="2321567"/><text x="96.1729%" y="415.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="1125" width="11.1644%" height="15" fill="rgb(238,224,15)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="1135.50">&lt;once_cell::sync..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="1109" width="11.1644%" height="15" fill="rgb(241,136,10)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="1119.50">once_cell::sync:..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="1093" width="11.1644%" height="15" fill="rgb(208,32,45)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="1103.50">once_cell::sync:..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="1077" width="11.1644%" height="15" fill="rgb(207,135,9)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="1087.50">once_cell::sync:..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="1061" width="11.1644%" height="15" fill="rgb(206,86,44)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="1071.50">once_cell::imp::..</text></g><g><title>once_cell::imp::initialize_or_wait (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="1045" width="11.1644%" height="15" fill="rgb(245,177,15)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="1055.50">once_cell::imp::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="1029" width="11.1644%" height="15" fill="rgb(206,64,50)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="1039.50">core::ops::funct..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="1013" width="11.1644%" height="15" fill="rgb(234,36,40)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="1023.50">once_cell::imp::..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="997" width="11.1644%" height="15" fill="rgb(213,64,8)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="1007.50">once_cell::sync:..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="981" width="11.1644%" height="15" fill="rgb(210,75,36)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="991.50">once_cell::sync:..</text></g><g><title>core::ops::function::FnOnce::call_once (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="965" width="11.1644%" height="15" fill="rgb(229,88,21)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="975.50">core::ops::funct..</text></g><g><title>core::ops::function::FnOnce::call_once (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="949" width="11.1644%" height="15" fill="rgb(252,204,47)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="959.50">core::ops::funct..</text></g><g><title>tft::detect::pattern::PATTERN::{{closure}} (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="933" width="11.1644%" height="15" fill="rgb(208,77,27)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="943.50">tft::detect::pat..</text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="917" width="11.1644%" height="15" fill="rgb(221,76,26)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="927.50">&lt;once_cell::sync..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="901" width="11.1644%" height="15" fill="rgb(225,139,18)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="911.50">once_cell::sync:..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="885" width="11.1644%" height="15" fill="rgb(230,137,11)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="895.50">once_cell::sync:..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="869" width="11.1644%" height="15" fill="rgb(212,28,1)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="879.50">once_cell::sync:..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="853" width="11.1644%" height="15" fill="rgb(248,164,17)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="863.50">once_cell::imp::..</text></g><g><title>once_cell::imp::initialize_or_wait (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="837" width="11.1644%" height="15" fill="rgb(222,171,42)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="847.50">once_cell::imp::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="821" width="11.1644%" height="15" fill="rgb(243,84,45)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="831.50">core::ops::funct..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="805" width="11.1644%" height="15" fill="rgb(252,49,23)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="815.50">once_cell::imp::..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="789" width="11.1644%" height="15" fill="rgb(215,19,7)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="799.50">once_cell::sync:..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="773" width="11.1644%" height="15" fill="rgb(238,81,41)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="783.50">once_cell::sync:..</text></g><g><title>core::ops::function::FnOnce::call_once (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="757" width="11.1644%" height="15" fill="rgb(210,199,37)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="767.50">core::ops::funct..</text></g><g><title>core::ops::function::FnOnce::call_once (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="741" width="11.1644%" height="15" fill="rgb(244,192,49)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="751.50">core::ops::funct..</text></g><g><title>tft::detect::pattern::PATTERN::{{closure}}::RE::{{closure}} (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="725" width="11.1644%" height="15" fill="rgb(226,211,11)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="735.50">tft::detect::pat..</text></g><g><title>regex::builders::string::RegexBuilder::build (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="709" width="11.1644%" height="15" fill="rgb(236,162,54)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="719.50">regex::builders:..</text></g><g><title>regex::builders::Builder::build_one_string (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="693" width="11.1644%" height="15" fill="rgb(220,229,9)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="703.50">regex::builders:..</text></g><g><title>regex_automata::meta::regex::Builder::build (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="677" width="11.1644%" height="15" fill="rgb(250,87,22)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="687.50">regex_automata::..</text></g><g><title>regex_automata::meta::regex::Builder::build_many (80,744,955 samples, 11.16%)</title><rect x="85.4308%" y="661" width="11.1644%" height="15" fill="rgb(239,43,17)" fg:x="617864663" fg:w="80744955"/><text x="85.6808%" y="671.50">regex_automata::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4,862,316 samples, 0.67%)</title><rect x="95.9229%" y="645" width="0.6723%" height="15" fill="rgb(231,177,25)" fg:x="693747302" fg:w="4862316"/><text x="96.1729%" y="655.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4,862,316 samples, 0.67%)</title><rect x="95.9229%" y="629" width="0.6723%" height="15" fill="rgb(219,179,1)" fg:x="693747302" fg:w="4862316"/><text x="96.1729%" y="639.50"></text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit (4,862,316 samples, 0.67%)</title><rect x="95.9229%" y="613" width="0.6723%" height="15" fill="rgb(238,219,53)" fg:x="693747302" fg:w="4862316"/><text x="96.1729%" y="623.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2,540,749 samples, 0.35%)</title><rect x="96.2439%" y="597" width="0.3513%" height="15" fill="rgb(232,167,36)" fg:x="696068869" fg:w="2540749"/><text x="96.4939%" y="607.50"></text></g><g><title>syntastica::processor::process_highlight_iter (90,344,682 samples, 12.49%)</title><rect x="84.4298%" y="1237" width="12.4918%" height="15" fill="rgb(244,19,51)" fg:x="610625620" fg:w="90344682"/><text x="84.6798%" y="1247.50">syntastica::process..</text></g><g><title>&lt;syntastica_highlight::HighlightIter&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (90,344,682 samples, 12.49%)</title><rect x="84.4298%" y="1221" width="12.4918%" height="15" fill="rgb(224,6,22)" fg:x="610625620" fg:w="90344682"/><text x="84.6798%" y="1231.50">&lt;syntastica_highlig..</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl::{{closure}} (87,803,121 samples, 12.14%)</title><rect x="84.7813%" y="1205" width="12.1403%" height="15" fill="rgb(224,145,5)" fg:x="613167181" fg:w="87803121"/><text x="85.0313%" y="1215.50">syntastica::proces..</text></g><g><title>core::option::Option&lt;T&gt;::or_else (87,803,121 samples, 12.14%)</title><rect x="84.7813%" y="1189" width="12.1403%" height="15" fill="rgb(234,130,49)" fg:x="613167181" fg:w="87803121"/><text x="85.0313%" y="1199.50">core::option::Opti..</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl::{{closure}}::{{closure}} (87,803,121 samples, 12.14%)</title><rect x="84.7813%" y="1173" width="12.1403%" height="15" fill="rgb(254,6,2)" fg:x="613167181" fg:w="87803121"/><text x="85.0313%" y="1183.50">syntastica::proces..</text></g><g><title>syntastica_core::language_set::SupportedLanguage::for_injection (87,803,121 samples, 12.14%)</title><rect x="84.7813%" y="1157" width="12.1403%" height="15" fill="rgb(208,96,46)" fg:x="613167181" fg:w="87803121"/><text x="85.0313%" y="1167.50">syntastica_core::l..</text></g><g><title>tft::detect::try_detect (83,105,639 samples, 11.49%)</title><rect x="85.4308%" y="1141" width="11.4908%" height="15" fill="rgb(239,3,39)" fg:x="617864663" fg:w="83105639"/><text x="85.6808%" y="1151.50">tft::detect::try_..</text></g><g><title>core::option::Option&lt;T&gt;::map_or (2,360,684 samples, 0.33%)</title><rect x="96.5952%" y="1125" width="0.3264%" height="15" fill="rgb(233,210,1)" fg:x="698609618" fg:w="2360684"/><text x="96.8452%" y="1135.50"></text></g><g><title>tft::detect::try_detect::{{closure}} (2,360,684 samples, 0.33%)</title><rect x="96.5952%" y="1109" width="0.3264%" height="15" fill="rgb(244,137,37)" fg:x="698609618" fg:w="2360684"/><text x="96.8452%" y="1119.50"></text></g><g><title>regex::regex::string::Regex::is_match (2,360,684 samples, 0.33%)</title><rect x="96.5952%" y="1093" width="0.3264%" height="15" fill="rgb(240,136,2)" fg:x="698609618" fg:w="2360684"/><text x="96.8452%" y="1103.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (2,360,684 samples, 0.33%)</title><rect x="96.5952%" y="1077" width="0.3264%" height="15" fill="rgb(239,18,37)" fg:x="698609618" fg:w="2360684"/><text x="96.8452%" y="1087.50"></text></g><g><title>regex_automata::meta::regex::Regex::search_half (2,360,684 samples, 0.33%)</title><rect x="96.5952%" y="1061" width="0.3264%" height="15" fill="rgb(218,185,22)" fg:x="698609618" fg:w="2360684"/><text x="96.8452%" y="1071.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::is_impossible (2,360,684 samples, 0.33%)</title><rect x="96.5952%" y="1045" width="0.3264%" height="15" fill="rgb(225,218,4)" fg:x="698609618" fg:w="2360684"/><text x="96.8452%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (699,997,210 samples, 96.79%)</title><rect x="0.4875%" y="1349" width="96.7871%" height="15" fill="rgb(230,182,32)" fg:x="3526057" fg:w="699997210"/><text x="0.7375%" y="1359.50">std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (699,997,210 samples, 96.79%)</title><rect x="0.4875%" y="1333" width="96.7871%" height="15" fill="rgb(242,56,43)" fg:x="3526057" fg:w="699997210"/><text x="0.7375%" y="1343.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (699,997,210 samples, 96.79%)</title><rect x="0.4875%" y="1317" width="96.7871%" height="15" fill="rgb(233,99,24)" fg:x="3526057" fg:w="699997210"/><text x="0.7375%" y="1327.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::{{closure}} (699,997,210 samples, 96.79%)</title><rect x="0.4875%" y="1301" width="96.7871%" height="15" fill="rgb(234,209,42)" fg:x="3526057" fg:w="699997210"/><text x="0.7375%" y="1311.50">std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::{{closure}}</text></g><g><title>&lt;kaka_nest::pullmark_parsers::highlight_codeblocks::HighlightCodeblocks&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (699,997,210 samples, 96.79%)</title><rect x="0.4875%" y="1285" width="96.7871%" height="15" fill="rgb(227,7,12)" fg:x="3526057" fg:w="699997210"/><text x="0.7375%" y="1295.50">&lt;kaka_nest::pullmark_parsers::highlight_codeblocks::HighlightCodeblocks&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}}</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process (699,997,210 samples, 96.79%)</title><rect x="0.4875%" y="1269" width="96.7871%" height="15" fill="rgb(245,203,43)" fg:x="3526057" fg:w="699997210"/><text x="0.7375%" y="1279.50">syntastica::processor::Processor&lt;Set&gt;::process</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl (699,997,210 samples, 96.79%)</title><rect x="0.4875%" y="1253" width="96.7871%" height="15" fill="rgb(238,205,33)" fg:x="3526057" fg:w="699997210"/><text x="0.7375%" y="1263.50">syntastica::processor::Processor&lt;Set&gt;::process_impl</text></g><g><title>syntastica_highlight::Highlighter::highlight (2,552,965 samples, 0.35%)</title><rect x="96.9216%" y="1237" width="0.3530%" height="15" fill="rgb(231,56,7)" fg:x="700970302" fg:w="2552965"/><text x="97.1716%" y="1247.50"></text></g><g><title>syntastica_highlight::HighlightIterLayer::new (2,552,965 samples, 0.35%)</title><rect x="96.9216%" y="1221" width="0.3530%" height="15" fill="rgb(244,186,29)" fg:x="700970302" fg:w="2552965"/><text x="97.1716%" y="1231.50"></text></g><g><title>tree_sitter::Parser::parse_with_options (2,552,965 samples, 0.35%)</title><rect x="96.9216%" y="1205" width="0.3530%" height="15" fill="rgb(234,111,31)" fg:x="700970302" fg:w="2552965"/><text x="97.1716%" y="1215.50"></text></g><g><title>ts_parser_parse_with_options (2,552,965 samples, 0.35%)</title><rect x="96.9216%" y="1189" width="0.3530%" height="15" fill="rgb(241,149,10)" fg:x="700970302" fg:w="2552965"/><text x="97.1716%" y="1199.50"></text></g><g><title>ts_parser_parse (2,552,965 samples, 0.35%)</title><rect x="96.9216%" y="1173" width="0.3530%" height="15" fill="rgb(249,206,44)" fg:x="700970302" fg:w="2552965"/><text x="97.1716%" y="1183.50"></text></g><g><title>ts_parser__condense_stack (2,552,965 samples, 0.35%)</title><rect x="96.9216%" y="1157" width="0.3530%" height="15" fill="rgb(251,153,30)" fg:x="700970302" fg:w="2552965"/><text x="97.1716%" y="1167.50"></text></g><g><title>ts_parser__handle_error (2,552,965 samples, 0.35%)</title><rect x="96.9216%" y="1141" width="0.3530%" height="15" fill="rgb(239,152,38)" fg:x="700970302" fg:w="2552965"/><text x="97.1716%" y="1151.50"></text></g><g><title>ts_parser__do_all_potential_reductions (2,552,965 samples, 0.35%)</title><rect x="96.9216%" y="1125" width="0.3530%" height="15" fill="rgb(249,139,47)" fg:x="700970302" fg:w="2552965"/><text x="97.1716%" y="1135.50"></text></g><g><title>ts_language_table_entry (2,552,965 samples, 0.35%)</title><rect x="96.9216%" y="1109" width="0.3530%" height="15" fill="rgb(244,64,35)" fg:x="700970302" fg:w="2552965"/><text x="97.1716%" y="1119.50"></text></g><g><title>ts_language_lookup (2,552,965 samples, 0.35%)</title><rect x="96.9216%" y="1093" width="0.3530%" height="15" fill="rgb(216,46,15)" fg:x="700970302" fg:w="2552965"/><text x="97.1716%" y="1103.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::add_dead_state_loop (2,430,385 samples, 0.34%)</title><rect x="97.2746%" y="1253" width="0.3360%" height="15" fill="rgb(250,74,19)" fg:x="703523267" fg:w="2430385"/><text x="97.5246%" y="1263.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::init_full_state (2,430,385 samples, 0.34%)</title><rect x="97.2746%" y="1237" width="0.3360%" height="15" fill="rgb(249,42,33)" fg:x="703523267" fg:w="2430385"/><text x="97.5246%" y="1247.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::alloc_transition (2,430,385 samples, 0.34%)</title><rect x="97.2746%" y="1221" width="0.3360%" height="15" fill="rgb(242,149,17)" fg:x="703523267" fg:w="2430385"/><text x="97.5246%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,430,385 samples, 0.34%)</title><rect x="97.2746%" y="1205" width="0.3360%" height="15" fill="rgb(244,29,21)" fg:x="703523267" fg:w="2430385"/><text x="97.5246%" y="1215.50"></text></g><g><title>core::ptr::write (2,430,385 samples, 0.34%)</title><rect x="97.2746%" y="1189" width="0.3360%" height="15" fill="rgb(220,130,37)" fg:x="703523267" fg:w="2430385"/><text x="97.5246%" y="1199.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::add_unanchored_start_state_loop (2,458,211 samples, 0.34%)</title><rect x="97.6106%" y="1253" width="0.3399%" height="15" fill="rgb(211,67,2)" fg:x="705953652" fg:w="2458211"/><text x="97.8606%" y="1263.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::add_match (2,382,870 samples, 0.33%)</title><rect x="97.9505%" y="1237" width="0.3295%" height="15" fill="rgb(235,68,52)" fg:x="708411863" fg:w="2382870"/><text x="98.2005%" y="1247.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::alloc_match (2,382,870 samples, 0.33%)</title><rect x="97.9505%" y="1221" width="0.3295%" height="15" fill="rgb(246,142,3)" fg:x="708411863" fg:w="2382870"/><text x="98.2005%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,382,870 samples, 0.33%)</title><rect x="97.9505%" y="1205" width="0.3295%" height="15" fill="rgb(241,25,7)" fg:x="708411863" fg:w="2382870"/><text x="98.2005%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2,382,870 samples, 0.33%)</title><rect x="97.9505%" y="1189" width="0.3295%" height="15" fill="rgb(242,119,39)" fg:x="708411863" fg:w="2382870"/><text x="98.2005%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (2,382,870 samples, 0.33%)</title><rect x="97.9505%" y="1173" width="0.3295%" height="15" fill="rgb(241,98,45)" fg:x="708411863" fg:w="2382870"/><text x="98.2005%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2,382,870 samples, 0.33%)</title><rect x="97.9505%" y="1157" width="0.3295%" height="15" fill="rgb(254,28,30)" fg:x="708411863" fg:w="2382870"/><text x="98.2005%" y="1167.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,382,870 samples, 0.33%)</title><rect x="97.9505%" y="1141" width="0.3295%" height="15" fill="rgb(241,142,54)" fg:x="708411863" fg:w="2382870"/><text x="98.2005%" y="1151.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2,382,870 samples, 0.33%)</title><rect x="97.9505%" y="1125" width="0.3295%" height="15" fill="rgb(222,85,15)" fg:x="708411863" fg:w="2382870"/><text x="98.2005%" y="1135.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2,382,870 samples, 0.33%)</title><rect x="97.9505%" y="1109" width="0.3295%" height="15" fill="rgb(210,85,47)" fg:x="708411863" fg:w="2382870"/><text x="98.2005%" y="1119.50"></text></g><g><title>alloc::alloc::realloc (2,382,870 samples, 0.33%)</title><rect x="97.9505%" y="1093" width="0.3295%" height="15" fill="rgb(224,206,25)" fg:x="708411863" fg:w="2382870"/><text x="98.2005%" y="1103.50"></text></g><g><title>realloc (2,382,870 samples, 0.33%)</title><rect x="97.9505%" y="1077" width="0.3295%" height="15" fill="rgb(243,201,19)" fg:x="708411863" fg:w="2382870"/><text x="98.2005%" y="1087.50"></text></g><g><title>_int_realloc (2,382,870 samples, 0.33%)</title><rect x="97.9505%" y="1061" width="0.3295%" height="15" fill="rgb(236,59,4)" fg:x="708411863" fg:w="2382870"/><text x="98.2005%" y="1071.50"></text></g><g><title>_int_malloc (2,382,870 samples, 0.33%)</title><rect x="97.9505%" y="1045" width="0.3295%" height="15" fill="rgb(254,179,45)" fg:x="708411863" fg:w="2382870"/><text x="98.2005%" y="1055.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::build_trie (4,624,211 samples, 0.64%)</title><rect x="97.9505%" y="1253" width="0.6394%" height="15" fill="rgb(226,14,10)" fg:x="708411863" fg:w="4624211"/><text x="98.2005%" y="1263.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::add_transition (2,241,341 samples, 0.31%)</title><rect x="98.2800%" y="1237" width="0.3099%" height="15" fill="rgb(244,27,41)" fg:x="710794733" fg:w="2241341"/><text x="98.5300%" y="1247.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::init_unanchored_start_state (2,540,621 samples, 0.35%)</title><rect x="98.5899%" y="1253" width="0.3513%" height="15" fill="rgb(235,35,32)" fg:x="713036074" fg:w="2540621"/><text x="98.8399%" y="1263.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::init_full_state (2,540,621 samples, 0.35%)</title><rect x="98.5899%" y="1237" width="0.3513%" height="15" fill="rgb(218,68,31)" fg:x="713036074" fg:w="2540621"/><text x="98.8399%" y="1247.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::alloc_transition (2,540,621 samples, 0.35%)</title><rect x="98.5899%" y="1221" width="0.3513%" height="15" fill="rgb(207,120,37)" fg:x="713036074" fg:w="2540621"/><text x="98.8399%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,540,621 samples, 0.35%)</title><rect x="98.5899%" y="1205" width="0.3513%" height="15" fill="rgb(227,98,0)" fg:x="713036074" fg:w="2540621"/><text x="98.8399%" y="1215.50"></text></g><g><title>core::ptr::write (2,540,621 samples, 0.35%)</title><rect x="98.5899%" y="1189" width="0.3513%" height="15" fill="rgb(207,7,3)" fg:x="713036074" fg:w="2540621"/><text x="98.8399%" y="1199.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (715,452,997 samples, 98.92%)</title><rect x="0.3502%" y="1573" width="98.9241%" height="15" fill="rgb(206,98,19)" fg:x="2532673" fg:w="715452997"/><text x="0.6002%" y="1583.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (715,452,997 samples, 98.92%)</title><rect x="0.3502%" y="1557" width="98.9241%" height="15" fill="rgb(217,5,26)" fg:x="2532673" fg:w="715452997"/><text x="0.6002%" y="1567.50">__libc_start_call_main</text></g><g><title>main (715,452,997 samples, 98.92%)</title><rect x="0.3502%" y="1541" width="98.9241%" height="15" fill="rgb(235,190,38)" fg:x="2532673" fg:w="715452997"/><text x="0.6002%" y="1551.50">main</text></g><g><title>std::rt::lang_start_internal (715,452,997 samples, 98.92%)</title><rect x="0.3502%" y="1525" width="98.9241%" height="15" fill="rgb(247,86,24)" fg:x="2532673" fg:w="715452997"/><text x="0.6002%" y="1535.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (715,452,997 samples, 98.92%)</title><rect x="0.3502%" y="1509" width="98.9241%" height="15" fill="rgb(205,101,16)" fg:x="2532673" fg:w="715452997"/><text x="0.6002%" y="1519.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (715,452,997 samples, 98.92%)</title><rect x="0.3502%" y="1493" width="98.9241%" height="15" fill="rgb(246,168,33)" fg:x="2532673" fg:w="715452997"/><text x="0.6002%" y="1503.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (715,452,997 samples, 98.92%)</title><rect x="0.3502%" y="1477" width="98.9241%" height="15" fill="rgb(231,114,1)" fg:x="2532673" fg:w="715452997"/><text x="0.6002%" y="1487.50">core::ops::function::FnOnce::call_once</text></g><g><title>kaka_nest::main (715,452,997 samples, 98.92%)</title><rect x="0.3502%" y="1461" width="98.9241%" height="15" fill="rgb(207,184,53)" fg:x="2532673" fg:w="715452997"/><text x="0.6002%" y="1471.50">kaka_nest::main</text></g><g><title>kaka_nest::get_markdown::get_blogs (715,452,997 samples, 98.92%)</title><rect x="0.3502%" y="1445" width="98.9241%" height="15" fill="rgb(224,95,51)" fg:x="2532673" fg:w="715452997"/><text x="0.6002%" y="1455.50">kaka_nest::get_markdown::get_blogs</text></g><g><title>pulldown_cmark::html::push_html (715,452,997 samples, 98.92%)</title><rect x="0.3502%" y="1429" width="98.9241%" height="15" fill="rgb(212,188,45)" fg:x="2532673" fg:w="715452997"/><text x="0.6002%" y="1439.50">pulldown_cmark::html::push_html</text></g><g><title>pulldown_cmark::html::write_html_fmt (715,452,997 samples, 98.92%)</title><rect x="0.3502%" y="1413" width="98.9241%" height="15" fill="rgb(223,154,38)" fg:x="2532673" fg:w="715452997"/><text x="0.6002%" y="1423.50">pulldown_cmark::html::write_html_fmt</text></g><g><title>pulldown_cmark::html::HtmlWriter&lt;I,W&gt;::run (715,452,997 samples, 98.92%)</title><rect x="0.3502%" y="1397" width="98.9241%" height="15" fill="rgb(251,22,52)" fg:x="2532673" fg:w="715452997"/><text x="0.6002%" y="1407.50">pulldown_cmark::html::HtmlWriter&lt;I,W&gt;::run</text></g><g><title>&lt;kaka_nest::pullmark_parsers::format_blockquotes::FormatBlockquotes&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (715,452,997 samples, 98.92%)</title><rect x="0.3502%" y="1381" width="98.9241%" height="15" fill="rgb(229,209,22)" fg:x="2532673" fg:w="715452997"/><text x="0.6002%" y="1391.50">&lt;kaka_nest::pullmark_parsers::format_blockquotes::FormatBlockquotes&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;kaka_nest::pullmark_parsers::highlight_codeblocks::HighlightCodeblocks&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (714,459,613 samples, 98.79%)</title><rect x="0.4875%" y="1365" width="98.7867%" height="15" fill="rgb(234,138,34)" fg:x="3526057" fg:w="714459613"/><text x="0.7375%" y="1375.50">&lt;kaka_nest::pullmark_parsers::highlight_codeblocks::HighlightCodeblocks&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>syntastica::renderer::render (14,462,403 samples, 2.00%)</title><rect x="97.2746%" y="1349" width="1.9997%" height="15" fill="rgb(212,95,11)" fg:x="703523267" fg:w="14462403"/><text x="97.5246%" y="1359.50">s..</text></g><g><title>&lt;syntastica::renderer::HtmlRenderer as syntastica::renderer::Renderer&gt;::escape (14,462,403 samples, 2.00%)</title><rect x="97.2746%" y="1333" width="1.9997%" height="15" fill="rgb(240,179,47)" fg:x="703523267" fg:w="14462403"/><text x="97.5246%" y="1343.50">&lt;..</text></g><g><title>aho_corasick::ahocorasick::AhoCorasick::new (14,462,403 samples, 2.00%)</title><rect x="97.2746%" y="1317" width="1.9997%" height="15" fill="rgb(240,163,11)" fg:x="703523267" fg:w="14462403"/><text x="97.5246%" y="1327.50">a..</text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build (14,462,403 samples, 2.00%)</title><rect x="97.2746%" y="1301" width="1.9997%" height="15" fill="rgb(236,37,12)" fg:x="703523267" fg:w="14462403"/><text x="97.5246%" y="1311.50">a..</text></g><g><title>aho_corasick::nfa::noncontiguous::Builder::build (14,462,403 samples, 2.00%)</title><rect x="97.2746%" y="1285" width="1.9997%" height="15" fill="rgb(232,164,16)" fg:x="703523267" fg:w="14462403"/><text x="97.5246%" y="1295.50">a..</text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::compile (14,462,403 samples, 2.00%)</title><rect x="97.2746%" y="1269" width="1.9997%" height="15" fill="rgb(244,205,15)" fg:x="703523267" fg:w="14462403"/><text x="97.5246%" y="1279.50">a..</text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::shuffle (2,408,975 samples, 0.33%)</title><rect x="98.9412%" y="1253" width="0.3331%" height="15" fill="rgb(223,117,47)" fg:x="715576695" fg:w="2408975"/><text x="99.1912%" y="1263.50"></text></g><g><title>aho_corasick::util::remapper::Remapper::remap (2,408,975 samples, 0.33%)</title><rect x="98.9412%" y="1237" width="0.3331%" height="15" fill="rgb(244,107,35)" fg:x="715576695" fg:w="2408975"/><text x="99.1912%" y="1247.50"></text></g><g><title>&lt;aho_corasick::nfa::noncontiguous::NFA as aho_corasick::util::remapper::Remappable&gt;::remap (2,408,975 samples, 0.33%)</title><rect x="98.9412%" y="1221" width="0.3331%" height="15" fill="rgb(205,140,8)" fg:x="715576695" fg:w="2408975"/><text x="99.1912%" y="1231.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::remap (2,408,975 samples, 0.33%)</title><rect x="98.9412%" y="1205" width="0.3331%" height="15" fill="rgb(228,84,46)" fg:x="715576695" fg:w="2408975"/><text x="99.1912%" y="1215.50"></text></g><g><title>aho_corasick::util::remapper::Remapper::remap::{{closure}} (2,408,975 samples, 0.33%)</title><rect x="98.9412%" y="1189" width="0.3331%" height="15" fill="rgb(254,188,9)" fg:x="715576695" fg:w="2408975"/><text x="99.1912%" y="1199.50"></text></g><g><title>aho_corasick::util::remapper::IndexMapper::to_index (2,408,975 samples, 0.33%)</title><rect x="98.9412%" y="1173" width="0.3331%" height="15" fill="rgb(206,112,54)" fg:x="715576695" fg:w="2408975"/><text x="99.1912%" y="1183.50"></text></g><g><title>_start (715,954,501 samples, 98.99%)</title><rect x="0.3502%" y="1589" width="98.9934%" height="15" fill="rgb(216,84,49)" fg:x="2532673" fg:w="715954501"/><text x="0.6002%" y="1599.50">_start</text></g><g><title>_dl_start (501,504 samples, 0.07%)</title><rect x="99.2743%" y="1573" width="0.0693%" height="15" fill="rgb(214,194,35)" fg:x="717985670" fg:w="501504"/><text x="99.5243%" y="1583.50"></text></g><g><title>_dl_sysdep_start (501,504 samples, 0.07%)</title><rect x="99.2743%" y="1557" width="0.0693%" height="15" fill="rgb(249,28,3)" fg:x="717985670" fg:w="501504"/><text x="99.5243%" y="1567.50"></text></g><g><title>dl_main (501,504 samples, 0.07%)</title><rect x="99.2743%" y="1541" width="0.0693%" height="15" fill="rgb(222,56,52)" fg:x="717985670" fg:w="501504"/><text x="99.5243%" y="1551.50"></text></g><g><title>_dl_relocate_object (501,504 samples, 0.07%)</title><rect x="99.2743%" y="1525" width="0.0693%" height="15" fill="rgb(245,217,50)" fg:x="717985670" fg:w="501504"/><text x="99.5243%" y="1535.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2,281,032 samples, 0.32%)</title><rect x="99.3436%" y="1589" width="0.3154%" height="15" fill="rgb(213,201,24)" fg:x="718487174" fg:w="2281032"/><text x="99.5936%" y="1599.50"></text></g><g><title>all (723,234,334 samples, 100%)</title><rect x="0.0000%" y="1621" width="100.0000%" height="15" fill="rgb(248,116,28)" fg:x="0" fg:w="723234334"/><text x="0.2500%" y="1631.50"></text></g><g><title>kaka-nest (723,234,334 samples, 100.00%)</title><rect x="0.0000%" y="1605" width="100.0000%" height="15" fill="rgb(219,72,43)" fg:x="0" fg:w="723234334"/><text x="0.2500%" y="1615.50">kaka-nest</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2,466,128 samples, 0.34%)</title><rect x="99.6590%" y="1589" width="0.3410%" height="15" fill="rgb(209,138,14)" fg:x="720768206" fg:w="2466128"/><text x="99.9090%" y="1599.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (2,466,128 samples, 0.34%)</title><rect x="99.6590%" y="1573" width="0.3410%" height="15" fill="rgb(222,18,33)" fg:x="720768206" fg:w="2466128"/><text x="99.9090%" y="1583.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (2,466,128 samples, 0.34%)</title><rect x="99.6590%" y="1557" width="0.3410%" height="15" fill="rgb(213,199,7)" fg:x="720768206" fg:w="2466128"/><text x="99.9090%" y="1567.50"></text></g></svg></svg>