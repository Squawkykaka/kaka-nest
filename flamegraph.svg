<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1654" onload="init(evt)" viewBox="0 0 1200 1654" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1654" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1637.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1637.00"> </text><svg id="frames" x="10" width="1180" total_samples="733507707"><g><title>kaka_nest::pullmark_parsers::format_codeblock_html (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="1205" width="0.4632%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="1215.50"></text></g><g><title>&lt;kaka_nest::HANDLEBARS as core::ops::deref::Deref&gt;::deref (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="1189" width="0.4632%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="1199.50"></text></g><g><title>&lt;kaka_nest::HANDLEBARS as core::ops::deref::Deref&gt;::deref::__stability (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="1173" width="0.4632%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="1183.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="1157" width="0.4632%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="1167.50"></text></g><g><title>std::sync::poison::once::Once::call_once (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="1141" width="0.4632%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="1151.50"></text></g><g><title>std::sys::sync::once::futex::Once::call (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="1125" width="0.4632%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="1135.50"></text></g><g><title>std::sync::poison::once::Once::call_once::{{closure}} (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="1109" width="0.4632%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="1119.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="1093" width="0.4632%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="1103.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="1077" width="0.4632%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="1087.50"></text></g><g><title>&lt;kaka_nest::HANDLEBARS as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="1061" width="0.4632%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="1071.50"></text></g><g><title>handlebars::registry::Registry::register_template_file (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="1045" width="0.4632%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="1055.50"></text></g><g><title>handlebars::registry::Registry::register_template_string (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="1029" width="0.4632%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="1039.50"></text></g><g><title>handlebars::template::Template::compile2 (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="1013" width="0.4632%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="1023.50"></text></g><g><title>handlebars::template::Template::parse_expression (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="997" width="0.4632%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="1007.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="981" width="0.4632%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="991.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="965" width="0.4632%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="975.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="949" width="0.4632%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="959.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="933" width="0.4632%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="917" width="0.4632%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="901" width="0.4632%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="911.50"></text></g><g><title>&lt;pest::iterators::flat_pairs::FlatPairs&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="885" width="0.4632%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="895.50"></text></g><g><title>pest::iterators::flat_pairs::FlatPairs&lt;R&gt;::next_start (3,397,295 samples, 0.46%)</title><rect x="0.0000%" y="869" width="0.4632%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="3397295"/><text x="0.2500%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (3,110,156 samples, 0.42%)</title><rect x="0.4632%" y="997" width="0.4240%" height="15" fill="rgb(221,5,38)" fg:x="3397295" fg:w="3110156"/><text x="0.7132%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (3,110,156 samples, 0.42%)</title><rect x="0.4632%" y="981" width="0.4240%" height="15" fill="rgb(247,18,42)" fg:x="3397295" fg:w="3110156"/><text x="0.7132%" y="991.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (3,110,156 samples, 0.42%)</title><rect x="0.4632%" y="965" width="0.4240%" height="15" fill="rgb(241,131,45)" fg:x="3397295" fg:w="3110156"/><text x="0.7132%" y="975.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,110,156 samples, 0.42%)</title><rect x="0.4632%" y="949" width="0.4240%" height="15" fill="rgb(249,31,29)" fg:x="3397295" fg:w="3110156"/><text x="0.7132%" y="959.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,110,156 samples, 0.42%)</title><rect x="0.4632%" y="933" width="0.4240%" height="15" fill="rgb(225,111,53)" fg:x="3397295" fg:w="3110156"/><text x="0.7132%" y="943.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,110,156 samples, 0.42%)</title><rect x="0.4632%" y="917" width="0.4240%" height="15" fill="rgb(238,160,17)" fg:x="3397295" fg:w="3110156"/><text x="0.7132%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,110,156 samples, 0.42%)</title><rect x="0.4632%" y="901" width="0.4240%" height="15" fill="rgb(214,148,48)" fg:x="3397295" fg:w="3110156"/><text x="0.7132%" y="911.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (3,110,156 samples, 0.42%)</title><rect x="0.4632%" y="885" width="0.4240%" height="15" fill="rgb(232,36,49)" fg:x="3397295" fg:w="3110156"/><text x="0.7132%" y="895.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (3,110,156 samples, 0.42%)</title><rect x="0.4632%" y="869" width="0.4240%" height="15" fill="rgb(209,103,24)" fg:x="3397295" fg:w="3110156"/><text x="0.7132%" y="879.50"></text></g><g><title>core::str::validations::next_code_point (3,110,156 samples, 0.42%)</title><rect x="0.4632%" y="853" width="0.4240%" height="15" fill="rgb(229,88,8)" fg:x="3397295" fg:w="3110156"/><text x="0.7132%" y="863.50"></text></g><g><title>tree_sitter::Query::from_raw_parts (6,362,721 samples, 0.87%)</title><rect x="0.4632%" y="1013" width="0.8674%" height="15" fill="rgb(213,181,19)" fg:x="3397295" fg:w="6362721"/><text x="0.7132%" y="1023.50"></text></g><g><title>regex::regex::bytes::Regex::new (3,252,565 samples, 0.44%)</title><rect x="0.8872%" y="997" width="0.4434%" height="15" fill="rgb(254,191,54)" fg:x="6507451" fg:w="3252565"/><text x="1.1372%" y="1007.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::build (3,252,565 samples, 0.44%)</title><rect x="0.8872%" y="981" width="0.4434%" height="15" fill="rgb(241,83,37)" fg:x="6507451" fg:w="3252565"/><text x="1.1372%" y="991.50"></text></g><g><title>regex::builders::Builder::build_one_bytes (3,252,565 samples, 0.44%)</title><rect x="0.8872%" y="965" width="0.4434%" height="15" fill="rgb(233,36,39)" fg:x="6507451" fg:w="3252565"/><text x="1.1372%" y="975.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (3,252,565 samples, 0.44%)</title><rect x="0.8872%" y="949" width="0.4434%" height="15" fill="rgb(226,3,54)" fg:x="6507451" fg:w="3252565"/><text x="1.1372%" y="959.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (3,252,565 samples, 0.44%)</title><rect x="0.8872%" y="933" width="0.4434%" height="15" fill="rgb(245,192,40)" fg:x="6507451" fg:w="3252565"/><text x="1.1372%" y="943.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (3,252,565 samples, 0.44%)</title><rect x="0.8872%" y="917" width="0.4434%" height="15" fill="rgb(238,167,29)" fg:x="6507451" fg:w="3252565"/><text x="1.1372%" y="927.50"></text></g><g><title>__rustc::__rdl_dealloc (3,252,565 samples, 0.44%)</title><rect x="0.8872%" y="901" width="0.4434%" height="15" fill="rgb(232,182,51)" fg:x="6507451" fg:w="3252565"/><text x="1.1372%" y="911.50"></text></g><g><title>analysis_subgraph_node__compare (1,932,205 samples, 0.26%)</title><rect x="2.4665%" y="981" width="0.2634%" height="15" fill="rgb(231,60,39)" fg:x="18091984" fg:w="1932205"/><text x="2.7165%" y="991.50"></text></g><g><title>state_predecessor_map_add (2,327,960 samples, 0.32%)</title><rect x="2.7299%" y="981" width="0.3174%" height="15" fill="rgb(208,69,12)" fg:x="20024189" fg:w="2327960"/><text x="2.9799%" y="991.50"></text></g><g><title>ts_lookahead_iterator__next (6,005,809 samples, 0.82%)</title><rect x="3.0473%" y="981" width="0.8188%" height="15" fill="rgb(235,93,37)" fg:x="22352149" fg:w="6005809"/><text x="3.2973%" y="991.50"></text></g><g><title>analysis_state__compare_position (3,250,427 samples, 0.44%)</title><rect x="43.2448%" y="965" width="0.4431%" height="15" fill="rgb(213,116,39)" fg:x="317203616" fg:w="3250427"/><text x="43.4948%" y="975.50"></text></g><g><title>analysis_state__recursion_depth (2,945,084 samples, 0.40%)</title><rect x="43.6879%" y="965" width="0.4015%" height="15" fill="rgb(222,207,29)" fg:x="320454043" fg:w="2945084"/><text x="43.9379%" y="975.50"></text></g><g><title>analysis_state__top (5,564,750 samples, 0.76%)</title><rect x="44.0894%" y="965" width="0.7586%" height="15" fill="rgb(206,96,30)" fg:x="323399127" fg:w="5564750"/><text x="44.3394%" y="975.50"></text></g><g><title>_array__splice (3,673,507 samples, 0.50%)</title><rect x="51.3792%" y="949" width="0.5008%" height="15" fill="rgb(218,138,4)" fg:x="376870045" fg:w="3673507"/><text x="51.6292%" y="959.50"></text></g><g><title>memmove (3,673,507 samples, 0.50%)</title><rect x="51.3792%" y="933" width="0.5008%" height="15" fill="rgb(250,191,14)" fg:x="376870045" fg:w="3673507"/><text x="51.6292%" y="943.50"></text></g><g><title>__memmove_avx_unaligned_erms (3,673,507 samples, 0.50%)</title><rect x="51.3792%" y="917" width="0.5008%" height="15" fill="rgb(239,60,40)" fg:x="376870045" fg:w="3673507"/><text x="51.6292%" y="927.50"></text></g><g><title>analysis_state__compare (30,260,582 samples, 4.13%)</title><rect x="52.3076%" y="933" width="4.1255%" height="15" fill="rgb(206,27,48)" fg:x="383680404" fg:w="30260582"/><text x="52.5576%" y="943.50">anal..</text></g><g><title>analysis_state__compare (87,549,153 samples, 11.94%)</title><rect x="51.8800%" y="949" width="11.9357%" height="15" fill="rgb(225,35,8)" fg:x="380543552" fg:w="87549153"/><text x="52.1300%" y="959.50">analysis_state__co..</text></g><g><title>analysis_state__compare_position (54,151,719 samples, 7.38%)</title><rect x="56.4331%" y="933" width="7.3826%" height="15" fill="rgb(250,213,24)" fg:x="413940986" fg:w="54151719"/><text x="56.6831%" y="943.50">analysis_s..</text></g><g><title>analysis_state_set__insert_sorted (148,471,969 samples, 20.24%)</title><rect x="44.8480%" y="965" width="20.2414%" height="15" fill="rgb(247,123,22)" fg:x="328963877" fg:w="148471969"/><text x="45.0980%" y="975.50">analysis_state_set__insert_sorted</text></g><g><title>analysis_state_pool__clone_or_reuse (9,343,141 samples, 1.27%)</title><rect x="63.8156%" y="949" width="1.2738%" height="15" fill="rgb(231,138,38)" fg:x="468092705" fg:w="9343141"/><text x="64.0656%" y="959.50"></text></g><g><title>analysis_subgraph_node__compare (54,365,869 samples, 7.41%)</title><rect x="65.0894%" y="965" width="7.4118%" height="15" fill="rgb(231,145,46)" fg:x="477435846" fg:w="54365869"/><text x="65.3394%" y="975.50">analysis_s..</text></g><g><title>ts_language_alias_at (9,192,578 samples, 1.25%)</title><rect x="72.5012%" y="965" width="1.2532%" height="15" fill="rgb(251,118,11)" fg:x="531801715" fg:w="9192578"/><text x="72.7512%" y="975.50"></text></g><g><title>ts_language_alias_at (9,192,578 samples, 1.25%)</title><rect x="72.5012%" y="949" width="1.2532%" height="15" fill="rgb(217,147,25)" fg:x="531801715" fg:w="9192578"/><text x="72.7512%" y="959.50"></text></g><g><title>ts_language_field_map (6,587,637 samples, 0.90%)</title><rect x="73.7544%" y="965" width="0.8981%" height="15" fill="rgb(247,81,37)" fg:x="540994293" fg:w="6587637"/><text x="74.0044%" y="975.50"></text></g><g><title>ts_language_field_map (6,587,637 samples, 0.90%)</title><rect x="73.7544%" y="949" width="0.8981%" height="15" fill="rgb(209,12,38)" fg:x="540994293" fg:w="6587637"/><text x="74.0044%" y="959.50"></text></g><g><title>ts_query__analyze_patterns (611,488,140 samples, 83.36%)</title><rect x="1.3306%" y="997" width="83.3649%" height="15" fill="rgb(227,1,9)" fg:x="9760016" fg:w="611488140"/><text x="1.5806%" y="1007.50">ts_query__analyze_patterns</text></g><g><title>ts_query__perform_analysis (592,890,198 samples, 80.83%)</title><rect x="3.8661%" y="981" width="80.8294%" height="15" fill="rgb(248,47,43)" fg:x="28357958" fg:w="592890198"/><text x="4.1161%" y="991.50">ts_query__perform_analysis</text></g><g><title>ts_lookahead_iterator__next (73,666,226 samples, 10.04%)</title><rect x="74.6525%" y="965" width="10.0430%" height="15" fill="rgb(221,10,30)" fg:x="547581930" fg:w="73666226"/><text x="74.9025%" y="975.50">ts_lookahead_it..</text></g><g><title>ts_language_symbol_for_name (768,733 samples, 0.10%)</title><rect x="84.6955%" y="981" width="0.1048%" height="15" fill="rgb(210,229,1)" fg:x="621248156" fg:w="768733"/><text x="84.9455%" y="991.50"></text></g><g><title>__strncmp_avx2 (768,733 samples, 0.10%)</title><rect x="84.6955%" y="965" width="0.1048%" height="15" fill="rgb(222,148,37)" fg:x="621248156" fg:w="768733"/><text x="84.9455%" y="975.50"></text></g><g><title>&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language (619,190,627 samples, 84.42%)</title><rect x="0.4632%" y="1173" width="84.4150%" height="15" fill="rgb(234,67,33)" fg:x="3397295" fg:w="619190627"/><text x="0.7132%" y="1183.50">&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (619,190,627 samples, 84.42%)</title><rect x="0.4632%" y="1157" width="84.4150%" height="15" fill="rgb(247,98,35)" fg:x="3397295" fg:w="619190627"/><text x="0.7132%" y="1167.50">once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (619,190,627 samples, 84.42%)</title><rect x="0.4632%" y="1141" width="84.4150%" height="15" fill="rgb(247,138,52)" fg:x="3397295" fg:w="619190627"/><text x="0.7132%" y="1151.50">once_cell::imp::OnceCell&lt;T&gt;::initialize</text></g><g><title>once_cell::imp::initialize_or_wait (619,190,627 samples, 84.42%)</title><rect x="0.4632%" y="1125" width="84.4150%" height="15" fill="rgb(213,79,30)" fg:x="3397295" fg:w="619190627"/><text x="0.7132%" y="1135.50">once_cell::imp::initialize_or_wait</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (619,190,627 samples, 84.42%)</title><rect x="0.4632%" y="1109" width="84.4150%" height="15" fill="rgb(246,177,23)" fg:x="3397295" fg:w="619190627"/><text x="0.7132%" y="1119.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (619,190,627 samples, 84.42%)</title><rect x="0.4632%" y="1093" width="84.4150%" height="15" fill="rgb(230,62,27)" fg:x="3397295" fg:w="619190627"/><text x="0.7132%" y="1103.50">once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}}</text></g><g><title>&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language::{{closure}} (619,190,627 samples, 84.42%)</title><rect x="0.4632%" y="1077" width="84.4150%" height="15" fill="rgb(216,154,8)" fg:x="3397295" fg:w="619190627"/><text x="0.7132%" y="1087.50">&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language::{{closure}}</text></g><g><title>syntastica_parsers::Lang::get_config (619,190,627 samples, 84.42%)</title><rect x="0.4632%" y="1061" width="84.4150%" height="15" fill="rgb(244,35,45)" fg:x="3397295" fg:w="619190627"/><text x="0.7132%" y="1071.50">syntastica_parsers::Lang::get_config</text></g><g><title>syntastica_highlight::HighlightConfiguration::new (619,190,627 samples, 84.42%)</title><rect x="0.4632%" y="1045" width="84.4150%" height="15" fill="rgb(251,115,12)" fg:x="3397295" fg:w="619190627"/><text x="0.7132%" y="1055.50">syntastica_highlight::HighlightConfiguration::new</text></g><g><title>tree_sitter::Query::new (619,190,627 samples, 84.42%)</title><rect x="0.4632%" y="1029" width="84.4150%" height="15" fill="rgb(240,54,50)" fg:x="3397295" fg:w="619190627"/><text x="0.7132%" y="1039.50">tree_sitter::Query::new</text></g><g><title>ts_query_new (612,827,906 samples, 83.55%)</title><rect x="1.3306%" y="1013" width="83.5476%" height="15" fill="rgb(233,84,52)" fg:x="9760016" fg:w="612827906"/><text x="1.5806%" y="1023.50">ts_query_new</text></g><g><title>ts_query__parse_pattern (1,339,766 samples, 0.18%)</title><rect x="84.6955%" y="997" width="0.1827%" height="15" fill="rgb(207,117,47)" fg:x="621248156" fg:w="1339766"/><text x="84.9455%" y="1007.50"></text></g><g><title>ts_query__parse_pattern (571,033 samples, 0.08%)</title><rect x="84.8003%" y="981" width="0.0778%" height="15" fill="rgb(249,43,39)" fg:x="622016889" fg:w="571033"/><text x="85.0503%" y="991.50"></text></g><g><title>__strncmp_avx2 (571,033 samples, 0.08%)</title><rect x="84.8003%" y="965" width="0.0778%" height="15" fill="rgb(209,38,44)" fg:x="622016889" fg:w="571033"/><text x="85.0503%" y="975.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (3,315,818 samples, 0.45%)</title><rect x="84.8782%" y="1141" width="0.4520%" height="15" fill="rgb(236,212,23)" fg:x="622587922" fg:w="3315818"/><text x="85.1282%" y="1151.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (3,315,818 samples, 0.45%)</title><rect x="84.8782%" y="1125" width="0.4520%" height="15" fill="rgb(242,79,21)" fg:x="622587922" fg:w="3315818"/><text x="85.1282%" y="1135.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (3,315,818 samples, 0.45%)</title><rect x="84.8782%" y="1109" width="0.4520%" height="15" fill="rgb(211,96,35)" fg:x="622587922" fg:w="3315818"/><text x="85.1282%" y="1119.50"></text></g><g><title>&lt;syntastica_highlight::_QueryCaptures&lt;T,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,315,818 samples, 0.45%)</title><rect x="84.8782%" y="1093" width="0.4520%" height="15" fill="rgb(253,215,40)" fg:x="622587922" fg:w="3315818"/><text x="85.1282%" y="1103.50"></text></g><g><title>ts_query_cursor_next_capture (3,315,818 samples, 0.45%)</title><rect x="84.8782%" y="1077" width="0.4520%" height="15" fill="rgb(211,81,21)" fg:x="622587922" fg:w="3315818"/><text x="85.1282%" y="1087.50"></text></g><g><title>ts_query_cursor__advance (3,315,818 samples, 0.45%)</title><rect x="84.8782%" y="1061" width="0.4520%" height="15" fill="rgb(208,190,38)" fg:x="622587922" fg:w="3315818"/><text x="85.1282%" y="1071.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="1077" width="0.4762%" height="15" fill="rgb(235,213,38)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="1087.50"></text></g><g><title>syntastica_core::language_set::SupportedLanguage::for_injection::{{closure}} (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="1061" width="0.4762%" height="15" fill="rgb(237,122,38)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="1071.50"></text></g><g><title>tft::detect::try_detect (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="1045" width="0.4762%" height="15" fill="rgb(244,218,35)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="1055.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="1029" width="0.4762%" height="15" fill="rgb(240,68,47)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="1039.50"></text></g><g><title>tft::detect::try_detect::{{closure}} (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="1013" width="0.4762%" height="15" fill="rgb(210,16,53)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="1023.50"></text></g><g><title>regex::regex::string::Regex::is_match (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="997" width="0.4762%" height="15" fill="rgb(235,124,12)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="1007.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="981" width="0.4762%" height="15" fill="rgb(224,169,11)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="991.50"></text></g><g><title>regex_automata::meta::regex::Regex::search_half (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="965" width="0.4762%" height="15" fill="rgb(250,166,2)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="975.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="949" width="0.4762%" height="15" fill="rgb(242,216,29)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="959.50"></text></g><g><title>regex_automata::meta::wrappers::HybridEngine::try_search_half_fwd (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="933" width="0.4762%" height="15" fill="rgb(230,116,27)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="943.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::try_search_fwd (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="917" width="0.4762%" height="15" fill="rgb(228,99,48)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="927.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="901" width="0.4762%" height="15" fill="rgb(253,11,6)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="911.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd_imp (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="885" width="0.4762%" height="15" fill="rgb(247,143,39)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="895.50"></text></g><g><title>regex_automata::hybrid::search::init_fwd (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="869" width="0.4762%" height="15" fill="rgb(236,97,10)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="879.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::start_state_forward (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="853" width="0.4762%" height="15" fill="rgb(233,208,19)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="863.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::start_state (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="837" width="0.4762%" height="15" fill="rgb(216,164,2)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="847.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="821" width="0.4762%" height="15" fill="rgb(220,129,5)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="831.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_one (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="805" width="0.4762%" height="15" fill="rgb(242,17,10)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="815.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="789" width="0.4762%" height="15" fill="rgb(242,107,0)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="773" width="0.4762%" height="15" fill="rgb(251,28,31)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="757" width="0.4762%" height="15" fill="rgb(233,223,10)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="741" width="0.4762%" height="15" fill="rgb(215,21,27)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="725" width="0.4762%" height="15" fill="rgb(232,23,21)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="709" width="0.4762%" height="15" fill="rgb(244,5,23)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="719.50"></text></g><g><title>malloc (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="693" width="0.4762%" height="15" fill="rgb(226,81,46)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="703.50"></text></g><g><title>_int_malloc (3,493,019 samples, 0.48%)</title><rect x="85.3302%" y="677" width="0.4762%" height="15" fill="rgb(247,70,30)" fg:x="625903740" fg:w="3493019"/><text x="85.5802%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::ast::Ast&gt;&gt; (3,408,883 samples, 0.46%)</title><rect x="85.8064%" y="581" width="0.4647%" height="15" fill="rgb(212,68,19)" fg:x="629396759" fg:w="3408883"/><text x="86.0564%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,408,883 samples, 0.46%)</title><rect x="85.8064%" y="565" width="0.4647%" height="15" fill="rgb(240,187,13)" fg:x="629396759" fg:w="3408883"/><text x="86.0564%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_syntax::ast::Ast]&gt; (3,408,883 samples, 0.46%)</title><rect x="85.8064%" y="549" width="0.4647%" height="15" fill="rgb(223,113,26)" fg:x="629396759" fg:w="3408883"/><text x="86.0564%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3,408,883 samples, 0.46%)</title><rect x="85.8064%" y="533" width="0.4647%" height="15" fill="rgb(206,192,2)" fg:x="629396759" fg:w="3408883"/><text x="86.0564%" y="543.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3,408,883 samples, 0.46%)</title><rect x="85.8064%" y="517" width="0.4647%" height="15" fill="rgb(241,108,4)" fg:x="629396759" fg:w="3408883"/><text x="86.0564%" y="527.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3,408,883 samples, 0.46%)</title><rect x="85.8064%" y="501" width="0.4647%" height="15" fill="rgb(247,173,49)" fg:x="629396759" fg:w="3408883"/><text x="86.0564%" y="511.50"></text></g><g><title>_int_free (3,408,883 samples, 0.46%)</title><rect x="85.8064%" y="485" width="0.4647%" height="15" fill="rgb(224,114,35)" fg:x="629396759" fg:w="3408883"/><text x="86.0564%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (18,356,550 samples, 2.50%)</title><rect x="86.2712%" y="533" width="2.5026%" height="15" fill="rgb(245,159,27)" fg:x="632805642" fg:w="18356550"/><text x="86.5212%" y="543.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (18,356,550 samples, 2.50%)</title><rect x="86.2712%" y="517" width="2.5026%" height="15" fill="rgb(245,172,44)" fg:x="632805642" fg:w="18356550"/><text x="86.5212%" y="527.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (18,356,550 samples, 2.50%)</title><rect x="86.2712%" y="501" width="2.5026%" height="15" fill="rgb(236,23,11)" fg:x="632805642" fg:w="18356550"/><text x="86.5212%" y="511.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt; (18,356,550 samples, 2.50%)</title><rect x="86.2712%" y="485" width="2.5026%" height="15" fill="rgb(205,117,38)" fg:x="632805642" fg:w="18356550"/><text x="86.5212%" y="495.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedMap&gt; (18,356,550 samples, 2.50%)</title><rect x="86.2712%" y="469" width="2.5026%" height="15" fill="rgb(237,72,25)" fg:x="632805642" fg:w="18356550"/><text x="86.5212%" y="479.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (18,356,550 samples, 2.50%)</title><rect x="86.2712%" y="453" width="2.5026%" height="15" fill="rgb(244,70,9)" fg:x="632805642" fg:w="18356550"/><text x="86.5212%" y="463.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18,356,550 samples, 2.50%)</title><rect x="86.2712%" y="437" width="2.5026%" height="15" fill="rgb(217,125,39)" fg:x="632805642" fg:w="18356550"/><text x="86.5212%" y="447.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::map::Utf8BoundedEntry]&gt; (18,356,550 samples, 2.50%)</title><rect x="86.2712%" y="421" width="2.5026%" height="15" fill="rgb(235,36,10)" fg:x="632805642" fg:w="18356550"/><text x="86.5212%" y="431.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt; (18,356,550 samples, 2.50%)</title><rect x="86.2712%" y="405" width="2.5026%" height="15" fill="rgb(251,123,47)" fg:x="632805642" fg:w="18356550"/><text x="86.5212%" y="415.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (18,356,550 samples, 2.50%)</title><rect x="86.2712%" y="389" width="2.5026%" height="15" fill="rgb(221,13,13)" fg:x="632805642" fg:w="18356550"/><text x="86.5212%" y="399.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (18,356,550 samples, 2.50%)</title><rect x="86.2712%" y="373" width="2.5026%" height="15" fill="rgb(238,131,9)" fg:x="632805642" fg:w="18356550"/><text x="86.5212%" y="383.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18,356,550 samples, 2.50%)</title><rect x="86.2712%" y="357" width="2.5026%" height="15" fill="rgb(211,50,8)" fg:x="632805642" fg:w="18356550"/><text x="86.5212%" y="367.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7,383,564 samples, 1.01%)</title><rect x="87.7671%" y="341" width="1.0066%" height="15" fill="rgb(245,182,24)" fg:x="643778628" fg:w="7383564"/><text x="88.0171%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (7,383,564 samples, 1.01%)</title><rect x="87.7671%" y="325" width="1.0066%" height="15" fill="rgb(242,14,37)" fg:x="643778628" fg:w="7383564"/><text x="88.0171%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3,494,630 samples, 0.48%)</title><rect x="88.7737%" y="533" width="0.4764%" height="15" fill="rgb(246,228,12)" fg:x="651162192" fg:w="3494630"/><text x="89.0237%" y="543.50"></text></g><g><title>regex_automata::meta::wrappers::HybridEngine::new (3,494,630 samples, 0.48%)</title><rect x="88.7737%" y="517" width="0.4764%" height="15" fill="rgb(213,55,15)" fg:x="651162192" fg:w="3494630"/><text x="89.0237%" y="527.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3,494,630 samples, 0.48%)</title><rect x="88.7737%" y="501" width="0.4764%" height="15" fill="rgb(209,9,3)" fg:x="651162192" fg:w="3494630"/><text x="89.0237%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Config::byte_classes_from_nfa (3,494,630 samples, 0.48%)</title><rect x="88.7737%" y="485" width="0.4764%" height="15" fill="rgb(230,59,30)" fg:x="651162192" fg:w="3494630"/><text x="89.0237%" y="495.50"></text></g><g><title>regex_automata::util::alphabet::ByteClassSet::byte_classes (3,494,630 samples, 0.48%)</title><rect x="88.7737%" y="469" width="0.4764%" height="15" fill="rgb(209,121,21)" fg:x="651162192" fg:w="3494630"/><text x="89.0237%" y="479.50"></text></g><g><title>regex_automata::util::alphabet::ByteSet::contains (3,494,630 samples, 0.48%)</title><rect x="88.7737%" y="453" width="0.4764%" height="15" fill="rgb(220,109,13)" fg:x="651162192" fg:w="3494630"/><text x="89.0237%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3,405,877 samples, 0.46%)</title><rect x="89.2502%" y="373" width="0.4643%" height="15" fill="rgb(232,18,1)" fg:x="654656822" fg:w="3405877"/><text x="89.5002%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3,405,877 samples, 0.46%)</title><rect x="89.2502%" y="357" width="0.4643%" height="15" fill="rgb(215,41,42)" fg:x="654656822" fg:w="3405877"/><text x="89.5002%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3,405,877 samples, 0.46%)</title><rect x="89.2502%" y="341" width="0.4643%" height="15" fill="rgb(224,123,36)" fg:x="654656822" fg:w="3405877"/><text x="89.5002%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (3,405,877 samples, 0.46%)</title><rect x="89.2502%" y="325" width="0.4643%" height="15" fill="rgb(240,125,3)" fg:x="654656822" fg:w="3405877"/><text x="89.5002%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3,405,877 samples, 0.46%)</title><rect x="89.2502%" y="309" width="0.4643%" height="15" fill="rgb(205,98,50)" fg:x="654656822" fg:w="3405877"/><text x="89.5002%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (3,405,877 samples, 0.46%)</title><rect x="89.2502%" y="293" width="0.4643%" height="15" fill="rgb(205,185,37)" fg:x="654656822" fg:w="3405877"/><text x="89.5002%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_exactly (3,405,877 samples, 0.46%)</title><rect x="89.2502%" y="277" width="0.4643%" height="15" fill="rgb(238,207,15)" fg:x="654656822" fg:w="3405877"/><text x="89.5002%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (3,405,877 samples, 0.46%)</title><rect x="89.2502%" y="261" width="0.4643%" height="15" fill="rgb(213,199,42)" fg:x="654656822" fg:w="3405877"/><text x="89.5002%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3,405,877 samples, 0.46%)</title><rect x="89.2502%" y="245" width="0.4643%" height="15" fill="rgb(235,201,11)" fg:x="654656822" fg:w="3405877"/><text x="89.5002%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (3,405,877 samples, 0.46%)</title><rect x="89.2502%" y="229" width="0.4643%" height="15" fill="rgb(207,46,11)" fg:x="654656822" fg:w="3405877"/><text x="89.5002%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (3,405,877 samples, 0.46%)</title><rect x="89.2502%" y="213" width="0.4643%" height="15" fill="rgb(241,35,35)" fg:x="654656822" fg:w="3405877"/><text x="89.5002%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_range (3,405,877 samples, 0.46%)</title><rect x="89.2502%" y="197" width="0.4643%" height="15" fill="rgb(243,32,47)" fg:x="654656822" fg:w="3405877"/><text x="89.5002%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::add_range (3,405,877 samples, 0.46%)</title><rect x="89.2502%" y="181" width="0.4643%" height="15" fill="rgb(247,202,23)" fg:x="654656822" fg:w="3405877"/><text x="89.5002%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_range (3,405,877 samples, 0.46%)</title><rect x="89.2502%" y="165" width="0.4643%" height="15" fill="rgb(219,102,11)" fg:x="654656822" fg:w="3405877"/><text x="89.5002%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3,405,877 samples, 0.46%)</title><rect x="89.2502%" y="149" width="0.4643%" height="15" fill="rgb(243,110,44)" fg:x="654656822" fg:w="3405877"/><text x="89.5002%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,405,877 samples, 0.46%)</title><rect x="89.2502%" y="133" width="0.4643%" height="15" fill="rgb(222,74,54)" fg:x="654656822" fg:w="3405877"/><text x="89.5002%" y="143.50"></text></g><g><title>core::ptr::write (3,405,877 samples, 0.46%)</title><rect x="89.2502%" y="117" width="0.4643%" height="15" fill="rgb(216,99,12)" fg:x="654656822" fg:w="3405877"/><text x="89.5002%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3,592,360 samples, 0.49%)</title><rect x="89.7145%" y="213" width="0.4898%" height="15" fill="rgb(226,22,26)" fg:x="658062699" fg:w="3592360"/><text x="89.9645%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3,592,360 samples, 0.49%)</title><rect x="89.7145%" y="197" width="0.4898%" height="15" fill="rgb(217,163,10)" fg:x="658062699" fg:w="3592360"/><text x="89.9645%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::pop_freeze (3,592,360 samples, 0.49%)</title><rect x="89.7145%" y="181" width="0.4898%" height="15" fill="rgb(213,25,53)" fg:x="658062699" fg:w="3592360"/><text x="89.9645%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Node::set_last_transition (3,592,360 samples, 0.49%)</title><rect x="89.7145%" y="165" width="0.4898%" height="15" fill="rgb(252,105,26)" fg:x="658062699" fg:w="3592360"/><text x="89.9645%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,592,360 samples, 0.49%)</title><rect x="89.7145%" y="149" width="0.4898%" height="15" fill="rgb(220,39,43)" fg:x="658062699" fg:w="3592360"/><text x="89.9645%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,592,360 samples, 0.49%)</title><rect x="89.7145%" y="133" width="0.4898%" height="15" fill="rgb(229,68,48)" fg:x="658062699" fg:w="3592360"/><text x="89.9645%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,592,360 samples, 0.49%)</title><rect x="89.7145%" y="117" width="0.4898%" height="15" fill="rgb(252,8,32)" fg:x="658062699" fg:w="3592360"/><text x="89.9645%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,592,360 samples, 0.49%)</title><rect x="89.7145%" y="101" width="0.4898%" height="15" fill="rgb(223,20,43)" fg:x="658062699" fg:w="3592360"/><text x="89.9645%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,592,360 samples, 0.49%)</title><rect x="89.7145%" y="85" width="0.4898%" height="15" fill="rgb(229,81,49)" fg:x="658062699" fg:w="3592360"/><text x="89.9645%" y="95.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3,592,360 samples, 0.49%)</title><rect x="89.7145%" y="69" width="0.4898%" height="15" fill="rgb(236,28,36)" fg:x="658062699" fg:w="3592360"/><text x="89.9645%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (7,313,379 samples, 1.00%)</title><rect x="89.7145%" y="309" width="0.9970%" height="15" fill="rgb(249,185,26)" fg:x="658062699" fg:w="7313379"/><text x="89.9645%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (7,313,379 samples, 1.00%)</title><rect x="89.7145%" y="293" width="0.9970%" height="15" fill="rgb(249,174,33)" fg:x="658062699" fg:w="7313379"/><text x="89.9645%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_exactly (7,313,379 samples, 1.00%)</title><rect x="89.7145%" y="277" width="0.9970%" height="15" fill="rgb(233,201,37)" fg:x="658062699" fg:w="7313379"/><text x="89.9645%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (7,313,379 samples, 1.00%)</title><rect x="89.7145%" y="261" width="0.9970%" height="15" fill="rgb(221,78,26)" fg:x="658062699" fg:w="7313379"/><text x="89.9645%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (7,313,379 samples, 1.00%)</title><rect x="89.7145%" y="245" width="0.9970%" height="15" fill="rgb(250,127,30)" fg:x="658062699" fg:w="7313379"/><text x="89.9645%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (7,313,379 samples, 1.00%)</title><rect x="89.7145%" y="229" width="0.9970%" height="15" fill="rgb(230,49,44)" fg:x="658062699" fg:w="7313379"/><text x="89.9645%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (3,721,019 samples, 0.51%)</title><rect x="90.2042%" y="213" width="0.5073%" height="15" fill="rgb(229,67,23)" fg:x="661655059" fg:w="3721019"/><text x="90.4542%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (3,721,019 samples, 0.51%)</title><rect x="90.2042%" y="197" width="0.5073%" height="15" fill="rgb(249,83,47)" fg:x="661655059" fg:w="3721019"/><text x="90.4542%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (3,721,019 samples, 0.51%)</title><rect x="90.2042%" y="181" width="0.5073%" height="15" fill="rgb(215,43,3)" fg:x="661655059" fg:w="3721019"/><text x="90.4542%" y="191.50"></text></g><g><title>alloc::vec::from_elem (3,721,019 samples, 0.51%)</title><rect x="90.2042%" y="165" width="0.5073%" height="15" fill="rgb(238,154,13)" fg:x="661655059" fg:w="3721019"/><text x="90.4542%" y="175.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3,721,019 samples, 0.51%)</title><rect x="90.2042%" y="149" width="0.5073%" height="15" fill="rgb(219,56,2)" fg:x="661655059" fg:w="3721019"/><text x="90.4542%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (3,721,019 samples, 0.51%)</title><rect x="90.2042%" y="133" width="0.5073%" height="15" fill="rgb(233,0,4)" fg:x="661655059" fg:w="3721019"/><text x="90.4542%" y="143.50"></text></g><g><title>core::ptr::write (3,721,019 samples, 0.51%)</title><rect x="90.2042%" y="117" width="0.5073%" height="15" fill="rgb(235,30,7)" fg:x="661655059" fg:w="3721019"/><text x="90.4542%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3,493,917 samples, 0.48%)</title><rect x="90.7115%" y="261" width="0.4763%" height="15" fill="rgb(250,79,13)" fg:x="665376078" fg:w="3493917"/><text x="90.9615%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3,493,917 samples, 0.48%)</title><rect x="90.7115%" y="245" width="0.4763%" height="15" fill="rgb(211,146,34)" fg:x="665376078" fg:w="3493917"/><text x="90.9615%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::top_last_freeze (3,493,917 samples, 0.48%)</title><rect x="90.7115%" y="229" width="0.4763%" height="15" fill="rgb(228,22,38)" fg:x="665376078" fg:w="3493917"/><text x="90.9615%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Node::set_last_transition (3,493,917 samples, 0.48%)</title><rect x="90.7115%" y="213" width="0.4763%" height="15" fill="rgb(235,168,5)" fg:x="665376078" fg:w="3493917"/><text x="90.9615%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,493,917 samples, 0.48%)</title><rect x="90.7115%" y="197" width="0.4763%" height="15" fill="rgb(221,155,16)" fg:x="665376078" fg:w="3493917"/><text x="90.9615%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,493,917 samples, 0.48%)</title><rect x="90.7115%" y="181" width="0.4763%" height="15" fill="rgb(215,215,53)" fg:x="665376078" fg:w="3493917"/><text x="90.9615%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,493,917 samples, 0.48%)</title><rect x="90.7115%" y="165" width="0.4763%" height="15" fill="rgb(223,4,10)" fg:x="665376078" fg:w="3493917"/><text x="90.9615%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,493,917 samples, 0.48%)</title><rect x="90.7115%" y="149" width="0.4763%" height="15" fill="rgb(234,103,6)" fg:x="665376078" fg:w="3493917"/><text x="90.9615%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,493,917 samples, 0.48%)</title><rect x="90.7115%" y="133" width="0.4763%" height="15" fill="rgb(227,97,0)" fg:x="665376078" fg:w="3493917"/><text x="90.9615%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,493,917 samples, 0.48%)</title><rect x="90.7115%" y="117" width="0.4763%" height="15" fill="rgb(234,150,53)" fg:x="665376078" fg:w="3493917"/><text x="90.9615%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,493,917 samples, 0.48%)</title><rect x="90.7115%" y="101" width="0.4763%" height="15" fill="rgb(228,201,54)" fg:x="665376078" fg:w="3493917"/><text x="90.9615%" y="111.50"></text></g><g><title>alloc::alloc::realloc (3,493,917 samples, 0.48%)</title><rect x="90.7115%" y="85" width="0.4763%" height="15" fill="rgb(222,22,37)" fg:x="665376078" fg:w="3493917"/><text x="90.9615%" y="95.50"></text></g><g><title>realloc (3,493,917 samples, 0.48%)</title><rect x="90.7115%" y="69" width="0.4763%" height="15" fill="rgb(237,53,32)" fg:x="665376078" fg:w="3493917"/><text x="90.9615%" y="79.50"></text></g><g><title>_int_realloc (3,493,917 samples, 0.48%)</title><rect x="90.7115%" y="53" width="0.4763%" height="15" fill="rgb(233,25,53)" fg:x="665376078" fg:w="3493917"/><text x="90.9615%" y="63.50"></text></g><g><title>_int_malloc (3,493,917 samples, 0.48%)</title><rect x="90.7115%" y="37" width="0.4763%" height="15" fill="rgb(210,40,34)" fg:x="665376078" fg:w="3493917"/><text x="90.9615%" y="47.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (57,071,337 samples, 7.78%)</title><rect x="86.2712%" y="581" width="7.7806%" height="15" fill="rgb(241,220,44)" fg:x="632805642" fg:w="57071337"/><text x="86.5212%" y="591.50">regex_autom..</text></g><g><title>regex_automata::meta::strategy::new (57,071,337 samples, 7.78%)</title><rect x="86.2712%" y="565" width="7.7806%" height="15" fill="rgb(235,28,35)" fg:x="632805642" fg:w="57071337"/><text x="86.5212%" y="575.50">regex_autom..</text></g><g><title>regex_automata::meta::strategy::Core::new (57,071,337 samples, 7.78%)</title><rect x="86.2712%" y="549" width="7.7806%" height="15" fill="rgb(210,56,17)" fg:x="632805642" fg:w="57071337"/><text x="86.5212%" y="559.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (35,220,157 samples, 4.80%)</title><rect x="89.2502%" y="533" width="4.8016%" height="15" fill="rgb(224,130,29)" fg:x="654656822" fg:w="35220157"/><text x="89.5002%" y="543.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (35,220,157 samples, 4.80%)</title><rect x="89.2502%" y="517" width="4.8016%" height="15" fill="rgb(235,212,8)" fg:x="654656822" fg:w="35220157"/><text x="89.5002%" y="527.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (35,220,157 samples, 4.80%)</title><rect x="89.2502%" y="501" width="4.8016%" height="15" fill="rgb(223,33,50)" fg:x="654656822" fg:w="35220157"/><text x="89.5002%" y="511.50">regex_..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35,220,157 samples, 4.80%)</title><rect x="89.2502%" y="485" width="4.8016%" height="15" fill="rgb(219,149,13)" fg:x="654656822" fg:w="35220157"/><text x="89.5002%" y="495.50">&lt;core:..</text></g><g><title>core::option::Option&lt;T&gt;::map (35,220,157 samples, 4.80%)</title><rect x="89.2502%" y="469" width="4.8016%" height="15" fill="rgb(250,156,29)" fg:x="654656822" fg:w="35220157"/><text x="89.5002%" y="479.50">core::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (35,220,157 samples, 4.80%)</title><rect x="89.2502%" y="453" width="4.8016%" height="15" fill="rgb(216,193,19)" fg:x="654656822" fg:w="35220157"/><text x="89.5002%" y="463.50">core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (35,220,157 samples, 4.80%)</title><rect x="89.2502%" y="437" width="4.8016%" height="15" fill="rgb(216,135,14)" fg:x="654656822" fg:w="35220157"/><text x="89.5002%" y="447.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (35,220,157 samples, 4.80%)</title><rect x="89.2502%" y="421" width="4.8016%" height="15" fill="rgb(241,47,5)" fg:x="654656822" fg:w="35220157"/><text x="89.5002%" y="431.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (35,220,157 samples, 4.80%)</title><rect x="89.2502%" y="405" width="4.8016%" height="15" fill="rgb(233,42,35)" fg:x="654656822" fg:w="35220157"/><text x="89.5002%" y="415.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (35,220,157 samples, 4.80%)</title><rect x="89.2502%" y="389" width="4.8016%" height="15" fill="rgb(231,13,6)" fg:x="654656822" fg:w="35220157"/><text x="89.5002%" y="399.50">regex_..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (31,814,280 samples, 4.34%)</title><rect x="89.7145%" y="373" width="4.3373%" height="15" fill="rgb(207,181,40)" fg:x="658062699" fg:w="31814280"/><text x="89.9645%" y="383.50">&lt;core..</text></g><g><title>core::option::Option&lt;T&gt;::map (31,814,280 samples, 4.34%)</title><rect x="89.7145%" y="357" width="4.3373%" height="15" fill="rgb(254,173,49)" fg:x="658062699" fg:w="31814280"/><text x="89.9645%" y="367.50">core:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (31,814,280 samples, 4.34%)</title><rect x="89.7145%" y="341" width="4.3373%" height="15" fill="rgb(221,1,38)" fg:x="658062699" fg:w="31814280"/><text x="89.9645%" y="351.50">core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (31,814,280 samples, 4.34%)</title><rect x="89.7145%" y="325" width="4.3373%" height="15" fill="rgb(206,124,46)" fg:x="658062699" fg:w="31814280"/><text x="89.9645%" y="335.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (24,500,901 samples, 3.34%)</title><rect x="90.7115%" y="309" width="3.3402%" height="15" fill="rgb(249,21,11)" fg:x="665376078" fg:w="24500901"/><text x="90.9615%" y="319.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (24,500,901 samples, 3.34%)</title><rect x="90.7115%" y="293" width="3.3402%" height="15" fill="rgb(222,201,40)" fg:x="665376078" fg:w="24500901"/><text x="90.9615%" y="303.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (24,500,901 samples, 3.34%)</title><rect x="90.7115%" y="277" width="3.3402%" height="15" fill="rgb(235,61,29)" fg:x="665376078" fg:w="24500901"/><text x="90.9615%" y="287.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (21,006,984 samples, 2.86%)</title><rect x="91.1879%" y="261" width="2.8639%" height="15" fill="rgb(219,207,3)" fg:x="668869995" fg:w="21006984"/><text x="91.4379%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (21,006,984 samples, 2.86%)</title><rect x="91.1879%" y="245" width="2.8639%" height="15" fill="rgb(222,56,46)" fg:x="668869995" fg:w="21006984"/><text x="91.4379%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (21,006,984 samples, 2.86%)</title><rect x="91.1879%" y="229" width="2.8639%" height="15" fill="rgb(239,76,54)" fg:x="668869995" fg:w="21006984"/><text x="91.4379%" y="239.50">re..</text></g><g><title>alloc::vec::from_elem (21,006,984 samples, 2.86%)</title><rect x="91.1879%" y="213" width="2.8639%" height="15" fill="rgb(231,124,27)" fg:x="668869995" fg:w="21006984"/><text x="91.4379%" y="223.50">al..</text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (21,006,984 samples, 2.86%)</title><rect x="91.1879%" y="197" width="2.8639%" height="15" fill="rgb(249,195,6)" fg:x="668869995" fg:w="21006984"/><text x="91.4379%" y="207.50">&lt;T..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (21,006,984 samples, 2.86%)</title><rect x="91.1879%" y="181" width="2.8639%" height="15" fill="rgb(237,174,47)" fg:x="668869995" fg:w="21006984"/><text x="91.4379%" y="191.50">al..</text></g><g><title>core::ptr::write (21,006,984 samples, 2.86%)</title><rect x="91.1879%" y="165" width="2.8639%" height="15" fill="rgb(206,201,31)" fg:x="668869995" fg:w="21006984"/><text x="91.4379%" y="175.50">co..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (7,453,917 samples, 1.02%)</title><rect x="94.0518%" y="581" width="1.0162%" height="15" fill="rgb(231,57,52)" fg:x="689876979" fg:w="7453917"/><text x="94.3018%" y="591.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse (7,453,917 samples, 1.02%)</title><rect x="94.0518%" y="565" width="1.0162%" height="15" fill="rgb(248,177,22)" fg:x="689876979" fg:w="7453917"/><text x="94.3018%" y="575.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7,453,917 samples, 1.02%)</title><rect x="94.0518%" y="549" width="1.0162%" height="15" fill="rgb(215,211,37)" fg:x="689876979" fg:w="7453917"/><text x="94.3018%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,701,600 samples, 0.50%)</title><rect x="94.5633%" y="533" width="0.5046%" height="15" fill="rgb(241,128,51)" fg:x="693629296" fg:w="3701600"/><text x="94.8133%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,701,600 samples, 0.50%)</title><rect x="94.5633%" y="517" width="0.5046%" height="15" fill="rgb(227,165,31)" fg:x="693629296" fg:w="3701600"/><text x="94.8133%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,701,600 samples, 0.50%)</title><rect x="94.5633%" y="501" width="0.5046%" height="15" fill="rgb(228,167,24)" fg:x="693629296" fg:w="3701600"/><text x="94.8133%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,701,600 samples, 0.50%)</title><rect x="94.5633%" y="485" width="0.5046%" height="15" fill="rgb(228,143,12)" fg:x="693629296" fg:w="3701600"/><text x="94.8133%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,701,600 samples, 0.50%)</title><rect x="94.5633%" y="469" width="0.5046%" height="15" fill="rgb(249,149,8)" fg:x="693629296" fg:w="3701600"/><text x="94.8133%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,701,600 samples, 0.50%)</title><rect x="94.5633%" y="453" width="0.5046%" height="15" fill="rgb(243,35,44)" fg:x="693629296" fg:w="3701600"/><text x="94.8133%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,701,600 samples, 0.50%)</title><rect x="94.5633%" y="437" width="0.5046%" height="15" fill="rgb(246,89,9)" fg:x="693629296" fg:w="3701600"/><text x="94.8133%" y="447.50"></text></g><g><title>alloc::alloc::realloc (3,701,600 samples, 0.50%)</title><rect x="94.5633%" y="421" width="0.5046%" height="15" fill="rgb(233,213,13)" fg:x="693629296" fg:w="3701600"/><text x="94.8133%" y="431.50"></text></g><g><title>realloc (3,701,600 samples, 0.50%)</title><rect x="94.5633%" y="405" width="0.5046%" height="15" fill="rgb(233,141,41)" fg:x="693629296" fg:w="3701600"/><text x="94.8133%" y="415.50"></text></g><g><title>_int_realloc (3,701,600 samples, 0.50%)</title><rect x="94.5633%" y="389" width="0.5046%" height="15" fill="rgb(239,167,4)" fg:x="693629296" fg:w="3701600"/><text x="94.8133%" y="399.50"></text></g><g><title>_int_malloc (3,701,600 samples, 0.50%)</title><rect x="94.5633%" y="373" width="0.5046%" height="15" fill="rgb(209,217,16)" fg:x="693629296" fg:w="3701600"/><text x="94.8133%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,543,944 samples, 0.48%)</title><rect x="95.0680%" y="517" width="0.4832%" height="15" fill="rgb(219,88,35)" fg:x="697330896" fg:w="3543944"/><text x="95.3180%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,543,944 samples, 0.48%)</title><rect x="95.0680%" y="501" width="0.4832%" height="15" fill="rgb(220,193,23)" fg:x="697330896" fg:w="3543944"/><text x="95.3180%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,543,944 samples, 0.48%)</title><rect x="95.0680%" y="485" width="0.4832%" height="15" fill="rgb(230,90,52)" fg:x="697330896" fg:w="3543944"/><text x="95.3180%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,543,944 samples, 0.48%)</title><rect x="95.0680%" y="469" width="0.4832%" height="15" fill="rgb(252,106,19)" fg:x="697330896" fg:w="3543944"/><text x="95.3180%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,543,944 samples, 0.48%)</title><rect x="95.0680%" y="453" width="0.4832%" height="15" fill="rgb(206,74,20)" fg:x="697330896" fg:w="3543944"/><text x="95.3180%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,543,944 samples, 0.48%)</title><rect x="95.0680%" y="437" width="0.4832%" height="15" fill="rgb(230,138,44)" fg:x="697330896" fg:w="3543944"/><text x="95.3180%" y="447.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,543,944 samples, 0.48%)</title><rect x="95.0680%" y="421" width="0.4832%" height="15" fill="rgb(235,182,43)" fg:x="697330896" fg:w="3543944"/><text x="95.3180%" y="431.50"></text></g><g><title>alloc::alloc::realloc (3,543,944 samples, 0.48%)</title><rect x="95.0680%" y="405" width="0.4832%" height="15" fill="rgb(242,16,51)" fg:x="697330896" fg:w="3543944"/><text x="95.3180%" y="415.50"></text></g><g><title>realloc (3,543,944 samples, 0.48%)</title><rect x="95.0680%" y="389" width="0.4832%" height="15" fill="rgb(248,9,4)" fg:x="697330896" fg:w="3543944"/><text x="95.3180%" y="399.50"></text></g><g><title>_int_realloc (3,543,944 samples, 0.48%)</title><rect x="95.0680%" y="373" width="0.4832%" height="15" fill="rgb(210,31,22)" fg:x="697330896" fg:w="3543944"/><text x="95.3180%" y="383.50"></text></g><g><title>__memmove_avx_unaligned_erms (3,543,944 samples, 0.48%)</title><rect x="95.0680%" y="357" width="0.4832%" height="15" fill="rgb(239,54,39)" fg:x="697330896" fg:w="3543944"/><text x="95.3180%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[u8]&gt;&gt; (3,408,353 samples, 0.46%)</title><rect x="95.5511%" y="501" width="0.4647%" height="15" fill="rgb(230,99,41)" fg:x="700874840" fg:w="3408353"/><text x="95.8011%" y="511.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,408,353 samples, 0.46%)</title><rect x="95.5511%" y="485" width="0.4647%" height="15" fill="rgb(253,106,12)" fg:x="700874840" fg:w="3408353"/><text x="95.8011%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,408,353 samples, 0.46%)</title><rect x="95.5511%" y="469" width="0.4647%" height="15" fill="rgb(213,46,41)" fg:x="700874840" fg:w="3408353"/><text x="95.8011%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (3,408,353 samples, 0.46%)</title><rect x="95.5511%" y="453" width="0.4647%" height="15" fill="rgb(215,133,35)" fg:x="700874840" fg:w="3408353"/><text x="95.8011%" y="463.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3,408,353 samples, 0.46%)</title><rect x="95.5511%" y="437" width="0.4647%" height="15" fill="rgb(213,28,5)" fg:x="700874840" fg:w="3408353"/><text x="95.8011%" y="447.50"></text></g><g><title>_int_free (3,408,353 samples, 0.46%)</title><rect x="95.5511%" y="421" width="0.4647%" height="15" fill="rgb(215,77,49)" fg:x="700874840" fg:w="3408353"/><text x="95.8011%" y="431.50"></text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process (704,503,304 samples, 96.05%)</title><rect x="0.4632%" y="1205" width="96.0458%" height="15" fill="rgb(248,100,22)" fg:x="3397295" fg:w="704503304"/><text x="0.7132%" y="1215.50">syntastica::processor::Processor&lt;Set&gt;::process</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl (704,503,304 samples, 96.05%)</title><rect x="0.4632%" y="1189" width="96.0458%" height="15" fill="rgb(208,67,9)" fg:x="3397295" fg:w="704503304"/><text x="0.7132%" y="1199.50">syntastica::processor::Processor&lt;Set&gt;::process_impl</text></g><g><title>syntastica::processor::process_highlight_iter (85,312,677 samples, 11.63%)</title><rect x="84.8782%" y="1173" width="11.6308%" height="15" fill="rgb(219,133,21)" fg:x="622587922" fg:w="85312677"/><text x="85.1282%" y="1183.50">syntastica::proce..</text></g><g><title>&lt;syntastica_highlight::HighlightIter&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (85,312,677 samples, 11.63%)</title><rect x="84.8782%" y="1157" width="11.6308%" height="15" fill="rgb(246,46,29)" fg:x="622587922" fg:w="85312677"/><text x="85.1282%" y="1167.50">&lt;syntastica_highl..</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl::{{closure}} (81,996,859 samples, 11.18%)</title><rect x="85.3302%" y="1141" width="11.1787%" height="15" fill="rgb(246,185,52)" fg:x="625903740" fg:w="81996859"/><text x="85.5802%" y="1151.50">syntastica::proc..</text></g><g><title>core::option::Option&lt;T&gt;::or_else (81,996,859 samples, 11.18%)</title><rect x="85.3302%" y="1125" width="11.1787%" height="15" fill="rgb(252,136,11)" fg:x="625903740" fg:w="81996859"/><text x="85.5802%" y="1135.50">core::option::Op..</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl::{{closure}}::{{closure}} (81,996,859 samples, 11.18%)</title><rect x="85.3302%" y="1109" width="11.1787%" height="15" fill="rgb(219,138,53)" fg:x="625903740" fg:w="81996859"/><text x="85.5802%" y="1119.50">syntastica::proc..</text></g><g><title>syntastica_core::language_set::SupportedLanguage::for_injection (81,996,859 samples, 11.18%)</title><rect x="85.3302%" y="1093" width="11.1787%" height="15" fill="rgb(211,51,23)" fg:x="625903740" fg:w="81996859"/><text x="85.5802%" y="1103.50">syntastica_core:..</text></g><g><title>tft::detect::try_detect (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="1077" width="10.7025%" height="15" fill="rgb(247,221,28)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="1087.50">tft::detect::try..</text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="1061" width="10.7025%" height="15" fill="rgb(251,222,45)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="1071.50">&lt;once_cell::sync..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="1045" width="10.7025%" height="15" fill="rgb(217,162,53)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="1055.50">once_cell::sync:..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="1029" width="10.7025%" height="15" fill="rgb(229,93,14)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="1039.50">once_cell::sync:..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="1013" width="10.7025%" height="15" fill="rgb(209,67,49)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="1023.50">once_cell::sync:..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="997" width="10.7025%" height="15" fill="rgb(213,87,29)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="1007.50">once_cell::imp::..</text></g><g><title>once_cell::imp::initialize_or_wait (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="981" width="10.7025%" height="15" fill="rgb(205,151,52)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="991.50">once_cell::imp::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="965" width="10.7025%" height="15" fill="rgb(253,215,39)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="975.50">core::ops::funct..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="949" width="10.7025%" height="15" fill="rgb(221,220,41)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="959.50">once_cell::imp::..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="933" width="10.7025%" height="15" fill="rgb(218,133,21)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="943.50">once_cell::sync:..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="917" width="10.7025%" height="15" fill="rgb(221,193,43)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="927.50">once_cell::sync:..</text></g><g><title>core::ops::function::FnOnce::call_once (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="901" width="10.7025%" height="15" fill="rgb(240,128,52)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="911.50">core::ops::funct..</text></g><g><title>core::ops::function::FnOnce::call_once (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="885" width="10.7025%" height="15" fill="rgb(253,114,12)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="895.50">core::ops::funct..</text></g><g><title>tft::detect::pattern::PATTERN::{{closure}} (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="869" width="10.7025%" height="15" fill="rgb(215,223,47)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="879.50">tft::detect::pat..</text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="853" width="10.7025%" height="15" fill="rgb(248,225,23)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="863.50">&lt;once_cell::sync..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="837" width="10.7025%" height="15" fill="rgb(250,108,0)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="847.50">once_cell::sync:..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="821" width="10.7025%" height="15" fill="rgb(228,208,7)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="831.50">once_cell::sync:..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="805" width="10.7025%" height="15" fill="rgb(244,45,10)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="815.50">once_cell::sync:..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="789" width="10.7025%" height="15" fill="rgb(207,125,25)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="799.50">once_cell::imp::..</text></g><g><title>once_cell::imp::initialize_or_wait (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="773" width="10.7025%" height="15" fill="rgb(210,195,18)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="783.50">once_cell::imp::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="757" width="10.7025%" height="15" fill="rgb(249,80,12)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="767.50">core::ops::funct..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="741" width="10.7025%" height="15" fill="rgb(221,65,9)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="751.50">once_cell::imp::..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="725" width="10.7025%" height="15" fill="rgb(235,49,36)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="735.50">once_cell::sync:..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="709" width="10.7025%" height="15" fill="rgb(225,32,20)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="719.50">once_cell::sync:..</text></g><g><title>core::ops::function::FnOnce::call_once (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="693" width="10.7025%" height="15" fill="rgb(215,141,46)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="703.50">core::ops::funct..</text></g><g><title>core::ops::function::FnOnce::call_once (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="677" width="10.7025%" height="15" fill="rgb(250,160,47)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="687.50">core::ops::funct..</text></g><g><title>tft::detect::pattern::PATTERN::{{closure}}::RE::{{closure}} (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="661" width="10.7025%" height="15" fill="rgb(216,222,40)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="671.50">tft::detect::pat..</text></g><g><title>regex::builders::string::RegexBuilder::build (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="645" width="10.7025%" height="15" fill="rgb(234,217,39)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="655.50">regex::builders:..</text></g><g><title>regex::builders::Builder::build_one_string (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="629" width="10.7025%" height="15" fill="rgb(207,178,40)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="639.50">regex::builders:..</text></g><g><title>regex_automata::meta::regex::Builder::build (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="613" width="10.7025%" height="15" fill="rgb(221,136,13)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="623.50">regex_automata::..</text></g><g><title>regex_automata::meta::regex::Builder::build_many (78,503,840 samples, 10.70%)</title><rect x="85.8064%" y="597" width="10.7025%" height="15" fill="rgb(249,199,10)" fg:x="629396759" fg:w="78503840"/><text x="86.0564%" y="607.50">regex_automata::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (10,569,703 samples, 1.44%)</title><rect x="95.0680%" y="581" width="1.4410%" height="15" fill="rgb(249,222,13)" fg:x="697330896" fg:w="10569703"/><text x="95.3180%" y="591.50"></text></g><g><title>regex_syntax::ast::visitor::visit (10,569,703 samples, 1.44%)</title><rect x="95.0680%" y="565" width="1.4410%" height="15" fill="rgb(244,185,38)" fg:x="697330896" fg:w="10569703"/><text x="95.3180%" y="575.50"></text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit (10,569,703 samples, 1.44%)</title><rect x="95.0680%" y="549" width="1.4410%" height="15" fill="rgb(236,202,9)" fg:x="697330896" fg:w="10569703"/><text x="95.3180%" y="559.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (10,569,703 samples, 1.44%)</title><rect x="95.0680%" y="533" width="1.4410%" height="15" fill="rgb(250,229,37)" fg:x="697330896" fg:w="10569703"/><text x="95.3180%" y="543.50"></text></g><g><title>regex_syntax::hir::Hir::concat (7,025,759 samples, 0.96%)</title><rect x="95.5511%" y="517" width="0.9578%" height="15" fill="rgb(206,174,23)" fg:x="700874840" fg:w="7025759"/><text x="95.8011%" y="527.50"></text></g><g><title>regex_syntax::hir::Hir::literal (3,617,406 samples, 0.49%)</title><rect x="96.0158%" y="501" width="0.4932%" height="15" fill="rgb(211,33,43)" fg:x="704283193" fg:w="3617406"/><text x="96.2658%" y="511.50"></text></g><g><title>regex_syntax::hir::Properties::literal (3,617,406 samples, 0.49%)</title><rect x="96.0158%" y="485" width="0.4932%" height="15" fill="rgb(245,58,50)" fg:x="704283193" fg:w="3617406"/><text x="96.2658%" y="495.50"></text></g><g><title>core::str::converts::from_utf8 (3,617,406 samples, 0.49%)</title><rect x="96.0158%" y="469" width="0.4932%" height="15" fill="rgb(244,68,36)" fg:x="704283193" fg:w="3617406"/><text x="96.2658%" y="479.50"></text></g><g><title>&lt;core::iter::sources::from_fn::FromFn&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,438,105 samples, 0.47%)</title><rect x="96.5090%" y="1077" width="0.4687%" height="15" fill="rgb(232,229,15)" fg:x="707900599" fg:w="3438105"/><text x="96.7590%" y="1087.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::iter_trans::{{closure}} (3,438,105 samples, 0.47%)</title><rect x="96.5090%" y="1061" width="0.4687%" height="15" fill="rgb(254,30,23)" fg:x="707900599" fg:w="3438105"/><text x="96.7590%" y="1071.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build_auto (6,961,695 samples, 0.95%)</title><rect x="96.5090%" y="1141" width="0.9491%" height="15" fill="rgb(235,160,14)" fg:x="707900599" fg:w="6961695"/><text x="96.7590%" y="1151.50"></text></g><g><title>aho_corasick::dfa::Builder::build_from_noncontiguous (6,961,695 samples, 0.95%)</title><rect x="96.5090%" y="1125" width="0.9491%" height="15" fill="rgb(212,155,44)" fg:x="707900599" fg:w="6961695"/><text x="96.7590%" y="1135.50"></text></g><g><title>aho_corasick::dfa::Builder::finish_build_one_start (6,961,695 samples, 0.95%)</title><rect x="96.5090%" y="1109" width="0.9491%" height="15" fill="rgb(226,2,50)" fg:x="707900599" fg:w="6961695"/><text x="96.7590%" y="1119.50"></text></g><g><title>aho_corasick::dfa::sparse_iter (6,961,695 samples, 0.95%)</title><rect x="96.5090%" y="1093" width="0.9491%" height="15" fill="rgb(234,177,6)" fg:x="707900599" fg:w="6961695"/><text x="96.7590%" y="1103.50"></text></g><g><title>aho_corasick::dfa::Builder::finish_build_one_start::{{closure}} (3,523,590 samples, 0.48%)</title><rect x="96.9777%" y="1077" width="0.4804%" height="15" fill="rgb(217,24,9)" fg:x="711338704" fg:w="3523590"/><text x="97.2277%" y="1087.50"></text></g><g><title>aho_corasick::dfa::Builder::finish_build_one_start::{{closure}} (3,523,590 samples, 0.48%)</title><rect x="96.9777%" y="1061" width="0.4804%" height="15" fill="rgb(220,13,46)" fg:x="711338704" fg:w="3523590"/><text x="97.2277%" y="1071.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::add_dead_state_loop (3,369,050 samples, 0.46%)</title><rect x="97.4580%" y="1109" width="0.4593%" height="15" fill="rgb(239,221,27)" fg:x="714862294" fg:w="3369050"/><text x="97.7080%" y="1119.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::init_full_state (3,369,050 samples, 0.46%)</title><rect x="97.4580%" y="1093" width="0.4593%" height="15" fill="rgb(222,198,25)" fg:x="714862294" fg:w="3369050"/><text x="97.7080%" y="1103.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::alloc_transition (3,369,050 samples, 0.46%)</title><rect x="97.4580%" y="1077" width="0.4593%" height="15" fill="rgb(211,99,13)" fg:x="714862294" fg:w="3369050"/><text x="97.7080%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,369,050 samples, 0.46%)</title><rect x="97.4580%" y="1061" width="0.4593%" height="15" fill="rgb(232,111,31)" fg:x="714862294" fg:w="3369050"/><text x="97.7080%" y="1071.50"></text></g><g><title>kaka_nest::build_page::get_blogs (721,692,613 samples, 98.39%)</title><rect x="0.0000%" y="1413" width="98.3892%" height="15" fill="rgb(245,82,37)" fg:x="0" fg:w="721692613"/><text x="0.2500%" y="1423.50">kaka_nest::build_page::get_blogs</text></g><g><title>kaka_nest::build_page::render_blog (721,692,613 samples, 98.39%)</title><rect x="0.0000%" y="1397" width="98.3892%" height="15" fill="rgb(227,149,46)" fg:x="0" fg:w="721692613"/><text x="0.2500%" y="1407.50">kaka_nest::build_page::render_blog</text></g><g><title>kaka_nest::build_page::render_html_page_from_markdown (721,692,613 samples, 98.39%)</title><rect x="0.0000%" y="1381" width="98.3892%" height="15" fill="rgb(218,36,50)" fg:x="0" fg:w="721692613"/><text x="0.2500%" y="1391.50">kaka_nest::build_page::render_html_page_from_markdown</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (721,692,613 samples, 98.39%)</title><rect x="0.0000%" y="1365" width="98.3892%" height="15" fill="rgb(226,80,48)" fg:x="0" fg:w="721692613"/><text x="0.2500%" y="1375.50">std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (721,692,613 samples, 98.39%)</title><rect x="0.0000%" y="1349" width="98.3892%" height="15" fill="rgb(238,224,15)" fg:x="0" fg:w="721692613"/><text x="0.2500%" y="1359.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (721,692,613 samples, 98.39%)</title><rect x="0.0000%" y="1333" width="98.3892%" height="15" fill="rgb(241,136,10)" fg:x="0" fg:w="721692613"/><text x="0.2500%" y="1343.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::{{closure}} (721,692,613 samples, 98.39%)</title><rect x="0.0000%" y="1317" width="98.3892%" height="15" fill="rgb(208,32,45)" fg:x="0" fg:w="721692613"/><text x="0.2500%" y="1327.50">std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::{{closure}}</text></g><g><title>kaka_nest::build_page::render_html_page_from_markdown::{{closure}} (721,692,613 samples, 98.39%)</title><rect x="0.0000%" y="1301" width="98.3892%" height="15" fill="rgb(207,135,9)" fg:x="0" fg:w="721692613"/><text x="0.2500%" y="1311.50">kaka_nest::build_page::render_html_page_from_markdown::{{closure}}</text></g><g><title>pulldown_cmark::html::push_html (721,692,613 samples, 98.39%)</title><rect x="0.0000%" y="1285" width="98.3892%" height="15" fill="rgb(206,86,44)" fg:x="0" fg:w="721692613"/><text x="0.2500%" y="1295.50">pulldown_cmark::html::push_html</text></g><g><title>pulldown_cmark::html::write_html_fmt (721,692,613 samples, 98.39%)</title><rect x="0.0000%" y="1269" width="98.3892%" height="15" fill="rgb(245,177,15)" fg:x="0" fg:w="721692613"/><text x="0.2500%" y="1279.50">pulldown_cmark::html::write_html_fmt</text></g><g><title>pulldown_cmark::html::HtmlWriter&lt;I,W&gt;::run (721,692,613 samples, 98.39%)</title><rect x="0.0000%" y="1253" width="98.3892%" height="15" fill="rgb(206,64,50)" fg:x="0" fg:w="721692613"/><text x="0.2500%" y="1263.50">pulldown_cmark::html::HtmlWriter&lt;I,W&gt;::run</text></g><g><title>&lt;kaka_nest::pullmark_parsers::format_blockquotes::FormatBlockquotes&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (721,692,613 samples, 98.39%)</title><rect x="0.0000%" y="1237" width="98.3892%" height="15" fill="rgb(234,36,40)" fg:x="0" fg:w="721692613"/><text x="0.2500%" y="1247.50">&lt;kaka_nest::pullmark_parsers::format_blockquotes::FormatBlockquotes&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;kaka_nest::pullmark_parsers::highlight_codeblocks::HighlightCodeblocks&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (721,692,613 samples, 98.39%)</title><rect x="0.0000%" y="1221" width="98.3892%" height="15" fill="rgb(213,64,8)" fg:x="0" fg:w="721692613"/><text x="0.2500%" y="1231.50">&lt;kaka_nest::pullmark_parsers::highlight_codeblocks::HighlightCodeblocks&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>syntastica::renderer::render (13,792,014 samples, 1.88%)</title><rect x="96.5090%" y="1205" width="1.8803%" height="15" fill="rgb(210,75,36)" fg:x="707900599" fg:w="13792014"/><text x="96.7590%" y="1215.50">s..</text></g><g><title>&lt;syntastica::renderer::HtmlRenderer as syntastica::renderer::Renderer&gt;::escape (13,792,014 samples, 1.88%)</title><rect x="96.5090%" y="1189" width="1.8803%" height="15" fill="rgb(229,88,21)" fg:x="707900599" fg:w="13792014"/><text x="96.7590%" y="1199.50">&lt;..</text></g><g><title>aho_corasick::ahocorasick::AhoCorasick::new (13,792,014 samples, 1.88%)</title><rect x="96.5090%" y="1173" width="1.8803%" height="15" fill="rgb(252,204,47)" fg:x="707900599" fg:w="13792014"/><text x="96.7590%" y="1183.50">a..</text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build (13,792,014 samples, 1.88%)</title><rect x="96.5090%" y="1157" width="1.8803%" height="15" fill="rgb(208,77,27)" fg:x="707900599" fg:w="13792014"/><text x="96.7590%" y="1167.50">a..</text></g><g><title>aho_corasick::nfa::noncontiguous::Builder::build (6,830,319 samples, 0.93%)</title><rect x="97.4580%" y="1141" width="0.9312%" height="15" fill="rgb(221,76,26)" fg:x="714862294" fg:w="6830319"/><text x="97.7080%" y="1151.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::compile (6,830,319 samples, 0.93%)</title><rect x="97.4580%" y="1125" width="0.9312%" height="15" fill="rgb(225,139,18)" fg:x="714862294" fg:w="6830319"/><text x="97.7080%" y="1135.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::densify (3,461,269 samples, 0.47%)</title><rect x="97.9174%" y="1109" width="0.4719%" height="15" fill="rgb(230,137,11)" fg:x="718231344" fg:w="3461269"/><text x="98.1674%" y="1119.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::alloc_dense_state (3,461,269 samples, 0.47%)</title><rect x="97.9174%" y="1093" width="0.4719%" height="15" fill="rgb(212,28,1)" fg:x="718231344" fg:w="3461269"/><text x="98.1674%" y="1103.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (3,461,269 samples, 0.47%)</title><rect x="97.9174%" y="1077" width="0.4719%" height="15" fill="rgb(248,164,17)" fg:x="718231344" fg:w="3461269"/><text x="98.1674%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,461,269 samples, 0.47%)</title><rect x="97.9174%" y="1061" width="0.4719%" height="15" fill="rgb(222,171,42)" fg:x="718231344" fg:w="3461269"/><text x="98.1674%" y="1071.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3,461,269 samples, 0.47%)</title><rect x="97.9174%" y="1045" width="0.4719%" height="15" fill="rgb(243,84,45)" fg:x="718231344" fg:w="3461269"/><text x="98.1674%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3,461,269 samples, 0.47%)</title><rect x="97.9174%" y="1029" width="0.4719%" height="15" fill="rgb(252,49,23)" fg:x="718231344" fg:w="3461269"/><text x="98.1674%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3,461,269 samples, 0.47%)</title><rect x="97.9174%" y="1013" width="0.4719%" height="15" fill="rgb(215,19,7)" fg:x="718231344" fg:w="3461269"/><text x="98.1674%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (3,461,269 samples, 0.47%)</title><rect x="97.9174%" y="997" width="0.4719%" height="15" fill="rgb(238,81,41)" fg:x="718231344" fg:w="3461269"/><text x="98.1674%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3,461,269 samples, 0.47%)</title><rect x="97.9174%" y="981" width="0.4719%" height="15" fill="rgb(210,199,37)" fg:x="718231344" fg:w="3461269"/><text x="98.1674%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,461,269 samples, 0.47%)</title><rect x="97.9174%" y="965" width="0.4719%" height="15" fill="rgb(244,192,49)" fg:x="718231344" fg:w="3461269"/><text x="98.1674%" y="975.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3,461,269 samples, 0.47%)</title><rect x="97.9174%" y="949" width="0.4719%" height="15" fill="rgb(226,211,11)" fg:x="718231344" fg:w="3461269"/><text x="98.1674%" y="959.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (725,137,002 samples, 98.86%)</title><rect x="0.0000%" y="1557" width="98.8588%" height="15" fill="rgb(236,162,54)" fg:x="0" fg:w="725137002"/><text x="0.2500%" y="1567.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (725,137,002 samples, 98.86%)</title><rect x="0.0000%" y="1541" width="98.8588%" height="15" fill="rgb(220,229,9)" fg:x="0" fg:w="725137002"/><text x="0.2500%" y="1551.50">__libc_start_call_main</text></g><g><title>main (725,137,002 samples, 98.86%)</title><rect x="0.0000%" y="1525" width="98.8588%" height="15" fill="rgb(250,87,22)" fg:x="0" fg:w="725137002"/><text x="0.2500%" y="1535.50">main</text></g><g><title>std::rt::lang_start_internal (725,137,002 samples, 98.86%)</title><rect x="0.0000%" y="1509" width="98.8588%" height="15" fill="rgb(239,43,17)" fg:x="0" fg:w="725137002"/><text x="0.2500%" y="1519.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (725,137,002 samples, 98.86%)</title><rect x="0.0000%" y="1493" width="98.8588%" height="15" fill="rgb(231,177,25)" fg:x="0" fg:w="725137002"/><text x="0.2500%" y="1503.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (725,137,002 samples, 98.86%)</title><rect x="0.0000%" y="1477" width="98.8588%" height="15" fill="rgb(219,179,1)" fg:x="0" fg:w="725137002"/><text x="0.2500%" y="1487.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (725,137,002 samples, 98.86%)</title><rect x="0.0000%" y="1461" width="98.8588%" height="15" fill="rgb(238,219,53)" fg:x="0" fg:w="725137002"/><text x="0.2500%" y="1471.50">core::ops::function::FnOnce::call_once</text></g><g><title>kaka_nest::main (725,137,002 samples, 98.86%)</title><rect x="0.0000%" y="1445" width="98.8588%" height="15" fill="rgb(232,167,36)" fg:x="0" fg:w="725137002"/><text x="0.2500%" y="1455.50">kaka_nest::main</text></g><g><title>kaka_nest::build_page::create_blogs_on_system (725,137,002 samples, 98.86%)</title><rect x="0.0000%" y="1429" width="98.8588%" height="15" fill="rgb(244,19,51)" fg:x="0" fg:w="725137002"/><text x="0.2500%" y="1439.50">kaka_nest::build_page::create_blogs_on_system</text></g><g><title>kaka_nest::build_page::output_tags_to_fs (3,444,389 samples, 0.47%)</title><rect x="98.3892%" y="1413" width="0.4696%" height="15" fill="rgb(224,6,22)" fg:x="721692613" fg:w="3444389"/><text x="98.6392%" y="1423.50"></text></g><g><title>std::io::stdio::_eprint (3,444,389 samples, 0.47%)</title><rect x="98.3892%" y="1397" width="0.4696%" height="15" fill="rgb(224,145,5)" fg:x="721692613" fg:w="3444389"/><text x="98.6392%" y="1407.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (3,444,389 samples, 0.47%)</title><rect x="98.3892%" y="1381" width="0.4696%" height="15" fill="rgb(234,130,49)" fg:x="721692613" fg:w="3444389"/><text x="98.6392%" y="1391.50"></text></g><g><title>std::io::default_write_fmt (3,444,389 samples, 0.47%)</title><rect x="98.3892%" y="1365" width="0.4696%" height="15" fill="rgb(254,6,2)" fg:x="721692613" fg:w="3444389"/><text x="98.6392%" y="1375.50"></text></g><g><title>core::fmt::write (3,444,389 samples, 0.47%)</title><rect x="98.3892%" y="1349" width="0.4696%" height="15" fill="rgb(208,96,46)" fg:x="721692613" fg:w="3444389"/><text x="98.6392%" y="1359.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (3,444,389 samples, 0.47%)</title><rect x="98.3892%" y="1333" width="0.4696%" height="15" fill="rgb(239,3,39)" fg:x="721692613" fg:w="3444389"/><text x="98.6392%" y="1343.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (3,444,389 samples, 0.47%)</title><rect x="98.3892%" y="1317" width="0.4696%" height="15" fill="rgb(233,210,1)" fg:x="721692613" fg:w="3444389"/><text x="98.6392%" y="1327.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::fmt::Debug&gt;::fmt (3,444,389 samples, 0.47%)</title><rect x="98.3892%" y="1301" width="0.4696%" height="15" fill="rgb(244,137,37)" fg:x="721692613" fg:w="3444389"/><text x="98.6392%" y="1311.50"></text></g><g><title>&lt;[T] as core::fmt::Debug&gt;::fmt (3,444,389 samples, 0.47%)</title><rect x="98.3892%" y="1285" width="0.4696%" height="15" fill="rgb(240,136,2)" fg:x="721692613" fg:w="3444389"/><text x="98.6392%" y="1295.50"></text></g><g><title>core::fmt::builders::DebugList::entries (3,444,389 samples, 0.47%)</title><rect x="98.3892%" y="1269" width="0.4696%" height="15" fill="rgb(239,18,37)" fg:x="721692613" fg:w="3444389"/><text x="98.6392%" y="1279.50"></text></g><g><title>core::fmt::builders::DebugSet::entry (3,444,389 samples, 0.47%)</title><rect x="98.3892%" y="1253" width="0.4696%" height="15" fill="rgb(218,185,22)" fg:x="721692613" fg:w="3444389"/><text x="98.6392%" y="1263.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (3,444,389 samples, 0.47%)</title><rect x="98.3892%" y="1237" width="0.4696%" height="15" fill="rgb(225,218,4)" fg:x="721692613" fg:w="3444389"/><text x="98.6392%" y="1247.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (3,444,389 samples, 0.47%)</title><rect x="98.3892%" y="1221" width="0.4696%" height="15" fill="rgb(230,182,32)" fg:x="721692613" fg:w="3444389"/><text x="98.6392%" y="1231.50"></text></g><g><title>&lt;kaka_nest::build_page::Blog as core::fmt::Debug&gt;::fmt (3,444,389 samples, 0.47%)</title><rect x="98.3892%" y="1205" width="0.4696%" height="15" fill="rgb(242,56,43)" fg:x="721692613" fg:w="3444389"/><text x="98.6392%" y="1215.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field3_finish (3,444,389 samples, 0.47%)</title><rect x="98.3892%" y="1189" width="0.4696%" height="15" fill="rgb(233,99,24)" fg:x="721692613" fg:w="3444389"/><text x="98.6392%" y="1199.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (3,444,389 samples, 0.47%)</title><rect x="98.3892%" y="1173" width="0.4696%" height="15" fill="rgb(234,209,42)" fg:x="721692613" fg:w="3444389"/><text x="98.6392%" y="1183.50"></text></g><g><title>&lt;str as core::fmt::Debug&gt;::fmt (3,444,389 samples, 0.47%)</title><rect x="98.3892%" y="1157" width="0.4696%" height="15" fill="rgb(227,7,12)" fg:x="721692613" fg:w="3444389"/><text x="98.6392%" y="1167.50"></text></g><g><title>_start (725,638,506 samples, 98.93%)</title><rect x="0.0000%" y="1573" width="98.9272%" height="15" fill="rgb(245,203,43)" fg:x="0" fg:w="725638506"/><text x="0.2500%" y="1583.50">_start</text></g><g><title>_dl_start (501,504 samples, 0.07%)</title><rect x="98.8588%" y="1557" width="0.0684%" height="15" fill="rgb(238,205,33)" fg:x="725137002" fg:w="501504"/><text x="99.1088%" y="1567.50"></text></g><g><title>_dl_sysdep_start (501,504 samples, 0.07%)</title><rect x="98.8588%" y="1541" width="0.0684%" height="15" fill="rgb(231,56,7)" fg:x="725137002" fg:w="501504"/><text x="99.1088%" y="1551.50"></text></g><g><title>dl_main (501,504 samples, 0.07%)</title><rect x="98.8588%" y="1525" width="0.0684%" height="15" fill="rgb(244,186,29)" fg:x="725137002" fg:w="501504"/><text x="99.1088%" y="1535.50"></text></g><g><title>_dl_relocate_object (501,504 samples, 0.07%)</title><rect x="98.8588%" y="1509" width="0.0684%" height="15" fill="rgb(234,111,31)" fg:x="725137002" fg:w="501504"/><text x="99.1088%" y="1519.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,721,154 samples, 0.51%)</title><rect x="98.9272%" y="1573" width="0.5073%" height="15" fill="rgb(241,149,10)" fg:x="725638506" fg:w="3721154"/><text x="99.1772%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;clap_builder::builder::arg::Arg&gt; (501,504 samples, 0.07%)</title><rect x="99.4345%" y="1573" width="0.0684%" height="15" fill="rgb(249,206,44)" fg:x="729359660" fg:w="501504"/><text x="99.6845%" y="1583.50"></text></g><g><title>all (733,507,707 samples, 100%)</title><rect x="0.0000%" y="1605" width="100.0000%" height="15" fill="rgb(251,153,30)" fg:x="0" fg:w="733507707"/><text x="0.2500%" y="1615.50"></text></g><g><title>kaka-nest (733,507,707 samples, 100.00%)</title><rect x="0.0000%" y="1589" width="100.0000%" height="15" fill="rgb(239,152,38)" fg:x="0" fg:w="733507707"/><text x="0.2500%" y="1599.50">kaka-nest</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3,646,543 samples, 0.50%)</title><rect x="99.5029%" y="1573" width="0.4971%" height="15" fill="rgb(249,139,47)" fg:x="729861164" fg:w="3646543"/><text x="99.7529%" y="1583.50"></text></g></svg></svg>