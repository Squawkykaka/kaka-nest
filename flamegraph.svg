<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="642545150"><g><title>&lt;pest::iterators::flat_pairs::FlatPairs&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,595,028 samples, 0.72%)</title><rect x="0.0000%" y="341" width="0.7151%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4595028"/><text x="0.2500%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (4,427,446 samples, 0.69%)</title><rect x="0.7165%" y="325" width="0.6890%" height="15" fill="rgb(217,0,24)" fg:x="4603864" fg:w="4427446"/><text x="0.9665%" y="335.50"></text></g><g><title>malloc (4,427,446 samples, 0.69%)</title><rect x="0.7165%" y="309" width="0.6890%" height="15" fill="rgb(221,193,54)" fg:x="4603864" fg:w="4427446"/><text x="0.9665%" y="319.50"></text></g><g><title>_array__grow (6,554,612 samples, 1.02%)</title><rect x="4.5237%" y="277" width="1.0201%" height="15" fill="rgb(248,212,6)" fg:x="29066923" fg:w="6554612"/><text x="4.7737%" y="287.50"></text></g><g><title>state_predecessor_map_add (3,942,487 samples, 0.61%)</title><rect x="5.5438%" y="277" width="0.6136%" height="15" fill="rgb(208,68,35)" fg:x="35621535" fg:w="3942487"/><text x="5.7938%" y="287.50"></text></g><g><title>analysis_state__recursion_depth (4,926,443 samples, 0.77%)</title><rect x="13.0458%" y="261" width="0.7667%" height="15" fill="rgb(232,128,0)" fg:x="83825401" fg:w="4926443"/><text x="13.2958%" y="271.50"></text></g><g><title>analysis_state__top (4,435,644 samples, 0.69%)</title><rect x="13.8125%" y="261" width="0.6903%" height="15" fill="rgb(207,160,47)" fg:x="88751844" fg:w="4435644"/><text x="14.0625%" y="271.50"></text></g><g><title>analysis_state__compare (17,776,861 samples, 2.77%)</title><rect x="15.2763%" y="229" width="2.7666%" height="15" fill="rgb(228,23,34)" fg:x="98157167" fg:w="17776861"/><text x="15.5263%" y="239.50">an..</text></g><g><title>analysis_state_set__insert_sorted (26,904,066 samples, 4.19%)</title><rect x="14.5029%" y="261" width="4.1871%" height="15" fill="rgb(218,30,26)" fg:x="93187488" fg:w="26904066"/><text x="14.7529%" y="271.50">analy..</text></g><g><title>analysis_state__compare (21,934,387 samples, 3.41%)</title><rect x="15.2763%" y="245" width="3.4137%" height="15" fill="rgb(220,122,19)" fg:x="98157167" fg:w="21934387"/><text x="15.5263%" y="255.50">ana..</text></g><g><title>analysis_state__compare_position (4,157,526 samples, 0.65%)</title><rect x="18.0429%" y="229" width="0.6470%" height="15" fill="rgb(250,228,42)" fg:x="115934028" fg:w="4157526"/><text x="18.2929%" y="239.50"></text></g><g><title>analysis_subgraph_node__compare (29,266,599 samples, 4.55%)</title><rect x="18.6900%" y="261" width="4.5548%" height="15" fill="rgb(240,193,28)" fg:x="120091554" fg:w="29266599"/><text x="18.9400%" y="271.50">analy..</text></g><g><title>[kaka-nest] (175,021,441 samples, 27.24%)</title><rect x="0.7165%" y="341" width="27.2388%" height="15" fill="rgb(216,20,37)" fg:x="4603864" fg:w="175021441"/><text x="0.9665%" y="351.50">[kaka-nest]</text></g><g><title>tree_sitter::Query::new (170,593,995 samples, 26.55%)</title><rect x="1.4056%" y="325" width="26.5497%" height="15" fill="rgb(206,188,39)" fg:x="9031310" fg:w="170593995"/><text x="1.6556%" y="335.50">tree_sitter::Query::new</text></g><g><title>ts_query_new (170,593,995 samples, 26.55%)</title><rect x="1.4056%" y="309" width="26.5497%" height="15" fill="rgb(217,207,13)" fg:x="9031310" fg:w="170593995"/><text x="1.6556%" y="319.50">ts_query_new</text></g><g><title>ts_query__analyze_patterns (170,593,995 samples, 26.55%)</title><rect x="1.4056%" y="293" width="26.5497%" height="15" fill="rgb(231,73,38)" fg:x="9031310" fg:w="170593995"/><text x="1.6556%" y="303.50">ts_query__analyze_patterns</text></g><g><title>ts_query__perform_analysis (140,061,283 samples, 21.80%)</title><rect x="6.1574%" y="277" width="21.7979%" height="15" fill="rgb(225,20,46)" fg:x="39564022" fg:w="140061283"/><text x="6.4074%" y="287.50">ts_query__perform_analysis</text></g><g><title>ts_lookahead_iterator__next (30,260,060 samples, 4.71%)</title><rect x="23.2459%" y="261" width="4.7094%" height="15" fill="rgb(210,31,41)" fg:x="149365245" fg:w="30260060"/><text x="23.4959%" y="271.50">ts_lo..</text></g><g><title>[unknown] (4,648,113 samples, 0.72%)</title><rect x="27.9553%" y="325" width="0.7234%" height="15" fill="rgb(221,200,47)" fg:x="179625305" fg:w="4648113"/><text x="28.2053%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (4,648,113 samples, 0.72%)</title><rect x="27.9553%" y="309" width="0.7234%" height="15" fill="rgb(226,26,5)" fg:x="179625305" fg:w="4648113"/><text x="28.2053%" y="319.50"></text></g><g><title>core::ptr::write (4,648,113 samples, 0.72%)</title><rect x="27.9553%" y="293" width="0.7234%" height="15" fill="rgb(249,33,26)" fg:x="179625305" fg:w="4648113"/><text x="28.2053%" y="303.50"></text></g><g><title>aho_corasick::dfa::Builder::build_from_noncontiguous (14,341,185 samples, 2.23%)</title><rect x="28.6787%" y="325" width="2.2319%" height="15" fill="rgb(235,183,28)" fg:x="184273418" fg:w="14341185"/><text x="28.9287%" y="335.50">a..</text></g><g><title>aho_corasick::dfa::Builder::finish_build_one_start (14,341,185 samples, 2.23%)</title><rect x="28.6787%" y="309" width="2.2319%" height="15" fill="rgb(221,5,38)" fg:x="184273418" fg:w="14341185"/><text x="28.9287%" y="319.50">a..</text></g><g><title>aho_corasick::dfa::sparse_iter (14,341,185 samples, 2.23%)</title><rect x="28.6787%" y="293" width="2.2319%" height="15" fill="rgb(247,18,42)" fg:x="184273418" fg:w="14341185"/><text x="28.9287%" y="303.50">a..</text></g><g><title>aho_corasick::util::alphabet::ByteClasses::get (14,341,185 samples, 2.23%)</title><rect x="28.6787%" y="277" width="2.2319%" height="15" fill="rgb(241,131,45)" fg:x="184273418" fg:w="14341185"/><text x="28.9287%" y="287.50">a..</text></g><g><title>fs_extra::dir::copy (200,699 samples, 0.03%)</title><rect x="30.9106%" y="325" width="0.0312%" height="15" fill="rgb(249,31,29)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="335.50"></text></g><g><title>std::path::Path::join (200,699 samples, 0.03%)</title><rect x="30.9106%" y="309" width="0.0312%" height="15" fill="rgb(225,111,53)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="319.50"></text></g><g><title>[unknown] (200,699 samples, 0.03%)</title><rect x="30.9106%" y="293" width="0.0312%" height="15" fill="rgb(238,160,17)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="303.50"></text></g><g><title>std::path::Path::_join (200,699 samples, 0.03%)</title><rect x="30.9106%" y="277" width="0.0312%" height="15" fill="rgb(214,148,48)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="287.50"></text></g><g><title>std::path::PathBuf::push (200,699 samples, 0.03%)</title><rect x="30.9106%" y="261" width="0.0312%" height="15" fill="rgb(232,36,49)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="271.50"></text></g><g><title>std::path::PathBuf::_push (200,699 samples, 0.03%)</title><rect x="30.9106%" y="245" width="0.0312%" height="15" fill="rgb(209,103,24)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="255.50"></text></g><g><title>std::ffi::os_str::OsString::push (200,699 samples, 0.03%)</title><rect x="30.9106%" y="229" width="0.0312%" height="15" fill="rgb(229,88,8)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="239.50"></text></g><g><title>&lt;T as std::ffi::os_str::OsString::push::SpecPushTo&gt;::spec_push_to (200,699 samples, 0.03%)</title><rect x="30.9106%" y="213" width="0.0312%" height="15" fill="rgb(213,181,19)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="223.50"></text></g><g><title>std::sys::os_str::bytes::Buf::push_slice (200,699 samples, 0.03%)</title><rect x="30.9106%" y="197" width="0.0312%" height="15" fill="rgb(254,191,54)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (200,699 samples, 0.03%)</title><rect x="30.9106%" y="181" width="0.0312%" height="15" fill="rgb(241,83,37)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (200,699 samples, 0.03%)</title><rect x="30.9106%" y="165" width="0.0312%" height="15" fill="rgb(233,36,39)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (200,699 samples, 0.03%)</title><rect x="30.9106%" y="149" width="0.0312%" height="15" fill="rgb(226,3,54)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (200,699 samples, 0.03%)</title><rect x="30.9106%" y="133" width="0.0312%" height="15" fill="rgb(245,192,40)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (200,699 samples, 0.03%)</title><rect x="30.9106%" y="117" width="0.0312%" height="15" fill="rgb(238,167,29)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (200,699 samples, 0.03%)</title><rect x="30.9106%" y="101" width="0.0312%" height="15" fill="rgb(232,182,51)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (200,699 samples, 0.03%)</title><rect x="30.9106%" y="85" width="0.0312%" height="15" fill="rgb(231,60,39)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (200,699 samples, 0.03%)</title><rect x="30.9106%" y="69" width="0.0312%" height="15" fill="rgb(208,69,12)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (200,699 samples, 0.03%)</title><rect x="30.9106%" y="53" width="0.0312%" height="15" fill="rgb(235,93,37)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="63.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (200,699 samples, 0.03%)</title><rect x="30.9106%" y="37" width="0.0312%" height="15" fill="rgb(213,116,39)" fg:x="198614603" fg:w="200699"/><text x="31.1606%" y="47.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (5,016,530 samples, 0.78%)</title><rect x="30.9419%" y="325" width="0.7807%" height="15" fill="rgb(222,207,29)" fg:x="198815691" fg:w="5016530"/><text x="31.1919%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,016,530 samples, 0.78%)</title><rect x="30.9419%" y="309" width="0.7807%" height="15" fill="rgb(206,96,30)" fg:x="198815691" fg:w="5016530"/><text x="31.1919%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (5,016,530 samples, 0.78%)</title><rect x="30.9419%" y="293" width="0.7807%" height="15" fill="rgb(218,138,4)" fg:x="198815691" fg:w="5016530"/><text x="31.1919%" y="303.50"></text></g><g><title>core::ptr::write (5,016,530 samples, 0.78%)</title><rect x="30.9419%" y="277" width="0.7807%" height="15" fill="rgb(250,191,14)" fg:x="198815691" fg:w="5016530"/><text x="31.1919%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (5,031,008 samples, 0.78%)</title><rect x="31.7226%" y="325" width="0.7830%" height="15" fill="rgb(239,60,40)" fg:x="203832221" fg:w="5031008"/><text x="31.9726%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5,031,008 samples, 0.78%)</title><rect x="31.7226%" y="309" width="0.7830%" height="15" fill="rgb(206,27,48)" fg:x="203832221" fg:w="5031008"/><text x="31.9726%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (5,031,008 samples, 0.78%)</title><rect x="31.7226%" y="293" width="0.7830%" height="15" fill="rgb(225,35,8)" fg:x="203832221" fg:w="5031008"/><text x="31.9726%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::Repr::iter_nfa_state_ids (4,654,127 samples, 0.72%)</title><rect x="32.5056%" y="325" width="0.7243%" height="15" fill="rgb(250,213,24)" fg:x="208863229" fg:w="4654127"/><text x="32.7556%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5,013,617 samples, 0.78%)</title><rect x="33.2299%" y="325" width="0.7803%" height="15" fill="rgb(247,123,22)" fg:x="213517356" fg:w="5013617"/><text x="33.4799%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push_char (5,005,346 samples, 0.78%)</title><rect x="34.0102%" y="325" width="0.7790%" height="15" fill="rgb(231,138,38)" fg:x="218530973" fg:w="5005346"/><text x="34.2602%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,005,346 samples, 0.78%)</title><rect x="34.0102%" y="309" width="0.7790%" height="15" fill="rgb(231,145,46)" fg:x="218530973" fg:w="5005346"/><text x="34.2602%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (5,005,346 samples, 0.78%)</title><rect x="34.0102%" y="293" width="0.7790%" height="15" fill="rgb(251,118,11)" fg:x="218530973" fg:w="5005346"/><text x="34.2602%" y="303.50"></text></g><g><title>core::ptr::write (5,005,346 samples, 0.78%)</title><rect x="34.0102%" y="277" width="0.7790%" height="15" fill="rgb(217,147,25)" fg:x="218530973" fg:w="5005346"/><text x="34.2602%" y="287.50"></text></g><g><title>[unknown] (92,344,971 samples, 14.37%)</title><rect x="27.9553%" y="341" width="14.3717%" height="15" fill="rgb(247,81,37)" fg:x="179625305" fg:w="92344971"/><text x="28.2053%" y="351.50">[unknown]</text></g><g><title>ts_query__perform_analysis (48,433,957 samples, 7.54%)</title><rect x="34.7892%" y="325" width="7.5378%" height="15" fill="rgb(209,12,38)" fg:x="223536319" fg:w="48433957"/><text x="35.0392%" y="335.50">ts_query__..</text></g><g><title>ts_lookahead_iterator__next (19,047,746 samples, 2.96%)</title><rect x="39.3626%" y="309" width="2.9644%" height="15" fill="rgb(227,1,9)" fg:x="252922530" fg:w="19047746"/><text x="39.6126%" y="319.50">ts_..</text></g><g><title>_dl_map_object_deps (92,032 samples, 0.01%)</title><rect x="42.3276%" y="277" width="0.0143%" height="15" fill="rgb(248,47,43)" fg:x="271974249" fg:w="92032"/><text x="42.5776%" y="287.50"></text></g><g><title>_dl_catch_exception (92,032 samples, 0.01%)</title><rect x="42.3276%" y="261" width="0.0143%" height="15" fill="rgb(221,10,30)" fg:x="271974249" fg:w="92032"/><text x="42.5776%" y="271.50"></text></g><g><title>openaux (92,032 samples, 0.01%)</title><rect x="42.3276%" y="245" width="0.0143%" height="15" fill="rgb(210,229,1)" fg:x="271974249" fg:w="92032"/><text x="42.5776%" y="255.50"></text></g><g><title>_dl_map_object (92,032 samples, 0.01%)</title><rect x="42.3276%" y="229" width="0.0143%" height="15" fill="rgb(222,148,37)" fg:x="271974249" fg:w="92032"/><text x="42.5776%" y="239.50"></text></g><g><title>open_path (92,032 samples, 0.01%)</title><rect x="42.3276%" y="213" width="0.0143%" height="15" fill="rgb(234,67,33)" fg:x="271974249" fg:w="92032"/><text x="42.5776%" y="223.50"></text></g><g><title>_start (882,648 samples, 0.14%)</title><rect x="42.3270%" y="341" width="0.1374%" height="15" fill="rgb(247,98,35)" fg:x="271970276" fg:w="882648"/><text x="42.5770%" y="351.50"></text></g><g><title>_dl_start (882,647 samples, 0.14%)</title><rect x="42.3270%" y="325" width="0.1374%" height="15" fill="rgb(247,138,52)" fg:x="271970277" fg:w="882647"/><text x="42.5770%" y="335.50"></text></g><g><title>_dl_sysdep_start (882,413 samples, 0.14%)</title><rect x="42.3271%" y="309" width="0.1373%" height="15" fill="rgb(213,79,30)" fg:x="271970511" fg:w="882413"/><text x="42.5771%" y="319.50"></text></g><g><title>dl_main (878,675 samples, 0.14%)</title><rect x="42.3276%" y="293" width="0.1367%" height="15" fill="rgb(246,177,23)" fg:x="271974249" fg:w="878675"/><text x="42.5776%" y="303.50"></text></g><g><title>_dl_relocate_object (786,643 samples, 0.12%)</title><rect x="42.3420%" y="277" width="0.1224%" height="15" fill="rgb(230,62,27)" fg:x="272066281" fg:w="786643"/><text x="42.5920%" y="287.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::build_trie (4,852,837 samples, 0.76%)</title><rect x="42.4644%" y="341" width="0.7553%" height="15" fill="rgb(216,154,8)" fg:x="272852924" fg:w="4852837"/><text x="42.7144%" y="351.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::follow_transition (4,852,837 samples, 0.76%)</title><rect x="42.4644%" y="325" width="0.7553%" height="15" fill="rgb(244,35,45)" fg:x="272852924" fg:w="4852837"/><text x="42.7144%" y="335.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::follow_transition_sparse (4,852,837 samples, 0.76%)</title><rect x="42.4644%" y="309" width="0.7553%" height="15" fill="rgb(251,115,12)" fg:x="272852924" fg:w="4852837"/><text x="42.7144%" y="319.50"></text></g><g><title>&lt;core::iter::sources::from_fn::FromFn&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,852,837 samples, 0.76%)</title><rect x="42.4644%" y="293" width="0.7553%" height="15" fill="rgb(240,54,50)" fg:x="272852924" fg:w="4852837"/><text x="42.7144%" y="303.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::iter_trans::{{closure}} (4,852,837 samples, 0.76%)</title><rect x="42.4644%" y="277" width="0.7553%" height="15" fill="rgb(233,84,52)" fg:x="272852924" fg:w="4852837"/><text x="42.7144%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5,021,490 samples, 0.78%)</title><rect x="43.2196%" y="341" width="0.7815%" height="15" fill="rgb(207,117,47)" fg:x="277705761" fg:w="5021490"/><text x="43.4696%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (5,021,490 samples, 0.78%)</title><rect x="43.2196%" y="325" width="0.7815%" height="15" fill="rgb(249,43,39)" fg:x="277705761" fg:w="5021490"/><text x="43.4696%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (5,021,490 samples, 0.78%)</title><rect x="43.2196%" y="309" width="0.7815%" height="15" fill="rgb(209,38,44)" fg:x="277705761" fg:w="5021490"/><text x="43.4696%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (5,021,490 samples, 0.78%)</title><rect x="43.2196%" y="293" width="0.7815%" height="15" fill="rgb(236,212,23)" fg:x="277705761" fg:w="5021490"/><text x="43.4696%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9,696,772 samples, 1.51%)</title><rect x="44.0021%" y="341" width="1.5091%" height="15" fill="rgb(242,79,21)" fg:x="282733437" fg:w="9696772"/><text x="44.2521%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9,696,772 samples, 1.51%)</title><rect x="44.0021%" y="325" width="1.5091%" height="15" fill="rgb(211,96,35)" fg:x="282733437" fg:w="9696772"/><text x="44.2521%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt; (9,696,772 samples, 1.51%)</title><rect x="44.0021%" y="309" width="1.5091%" height="15" fill="rgb(253,215,40)" fg:x="282733437" fg:w="9696772"/><text x="44.2521%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedMap&gt; (9,696,772 samples, 1.51%)</title><rect x="44.0021%" y="293" width="1.5091%" height="15" fill="rgb(211,81,21)" fg:x="282733437" fg:w="9696772"/><text x="44.2521%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (9,696,772 samples, 1.51%)</title><rect x="44.0021%" y="277" width="1.5091%" height="15" fill="rgb(208,190,38)" fg:x="282733437" fg:w="9696772"/><text x="44.2521%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,696,772 samples, 1.51%)</title><rect x="44.0021%" y="261" width="1.5091%" height="15" fill="rgb(235,213,38)" fg:x="282733437" fg:w="9696772"/><text x="44.2521%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::map::Utf8BoundedEntry]&gt; (9,696,772 samples, 1.51%)</title><rect x="44.0021%" y="245" width="1.5091%" height="15" fill="rgb(237,122,38)" fg:x="282733437" fg:w="9696772"/><text x="44.2521%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt; (9,696,772 samples, 1.51%)</title><rect x="44.0021%" y="229" width="1.5091%" height="15" fill="rgb(244,218,35)" fg:x="282733437" fg:w="9696772"/><text x="44.2521%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (9,696,772 samples, 1.51%)</title><rect x="44.0021%" y="213" width="1.5091%" height="15" fill="rgb(240,68,47)" fg:x="282733437" fg:w="9696772"/><text x="44.2521%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (9,696,772 samples, 1.51%)</title><rect x="44.0021%" y="197" width="1.5091%" height="15" fill="rgb(210,16,53)" fg:x="282733437" fg:w="9696772"/><text x="44.2521%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9,696,772 samples, 1.51%)</title><rect x="44.0021%" y="181" width="1.5091%" height="15" fill="rgb(235,124,12)" fg:x="282733437" fg:w="9696772"/><text x="44.2521%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (5,024,820 samples, 0.78%)</title><rect x="44.7292%" y="165" width="0.7820%" height="15" fill="rgb(224,169,11)" fg:x="287405389" fg:w="5024820"/><text x="44.9792%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (5,024,820 samples, 0.78%)</title><rect x="44.7292%" y="149" width="0.7820%" height="15" fill="rgb(250,166,2)" fg:x="287405389" fg:w="5024820"/><text x="44.9792%" y="159.50"></text></g><g><title>kaka_nest::util::visit_dir (1,127,209 samples, 0.18%)</title><rect x="45.5147%" y="341" width="0.1754%" height="15" fill="rgb(242,216,29)" fg:x="292452568" fg:w="1127209"/><text x="45.7647%" y="351.50"></text></g><g><title>&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1,127,209 samples, 0.18%)</title><rect x="45.5147%" y="325" width="0.1754%" height="15" fill="rgb(230,116,27)" fg:x="292452568" fg:w="1127209"/><text x="45.7647%" y="335.50"></text></g><g><title>[unknown] (1,127,209 samples, 0.18%)</title><rect x="45.5147%" y="309" width="0.1754%" height="15" fill="rgb(228,99,48)" fg:x="292452568" fg:w="1127209"/><text x="45.7647%" y="319.50"></text></g><g><title>&lt;std::sys::fs::unix::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1,127,209 samples, 0.18%)</title><rect x="45.5147%" y="293" width="0.1754%" height="15" fill="rgb(253,11,6)" fg:x="292452568" fg:w="1127209"/><text x="45.7647%" y="303.50"></text></g><g><title>__GI___readdir64 (1,127,209 samples, 0.18%)</title><rect x="45.5147%" y="277" width="0.1754%" height="15" fill="rgb(247,143,39)" fg:x="292452568" fg:w="1127209"/><text x="45.7647%" y="287.50"></text></g><g><title>lol_html::parser::state_machine::StateMachine::tag_open_state (919,049 samples, 0.14%)</title><rect x="45.6901%" y="341" width="0.1430%" height="15" fill="rgb(236,97,10)" fg:x="293579777" fg:w="919049"/><text x="45.9401%" y="351.50"></text></g><g><title>lol_html::parser::state_machine::StateMachine::end_tag_open_state (919,049 samples, 0.14%)</title><rect x="45.6901%" y="325" width="0.1430%" height="15" fill="rgb(233,208,19)" fg:x="293579777" fg:w="919049"/><text x="45.9401%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4,723,333 samples, 0.74%)</title><rect x="45.8332%" y="341" width="0.7351%" height="15" fill="rgb(216,164,2)" fg:x="294498826" fg:w="4723333"/><text x="46.0832%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Config::byte_classes_from_nfa (4,723,333 samples, 0.74%)</title><rect x="45.8332%" y="325" width="0.7351%" height="15" fill="rgb(220,129,5)" fg:x="294498826" fg:w="4723333"/><text x="46.0832%" y="335.50"></text></g><g><title>regex_automata::util::alphabet::ByteClassSet::byte_classes (4,723,333 samples, 0.74%)</title><rect x="45.8332%" y="309" width="0.7351%" height="15" fill="rgb(242,17,10)" fg:x="294498826" fg:w="4723333"/><text x="46.0832%" y="319.50"></text></g><g><title>regex_automata::util::alphabet::ByteSet::contains (4,723,333 samples, 0.74%)</title><rect x="45.8332%" y="293" width="0.7351%" height="15" fill="rgb(242,107,0)" fg:x="294498826" fg:w="4723333"/><text x="46.0832%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4,795,984 samples, 0.75%)</title><rect x="46.5683%" y="341" width="0.7464%" height="15" fill="rgb(251,28,31)" fg:x="299222159" fg:w="4795984"/><text x="46.8183%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4,963,565 samples, 0.77%)</title><rect x="47.3147%" y="341" width="0.7725%" height="15" fill="rgb(233,223,10)" fg:x="304018143" fg:w="4963565"/><text x="47.5647%" y="351.50"></text></g><g><title>alloc::vec::from_elem (4,963,565 samples, 0.77%)</title><rect x="47.3147%" y="325" width="0.7725%" height="15" fill="rgb(215,21,27)" fg:x="304018143" fg:w="4963565"/><text x="47.5647%" y="335.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (4,963,565 samples, 0.77%)</title><rect x="47.3147%" y="309" width="0.7725%" height="15" fill="rgb(232,23,21)" fg:x="304018143" fg:w="4963565"/><text x="47.5647%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (4,963,565 samples, 0.77%)</title><rect x="47.3147%" y="293" width="0.7725%" height="15" fill="rgb(244,5,23)" fg:x="304018143" fg:w="4963565"/><text x="47.5647%" y="303.50"></text></g><g><title>core::ptr::write (4,963,565 samples, 0.77%)</title><rect x="47.3147%" y="277" width="0.7725%" height="15" fill="rgb(226,81,46)" fg:x="304018143" fg:w="4963565"/><text x="47.5647%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (4,653,385 samples, 0.72%)</title><rect x="48.0872%" y="341" width="0.7242%" height="15" fill="rgb(247,70,30)" fg:x="308981708" fg:w="4653385"/><text x="48.3372%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::State::remap (4,653,385 samples, 0.72%)</title><rect x="48.0872%" y="325" width="0.7242%" height="15" fill="rgb(212,68,19)" fg:x="308981708" fg:w="4653385"/><text x="48.3372%" y="335.50"></text></g><g><title>serde::ser::Serializer::collect_seq (928,322 samples, 0.14%)</title><rect x="48.8114%" y="341" width="0.1445%" height="15" fill="rgb(240,187,13)" fg:x="313635093" fg:w="928322"/><text x="49.0614%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (928,322 samples, 0.14%)</title><rect x="48.8114%" y="325" width="0.1445%" height="15" fill="rgb(223,113,26)" fg:x="313635093" fg:w="928322"/><text x="49.0614%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (928,322 samples, 0.14%)</title><rect x="48.8114%" y="309" width="0.1445%" height="15" fill="rgb(206,192,2)" fg:x="313635093" fg:w="928322"/><text x="49.0614%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (928,322 samples, 0.14%)</title><rect x="48.8114%" y="293" width="0.1445%" height="15" fill="rgb(241,108,4)" fg:x="313635093" fg:w="928322"/><text x="49.0614%" y="303.50"></text></g><g><title>serde::ser::Serializer::collect_seq::{{closure}} (928,322 samples, 0.14%)</title><rect x="48.8114%" y="277" width="0.1445%" height="15" fill="rgb(247,173,49)" fg:x="313635093" fg:w="928322"/><text x="49.0614%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::serialize_element (928,322 samples, 0.14%)</title><rect x="48.8114%" y="261" width="0.1445%" height="15" fill="rgb(224,114,35)" fg:x="313635093" fg:w="928322"/><text x="49.0614%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (928,322 samples, 0.14%)</title><rect x="48.8114%" y="245" width="0.1445%" height="15" fill="rgb(245,159,27)" fg:x="313635093" fg:w="928322"/><text x="49.0614%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (928,322 samples, 0.14%)</title><rect x="48.8114%" y="229" width="0.1445%" height="15" fill="rgb(245,172,44)" fg:x="313635093" fg:w="928322"/><text x="49.0614%" y="239.50"></text></g><g><title>core::ptr::write (928,322 samples, 0.14%)</title><rect x="48.8114%" y="213" width="0.1445%" height="15" fill="rgb(236,23,11)" fg:x="313635093" fg:w="928322"/><text x="49.0614%" y="223.50"></text></g><g><title>[unknown] (4,739,785 samples, 0.74%)</title><rect x="50.4448%" y="293" width="0.7377%" height="15" fill="rgb(205,117,38)" fg:x="324130501" fg:w="4739785"/><text x="50.6948%" y="303.50"></text></g><g><title>ts_query__perform_analysis (4,739,785 samples, 0.74%)</title><rect x="50.4448%" y="277" width="0.7377%" height="15" fill="rgb(237,72,25)" fg:x="324130501" fg:w="4739785"/><text x="50.6948%" y="287.50"></text></g><g><title>analysis_state__top (4,739,785 samples, 0.74%)</title><rect x="50.4448%" y="261" width="0.7377%" height="15" fill="rgb(244,70,9)" fg:x="324130501" fg:w="4739785"/><text x="50.6948%" y="271.50"></text></g><g><title>analysis_state_set__push (4,714,406 samples, 0.73%)</title><rect x="51.1824%" y="293" width="0.7337%" height="15" fill="rgb(217,125,39)" fg:x="328870286" fg:w="4714406"/><text x="51.4324%" y="303.50"></text></g><g><title>analysis_state_pool__clone_or_reuse (4,714,406 samples, 0.73%)</title><rect x="51.1824%" y="277" width="0.7337%" height="15" fill="rgb(235,36,10)" fg:x="328870286" fg:w="4714406"/><text x="51.4324%" y="287.50"></text></g><g><title>ts_lookahead_iterator__next (1,768,502 samples, 0.28%)</title><rect x="51.9161%" y="293" width="0.2752%" height="15" fill="rgb(251,123,47)" fg:x="333584692" fg:w="1768502"/><text x="52.1661%" y="303.50"></text></g><g><title>_array__splice (4,997,383 samples, 0.78%)</title><rect x="81.1412%" y="261" width="0.7777%" height="15" fill="rgb(221,13,13)" fg:x="521369005" fg:w="4997383"/><text x="81.3912%" y="271.50"></text></g><g><title>analysis_state__compare (8,015,480 samples, 1.25%)</title><rect x="81.9190%" y="245" width="1.2475%" height="15" fill="rgb(238,131,9)" fg:x="526366388" fg:w="8015480"/><text x="82.1690%" y="255.50"></text></g><g><title>analysis_state_set__insert_sorted (41,914,155 samples, 6.52%)</title><rect x="80.3744%" y="277" width="6.5231%" height="15" fill="rgb(211,50,8)" fg:x="516442101" fg:w="41914155"/><text x="80.6244%" y="287.50">analysis_..</text></g><g><title>analysis_state__compare (31,989,868 samples, 4.98%)</title><rect x="81.9190%" y="261" width="4.9786%" height="15" fill="rgb(245,182,24)" fg:x="526366388" fg:w="31989868"/><text x="82.1690%" y="271.50">analys..</text></g><g><title>analysis_state__compare_position (23,974,388 samples, 3.73%)</title><rect x="83.1664%" y="245" width="3.7312%" height="15" fill="rgb(242,14,37)" fg:x="534381868" fg:w="23974388"/><text x="83.4164%" y="255.50">anal..</text></g><g><title>analysis_subgraph_node__compare (38,572,339 samples, 6.00%)</title><rect x="86.8976%" y="277" width="6.0031%" height="15" fill="rgb(246,228,12)" fg:x="558356256" fg:w="38572339"/><text x="87.1476%" y="287.50">analysis..</text></g><g><title>ts_query__analyze_patterns (321,727,601 samples, 50.07%)</title><rect x="48.9558%" y="309" width="50.0708%" height="15" fill="rgb(213,55,15)" fg:x="314563416" fg:w="321727601"/><text x="49.2058%" y="319.50">ts_query__analyze_patterns</text></g><g><title>ts_query__perform_analysis (300,937,823 samples, 46.84%)</title><rect x="52.1914%" y="293" width="46.8353%" height="15" fill="rgb(209,9,3)" fg:x="335353194" fg:w="300937823"/><text x="52.4414%" y="303.50">ts_query__perform_analysis</text></g><g><title>ts_lookahead_iterator__next (39,362,422 samples, 6.13%)</title><rect x="92.9006%" y="277" width="6.1260%" height="15" fill="rgb(230,59,30)" fg:x="596928595" fg:w="39362422"/><text x="93.1506%" y="287.50">ts_looka..</text></g><g><title>ts_language_symbol_for_name (1,206,739 samples, 0.19%)</title><rect x="99.0267%" y="277" width="0.1878%" height="15" fill="rgb(209,121,21)" fg:x="636291017" fg:w="1206739"/><text x="99.2767%" y="287.50"></text></g><g><title>__strncmp_evex (1,206,739 samples, 0.19%)</title><rect x="99.0267%" y="261" width="0.1878%" height="15" fill="rgb(220,109,13)" fg:x="636291017" fg:w="1206739"/><text x="99.2767%" y="271.50"></text></g><g><title>all (642,545,150 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="642545150"/><text x="0.2500%" y="383.50"></text></g><g><title>kaka-nest (642,545,150 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="642545150"/><text x="0.2500%" y="367.50">kaka-nest</text></g><g><title>tree_sitter::Query::new (327,981,734 samples, 51.04%)</title><rect x="48.9558%" y="341" width="51.0442%" height="15" fill="rgb(224,123,36)" fg:x="314563416" fg:w="327981734"/><text x="49.2058%" y="351.50">tree_sitter::Query::new</text></g><g><title>ts_query_new (327,981,734 samples, 51.04%)</title><rect x="48.9558%" y="325" width="51.0442%" height="15" fill="rgb(240,125,3)" fg:x="314563416" fg:w="327981734"/><text x="49.2058%" y="335.50">ts_query_new</text></g><g><title>ts_query__parse_pattern (6,254,133 samples, 0.97%)</title><rect x="99.0267%" y="309" width="0.9733%" height="15" fill="rgb(205,98,50)" fg:x="636291017" fg:w="6254133"/><text x="99.2767%" y="319.50"></text></g><g><title>ts_query__parse_pattern (6,254,133 samples, 0.97%)</title><rect x="99.0267%" y="293" width="0.9733%" height="15" fill="rgb(205,185,37)" fg:x="636291017" fg:w="6254133"/><text x="99.2767%" y="303.50"></text></g><g><title>ts_query__parse_pattern (5,047,394 samples, 0.79%)</title><rect x="99.2145%" y="277" width="0.7855%" height="15" fill="rgb(238,207,15)" fg:x="637497756" fg:w="5047394"/><text x="99.4645%" y="287.50"></text></g><g><title>ts_query__parse_pattern (5,047,394 samples, 0.79%)</title><rect x="99.2145%" y="261" width="0.7855%" height="15" fill="rgb(213,199,42)" fg:x="637497756" fg:w="5047394"/><text x="99.4645%" y="271.50"></text></g><g><title>ts_query__parse_pattern (5,047,394 samples, 0.79%)</title><rect x="99.2145%" y="245" width="0.7855%" height="15" fill="rgb(235,201,11)" fg:x="637497756" fg:w="5047394"/><text x="99.4645%" y="255.50"></text></g><g><title>ts_language_symbol_for_name (5,047,394 samples, 0.79%)</title><rect x="99.2145%" y="229" width="0.7855%" height="15" fill="rgb(207,46,11)" fg:x="637497756" fg:w="5047394"/><text x="99.4645%" y="239.50"></text></g><g><title>__strncmp_evex (5,047,394 samples, 0.79%)</title><rect x="99.2145%" y="213" width="0.7855%" height="15" fill="rgb(241,35,35)" fg:x="637497756" fg:w="5047394"/><text x="99.4645%" y="223.50"></text></g></svg></svg>