<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1590" onload="init(evt)" viewBox="0 0 1200 1590" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1590" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1573.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1573.00"> </text><svg id="frames" x="10" width="1180" total_samples="751741676"><g><title>__rustc::__rdl_dealloc (3,700,035 samples, 0.49%)</title><rect x="0.0000%" y="1509" width="0.4922%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3700035"/><text x="0.2500%" y="1519.50"></text></g><g><title>kaka_nest::get_markdown::get_blog_paths (501,504 samples, 0.07%)</title><rect x="0.4922%" y="1349" width="0.0667%" height="15" fill="rgb(217,0,24)" fg:x="3700035" fg:w="501504"/><text x="0.7422%" y="1359.50"></text></g><g><title>kaka_nest::get_markdown::visit_dir (501,504 samples, 0.07%)</title><rect x="0.4922%" y="1333" width="0.0667%" height="15" fill="rgb(221,193,54)" fg:x="3700035" fg:w="501504"/><text x="0.7422%" y="1343.50"></text></g><g><title>std::fs::DirEntry::path (501,504 samples, 0.07%)</title><rect x="0.4922%" y="1317" width="0.0667%" height="15" fill="rgb(248,212,6)" fg:x="3700035" fg:w="501504"/><text x="0.7422%" y="1327.50"></text></g><g><title>std::path::Path::_join (501,504 samples, 0.07%)</title><rect x="0.4922%" y="1301" width="0.0667%" height="15" fill="rgb(208,68,35)" fg:x="3700035" fg:w="501504"/><text x="0.7422%" y="1311.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (501,504 samples, 0.07%)</title><rect x="0.4922%" y="1285" width="0.0667%" height="15" fill="rgb(232,128,0)" fg:x="3700035" fg:w="501504"/><text x="0.7422%" y="1295.50"></text></g><g><title>alloc::raw_vec::finish_grow (501,504 samples, 0.07%)</title><rect x="0.4922%" y="1269" width="0.0667%" height="15" fill="rgb(207,160,47)" fg:x="3700035" fg:w="501504"/><text x="0.7422%" y="1279.50"></text></g><g><title>__rustc::__rust_realloc (501,504 samples, 0.07%)</title><rect x="0.4922%" y="1253" width="0.0667%" height="15" fill="rgb(228,23,34)" fg:x="3700035" fg:w="501504"/><text x="0.7422%" y="1263.50"></text></g><g><title>&lt;kaka_nest::HANDLEBARS as core::ops::deref::Deref&gt;::deref (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1285" width="0.0694%" height="15" fill="rgb(218,30,26)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1295.50"></text></g><g><title>&lt;kaka_nest::HANDLEBARS as core::ops::deref::Deref&gt;::deref::__stability (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1269" width="0.0694%" height="15" fill="rgb(220,122,19)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1279.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1253" width="0.0694%" height="15" fill="rgb(250,228,42)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1263.50"></text></g><g><title>std::sync::poison::once::Once::call_once (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1237" width="0.0694%" height="15" fill="rgb(240,193,28)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1247.50"></text></g><g><title>std::sys::sync::once::futex::Once::call (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1221" width="0.0694%" height="15" fill="rgb(216,20,37)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1231.50"></text></g><g><title>std::sync::poison::once::Once::call_once::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1205" width="0.0694%" height="15" fill="rgb(206,188,39)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1215.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1189" width="0.0694%" height="15" fill="rgb(217,207,13)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1199.50"></text></g><g><title>core::ops::function::FnOnce::call_once (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1173" width="0.0694%" height="15" fill="rgb(231,73,38)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1183.50"></text></g><g><title>&lt;kaka_nest::HANDLEBARS as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1157" width="0.0694%" height="15" fill="rgb(225,20,46)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1167.50"></text></g><g><title>handlebars::registry::Registry::register_template_file (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1141" width="0.0694%" height="15" fill="rgb(210,31,41)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1151.50"></text></g><g><title>handlebars::registry::Registry::register_template_string (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1125" width="0.0694%" height="15" fill="rgb(221,200,47)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1135.50"></text></g><g><title>handlebars::template::Template::compile2 (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1109" width="0.0694%" height="15" fill="rgb(226,26,5)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1119.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1093" width="0.0694%" height="15" fill="rgb(249,33,26)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1103.50"></text></g><g><title>pest::parser_state::state (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1077" width="0.0694%" height="15" fill="rgb(235,183,28)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1087.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1061" width="0.0694%" height="15" fill="rgb(221,5,38)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1071.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::handlebars (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1045" width="0.0694%" height="15" fill="rgb(247,18,42)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1055.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1029" width="0.0694%" height="15" fill="rgb(241,131,45)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1039.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::handlebars::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="1013" width="0.0694%" height="15" fill="rgb(249,31,29)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1023.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template (521,361 samples, 0.07%)</title><rect x="0.5589%" y="997" width="0.0694%" height="15" fill="rgb(225,111,53)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="1007.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::rule (521,361 samples, 0.07%)</title><rect x="0.5589%" y="981" width="0.0694%" height="15" fill="rgb(238,160,17)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="991.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="965" width="0.0694%" height="15" fill="rgb(214,148,48)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="975.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (521,361 samples, 0.07%)</title><rect x="0.5589%" y="949" width="0.0694%" height="15" fill="rgb(232,36,49)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="959.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="933" width="0.0694%" height="15" fill="rgb(209,103,24)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="943.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::optional (521,361 samples, 0.07%)</title><rect x="0.5589%" y="917" width="0.0694%" height="15" fill="rgb(229,88,8)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="927.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="901" width="0.0694%" height="15" fill="rgb(213,181,19)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="911.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (521,361 samples, 0.07%)</title><rect x="0.5589%" y="885" width="0.0694%" height="15" fill="rgb(254,191,54)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="895.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}}::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="869" width="0.0694%" height="15" fill="rgb(241,83,37)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="879.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::repeat (521,361 samples, 0.07%)</title><rect x="0.5589%" y="853" width="0.0694%" height="15" fill="rgb(233,36,39)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="863.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="837" width="0.0694%" height="15" fill="rgb(226,3,54)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="847.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (521,361 samples, 0.07%)</title><rect x="0.5589%" y="821" width="0.0694%" height="15" fill="rgb(245,192,40)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="831.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="805" width="0.0694%" height="15" fill="rgb(238,167,29)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (521,361 samples, 0.07%)</title><rect x="0.5589%" y="789" width="0.0694%" height="15" fill="rgb(232,182,51)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="799.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="773" width="0.0694%" height="15" fill="rgb(231,60,39)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="783.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text (521,361 samples, 0.07%)</title><rect x="0.5589%" y="757" width="0.0694%" height="15" fill="rgb(208,69,12)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="767.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::atomic (521,361 samples, 0.07%)</title><rect x="0.5589%" y="741" width="0.0694%" height="15" fill="rgb(235,93,37)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="751.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="725" width="0.0694%" height="15" fill="rgb(213,116,39)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="735.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::rule (521,361 samples, 0.07%)</title><rect x="0.5589%" y="709" width="0.0694%" height="15" fill="rgb(222,207,29)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="719.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}}::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="693" width="0.0694%" height="15" fill="rgb(206,96,30)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="703.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (521,361 samples, 0.07%)</title><rect x="0.5589%" y="677" width="0.0694%" height="15" fill="rgb(218,138,4)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="687.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}}::{{closure}}::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="661" width="0.0694%" height="15" fill="rgb(250,191,14)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (521,361 samples, 0.07%)</title><rect x="0.5589%" y="645" width="0.0694%" height="15" fill="rgb(239,60,40)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="655.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}}::{{closure}}::{{closure}}::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="629" width="0.0694%" height="15" fill="rgb(206,27,48)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="639.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::repeat (521,361 samples, 0.07%)</title><rect x="0.5589%" y="613" width="0.0694%" height="15" fill="rgb(225,35,8)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="623.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="597" width="0.0694%" height="15" fill="rgb(250,213,24)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::or_else (521,361 samples, 0.07%)</title><rect x="0.5589%" y="581" width="0.0694%" height="15" fill="rgb(247,123,22)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="591.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="565" width="0.0694%" height="15" fill="rgb(231,138,38)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="575.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (521,361 samples, 0.07%)</title><rect x="0.5589%" y="549" width="0.0694%" height="15" fill="rgb(231,145,46)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="559.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (521,361 samples, 0.07%)</title><rect x="0.5589%" y="533" width="0.0694%" height="15" fill="rgb(251,118,11)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="543.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::lookahead (521,361 samples, 0.07%)</title><rect x="0.5589%" y="517" width="0.0694%" height="15" fill="rgb(217,147,25)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="527.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::restore (521,361 samples, 0.07%)</title><rect x="0.5589%" y="501" width="0.0694%" height="15" fill="rgb(247,81,37)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="511.50"></text></g><g><title>pest::stack::Stack&lt;T&gt;::restore (521,361 samples, 0.07%)</title><rect x="0.5589%" y="485" width="0.0694%" height="15" fill="rgb(209,12,38)" fg:x="4201539" fg:w="521361"/><text x="0.8089%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (2,647,294 samples, 0.35%)</title><rect x="0.6283%" y="1061" width="0.3522%" height="15" fill="rgb(227,1,9)" fg:x="4722900" fg:w="2647294"/><text x="0.8783%" y="1071.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (2,647,294 samples, 0.35%)</title><rect x="0.6283%" y="1045" width="0.3522%" height="15" fill="rgb(248,47,43)" fg:x="4722900" fg:w="2647294"/><text x="0.8783%" y="1055.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (2,647,294 samples, 0.35%)</title><rect x="0.6283%" y="1029" width="0.3522%" height="15" fill="rgb(221,10,30)" fg:x="4722900" fg:w="2647294"/><text x="0.8783%" y="1039.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,647,294 samples, 0.35%)</title><rect x="0.6283%" y="1013" width="0.3522%" height="15" fill="rgb(210,229,1)" fg:x="4722900" fg:w="2647294"/><text x="0.8783%" y="1023.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,647,294 samples, 0.35%)</title><rect x="0.6283%" y="997" width="0.3522%" height="15" fill="rgb(222,148,37)" fg:x="4722900" fg:w="2647294"/><text x="0.8783%" y="1007.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,647,294 samples, 0.35%)</title><rect x="0.6283%" y="981" width="0.3522%" height="15" fill="rgb(234,67,33)" fg:x="4722900" fg:w="2647294"/><text x="0.8783%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2,647,294 samples, 0.35%)</title><rect x="0.6283%" y="965" width="0.3522%" height="15" fill="rgb(247,98,35)" fg:x="4722900" fg:w="2647294"/><text x="0.8783%" y="975.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (2,647,294 samples, 0.35%)</title><rect x="0.6283%" y="949" width="0.3522%" height="15" fill="rgb(247,138,52)" fg:x="4722900" fg:w="2647294"/><text x="0.8783%" y="959.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2,647,294 samples, 0.35%)</title><rect x="0.6283%" y="933" width="0.3522%" height="15" fill="rgb(213,79,30)" fg:x="4722900" fg:w="2647294"/><text x="0.8783%" y="943.50"></text></g><g><title>core::str::validations::next_code_point (2,647,294 samples, 0.35%)</title><rect x="0.6283%" y="917" width="0.3522%" height="15" fill="rgb(246,177,23)" fg:x="4722900" fg:w="2647294"/><text x="0.8783%" y="927.50"></text></g><g><title>regex_automata::meta::strategy::new (501,504 samples, 0.07%)</title><rect x="0.9804%" y="965" width="0.0667%" height="15" fill="rgb(230,62,27)" fg:x="7370194" fg:w="501504"/><text x="1.2304%" y="975.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (501,504 samples, 0.07%)</title><rect x="0.9804%" y="949" width="0.0667%" height="15" fill="rgb(216,154,8)" fg:x="7370194" fg:w="501504"/><text x="1.2304%" y="959.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (501,504 samples, 0.07%)</title><rect x="0.9804%" y="933" width="0.0667%" height="15" fill="rgb(244,35,45)" fg:x="7370194" fg:w="501504"/><text x="1.2304%" y="943.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (501,504 samples, 0.07%)</title><rect x="0.9804%" y="917" width="0.0667%" height="15" fill="rgb(251,115,12)" fg:x="7370194" fg:w="501504"/><text x="1.2304%" y="927.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (501,504 samples, 0.07%)</title><rect x="0.9804%" y="901" width="0.0667%" height="15" fill="rgb(240,54,50)" fg:x="7370194" fg:w="501504"/><text x="1.2304%" y="911.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::set_captures (501,504 samples, 0.07%)</title><rect x="0.9804%" y="885" width="0.0667%" height="15" fill="rgb(233,84,52)" fg:x="7370194" fg:w="501504"/><text x="1.2304%" y="895.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (501,504 samples, 0.07%)</title><rect x="0.9804%" y="869" width="0.0667%" height="15" fill="rgb(207,117,47)" fg:x="7370194" fg:w="501504"/><text x="1.2304%" y="879.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (501,504 samples, 0.07%)</title><rect x="0.9804%" y="853" width="0.0667%" height="15" fill="rgb(249,43,39)" fg:x="7370194" fg:w="501504"/><text x="1.2304%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (501,504 samples, 0.07%)</title><rect x="0.9804%" y="837" width="0.0667%" height="15" fill="rgb(209,38,44)" fg:x="7370194" fg:w="501504"/><text x="1.2304%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (501,504 samples, 0.07%)</title><rect x="0.9804%" y="821" width="0.0667%" height="15" fill="rgb(236,212,23)" fg:x="7370194" fg:w="501504"/><text x="1.2304%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (501,504 samples, 0.07%)</title><rect x="0.9804%" y="805" width="0.0667%" height="15" fill="rgb(242,79,21)" fg:x="7370194" fg:w="501504"/><text x="1.2304%" y="815.50"></text></g><g><title>alloc::alloc::alloc (501,504 samples, 0.07%)</title><rect x="0.9804%" y="789" width="0.0667%" height="15" fill="rgb(211,96,35)" fg:x="7370194" fg:w="501504"/><text x="1.2304%" y="799.50"></text></g><g><title>malloc (501,504 samples, 0.07%)</title><rect x="0.9804%" y="773" width="0.0667%" height="15" fill="rgb(253,215,40)" fg:x="7370194" fg:w="501504"/><text x="1.2304%" y="783.50"></text></g><g><title>tree_sitter::Query::from_raw_parts (7,036,127 samples, 0.94%)</title><rect x="0.6283%" y="1077" width="0.9360%" height="15" fill="rgb(211,81,21)" fg:x="4722900" fg:w="7036127"/><text x="0.8783%" y="1087.50"></text></g><g><title>regex::regex::bytes::Regex::new (4,388,833 samples, 0.58%)</title><rect x="0.9804%" y="1061" width="0.5838%" height="15" fill="rgb(208,190,38)" fg:x="7370194" fg:w="4388833"/><text x="1.2304%" y="1071.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::build (4,388,833 samples, 0.58%)</title><rect x="0.9804%" y="1045" width="0.5838%" height="15" fill="rgb(235,213,38)" fg:x="7370194" fg:w="4388833"/><text x="1.2304%" y="1055.50"></text></g><g><title>regex::builders::Builder::build_one_bytes (4,388,833 samples, 0.58%)</title><rect x="0.9804%" y="1029" width="0.5838%" height="15" fill="rgb(237,122,38)" fg:x="7370194" fg:w="4388833"/><text x="1.2304%" y="1039.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (4,388,833 samples, 0.58%)</title><rect x="0.9804%" y="1013" width="0.5838%" height="15" fill="rgb(244,218,35)" fg:x="7370194" fg:w="4388833"/><text x="1.2304%" y="1023.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (4,388,833 samples, 0.58%)</title><rect x="0.9804%" y="997" width="0.5838%" height="15" fill="rgb(240,68,47)" fg:x="7370194" fg:w="4388833"/><text x="1.2304%" y="1007.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (4,388,833 samples, 0.58%)</title><rect x="0.9804%" y="981" width="0.5838%" height="15" fill="rgb(210,16,53)" fg:x="7370194" fg:w="4388833"/><text x="1.2304%" y="991.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (3,887,329 samples, 0.52%)</title><rect x="1.0471%" y="965" width="0.5171%" height="15" fill="rgb(235,124,12)" fg:x="7871698" fg:w="3887329"/><text x="1.2971%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3,887,329 samples, 0.52%)</title><rect x="1.0471%" y="949" width="0.5171%" height="15" fill="rgb(224,169,11)" fg:x="7871698" fg:w="3887329"/><text x="1.2971%" y="959.50"></text></g><g><title>_array__assign (1,742,416 samples, 0.23%)</title><rect x="2.8954%" y="1045" width="0.2318%" height="15" fill="rgb(250,166,2)" fg:x="21765583" fg:w="1742416"/><text x="3.1454%" y="1055.50"></text></g><g><title>memcpy (1,742,416 samples, 0.23%)</title><rect x="2.8954%" y="1029" width="0.2318%" height="15" fill="rgb(242,216,29)" fg:x="21765583" fg:w="1742416"/><text x="3.1454%" y="1039.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,742,416 samples, 0.23%)</title><rect x="2.8954%" y="1013" width="0.2318%" height="15" fill="rgb(230,116,27)" fg:x="21765583" fg:w="1742416"/><text x="3.1454%" y="1023.50"></text></g><g><title>state_predecessor_map_add (3,812,381 samples, 0.51%)</title><rect x="3.1271%" y="1045" width="0.5071%" height="15" fill="rgb(228,99,48)" fg:x="23507999" fg:w="3812381"/><text x="3.3771%" y="1055.50"></text></g><g><title>ts_language_aliases_for_symbol (2,896,634 samples, 0.39%)</title><rect x="3.6343%" y="1045" width="0.3853%" height="15" fill="rgb(253,11,6)" fg:x="27320380" fg:w="2896634"/><text x="3.8843%" y="1055.50"></text></g><g><title>ts_lookahead_iterator__next (5,821,065 samples, 0.77%)</title><rect x="4.0196%" y="1045" width="0.7743%" height="15" fill="rgb(247,143,39)" fg:x="30217014" fg:w="5821065"/><text x="4.2696%" y="1055.50"></text></g><g><title>analysis_state__compare_position (2,514,282 samples, 0.33%)</title><rect x="48.7024%" y="1029" width="0.3345%" height="15" fill="rgb(236,97,10)" fg:x="366116065" fg:w="2514282"/><text x="48.9524%" y="1039.50"></text></g><g><title>analysis_state__recursion_depth (9,177,367 samples, 1.22%)</title><rect x="49.0368%" y="1029" width="1.2208%" height="15" fill="rgb(233,208,19)" fg:x="368630347" fg:w="9177367"/><text x="49.2868%" y="1039.50"></text></g><g><title>analysis_state__top (3,673,925 samples, 0.49%)</title><rect x="50.2577%" y="1029" width="0.4887%" height="15" fill="rgb(216,164,2)" fg:x="377807714" fg:w="3673925"/><text x="50.5077%" y="1039.50"></text></g><g><title>_array__splice (6,171,910 samples, 0.82%)</title><rect x="54.4302%" y="1013" width="0.8210%" height="15" fill="rgb(220,129,5)" fg:x="409174135" fg:w="6171910"/><text x="54.6802%" y="1023.50"></text></g><g><title>memmove (3,631,500 samples, 0.48%)</title><rect x="54.7681%" y="997" width="0.4831%" height="15" fill="rgb(242,17,10)" fg:x="411714545" fg:w="3631500"/><text x="55.0181%" y="1007.50"></text></g><g><title>__memmove_avx_unaligned_erms (3,631,500 samples, 0.48%)</title><rect x="54.7681%" y="981" width="0.4831%" height="15" fill="rgb(242,107,0)" fg:x="411714545" fg:w="3631500"/><text x="55.0181%" y="991.50"></text></g><g><title>analysis_state__compare (21,045,939 samples, 2.80%)</title><rect x="55.2512%" y="997" width="2.7996%" height="15" fill="rgb(251,28,31)" fg:x="415346045" fg:w="21045939"/><text x="55.5012%" y="1007.50">an..</text></g><g><title>analysis_state_set__insert_sorted (109,098,523 samples, 14.51%)</title><rect x="50.7464%" y="1029" width="14.5128%" height="15" fill="rgb(233,223,10)" fg:x="381481639" fg:w="109098523"/><text x="50.9964%" y="1039.50">analysis_state_set__in..</text></g><g><title>analysis_state__compare (75,234,117 samples, 10.01%)</title><rect x="55.2512%" y="1013" width="10.0080%" height="15" fill="rgb(215,21,27)" fg:x="415346045" fg:w="75234117"/><text x="55.5012%" y="1023.50">analysis_state..</text></g><g><title>analysis_state__compare_position (54,188,178 samples, 7.21%)</title><rect x="58.0508%" y="997" width="7.2084%" height="15" fill="rgb(232,23,21)" fg:x="436391984" fg:w="54188178"/><text x="58.3008%" y="1007.50">analysis_s..</text></g><g><title>analysis_subgraph_node__compare (48,645,311 samples, 6.47%)</title><rect x="65.2591%" y="1029" width="6.4710%" height="15" fill="rgb(244,5,23)" fg:x="490580162" fg:w="48645311"/><text x="65.5091%" y="1039.50">analysis..</text></g><g><title>ts_language_lookaheads (2,714,513 samples, 0.36%)</title><rect x="71.7302%" y="1029" width="0.3611%" height="15" fill="rgb(226,81,46)" fg:x="539225473" fg:w="2714513"/><text x="71.9802%" y="1039.50"></text></g><g><title>ts_query__analyze_patterns (621,528,429 samples, 82.68%)</title><rect x="1.5642%" y="1061" width="82.6785%" height="15" fill="rgb(247,70,30)" fg:x="11759027" fg:w="621528429"/><text x="1.8142%" y="1071.50">ts_query__analyze_patterns</text></g><g><title>ts_query__perform_analysis (597,249,377 samples, 79.45%)</title><rect x="4.7939%" y="1045" width="79.4488%" height="15" fill="rgb(212,68,19)" fg:x="36038079" fg:w="597249377"/><text x="5.0439%" y="1055.50">ts_query__perform_analysis</text></g><g><title>ts_lookahead_iterator__next (91,347,470 samples, 12.15%)</title><rect x="72.0913%" y="1029" width="12.1514%" height="15" fill="rgb(240,187,13)" fg:x="541939986" fg:w="91347470"/><text x="72.3413%" y="1039.50">ts_lookahead_itera..</text></g><g><title>ts_language_symbol_for_name (832,407 samples, 0.11%)</title><rect x="84.2427%" y="1045" width="0.1107%" height="15" fill="rgb(223,113,26)" fg:x="633287456" fg:w="832407"/><text x="84.4927%" y="1055.50"></text></g><g><title>__strncmp_avx2 (832,407 samples, 0.11%)</title><rect x="84.2427%" y="1029" width="0.1107%" height="15" fill="rgb(206,192,2)" fg:x="633287456" fg:w="832407"/><text x="84.4927%" y="1039.50"></text></g><g><title>&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language (630,081,729 samples, 83.82%)</title><rect x="0.6283%" y="1237" width="83.8163%" height="15" fill="rgb(241,108,4)" fg:x="4722900" fg:w="630081729"/><text x="0.8783%" y="1247.50">&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (630,081,729 samples, 83.82%)</title><rect x="0.6283%" y="1221" width="83.8163%" height="15" fill="rgb(247,173,49)" fg:x="4722900" fg:w="630081729"/><text x="0.8783%" y="1231.50">once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (630,081,729 samples, 83.82%)</title><rect x="0.6283%" y="1205" width="83.8163%" height="15" fill="rgb(224,114,35)" fg:x="4722900" fg:w="630081729"/><text x="0.8783%" y="1215.50">once_cell::imp::OnceCell&lt;T&gt;::initialize</text></g><g><title>once_cell::imp::initialize_or_wait (630,081,729 samples, 83.82%)</title><rect x="0.6283%" y="1189" width="83.8163%" height="15" fill="rgb(245,159,27)" fg:x="4722900" fg:w="630081729"/><text x="0.8783%" y="1199.50">once_cell::imp::initialize_or_wait</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (630,081,729 samples, 83.82%)</title><rect x="0.6283%" y="1173" width="83.8163%" height="15" fill="rgb(245,172,44)" fg:x="4722900" fg:w="630081729"/><text x="0.8783%" y="1183.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (630,081,729 samples, 83.82%)</title><rect x="0.6283%" y="1157" width="83.8163%" height="15" fill="rgb(236,23,11)" fg:x="4722900" fg:w="630081729"/><text x="0.8783%" y="1167.50">once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}}</text></g><g><title>&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language::{{closure}} (630,081,729 samples, 83.82%)</title><rect x="0.6283%" y="1141" width="83.8163%" height="15" fill="rgb(205,117,38)" fg:x="4722900" fg:w="630081729"/><text x="0.8783%" y="1151.50">&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language::{{closure}}</text></g><g><title>syntastica_parsers::Lang::get_config (630,081,729 samples, 83.82%)</title><rect x="0.6283%" y="1125" width="83.8163%" height="15" fill="rgb(237,72,25)" fg:x="4722900" fg:w="630081729"/><text x="0.8783%" y="1135.50">syntastica_parsers::Lang::get_config</text></g><g><title>syntastica_highlight::HighlightConfiguration::new (630,081,729 samples, 83.82%)</title><rect x="0.6283%" y="1109" width="83.8163%" height="15" fill="rgb(244,70,9)" fg:x="4722900" fg:w="630081729"/><text x="0.8783%" y="1119.50">syntastica_highlight::HighlightConfiguration::new</text></g><g><title>tree_sitter::Query::new (630,081,729 samples, 83.82%)</title><rect x="0.6283%" y="1093" width="83.8163%" height="15" fill="rgb(217,125,39)" fg:x="4722900" fg:w="630081729"/><text x="0.8783%" y="1103.50">tree_sitter::Query::new</text></g><g><title>ts_query_new (623,045,602 samples, 82.88%)</title><rect x="1.5642%" y="1077" width="82.8803%" height="15" fill="rgb(235,36,10)" fg:x="11759027" fg:w="623045602"/><text x="1.8142%" y="1087.50">ts_query_new</text></g><g><title>ts_query__parse_pattern (1,517,173 samples, 0.20%)</title><rect x="84.2427%" y="1061" width="0.2018%" height="15" fill="rgb(251,123,47)" fg:x="633287456" fg:w="1517173"/><text x="84.4927%" y="1071.50"></text></g><g><title>ts_query__parse_pattern (684,766 samples, 0.09%)</title><rect x="84.3534%" y="1045" width="0.0911%" height="15" fill="rgb(221,13,13)" fg:x="634119863" fg:w="684766"/><text x="84.6034%" y="1055.50"></text></g><g><title>ts_query__parse_pattern (684,766 samples, 0.09%)</title><rect x="84.3534%" y="1029" width="0.0911%" height="15" fill="rgb(238,131,9)" fg:x="634119863" fg:w="684766"/><text x="84.6034%" y="1039.50"></text></g><g><title>ts_language_symbol_for_name (684,766 samples, 0.09%)</title><rect x="84.3534%" y="1013" width="0.0911%" height="15" fill="rgb(211,50,8)" fg:x="634119863" fg:w="684766"/><text x="84.6034%" y="1023.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="1141" width="0.4886%" height="15" fill="rgb(245,182,24)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="1151.50"></text></g><g><title>syntastica_core::language_set::SupportedLanguage::for_injection::{{closure}} (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="1125" width="0.4886%" height="15" fill="rgb(242,14,37)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="1135.50"></text></g><g><title>tft::detect::try_detect (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="1109" width="0.4886%" height="15" fill="rgb(246,228,12)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="1119.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="1093" width="0.4886%" height="15" fill="rgb(213,55,15)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="1103.50"></text></g><g><title>tft::detect::try_detect::{{closure}} (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="1077" width="0.4886%" height="15" fill="rgb(209,9,3)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="1087.50"></text></g><g><title>regex::regex::string::Regex::is_match (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="1061" width="0.4886%" height="15" fill="rgb(230,59,30)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="1071.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="1045" width="0.4886%" height="15" fill="rgb(209,121,21)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="1055.50"></text></g><g><title>regex_automata::meta::regex::Regex::search_half (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="1029" width="0.4886%" height="15" fill="rgb(220,109,13)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="1039.50"></text></g><g><title>regex_automata::util::pool::Pool&lt;T,F&gt;::get (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="1013" width="0.4886%" height="15" fill="rgb(232,18,1)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="1023.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="997" width="0.4886%" height="15" fill="rgb(215,41,42)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="1007.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="981" width="0.4886%" height="15" fill="rgb(224,123,36)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="991.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="965" width="0.4886%" height="15" fill="rgb(240,125,3)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="975.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="949" width="0.4886%" height="15" fill="rgb(205,98,50)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="959.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="933" width="0.4886%" height="15" fill="rgb(205,185,37)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="943.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::create_cache (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="917" width="0.4886%" height="15" fill="rgb(238,207,15)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="927.50"></text></g><g><title>regex_automata::meta::wrappers::HybridCache::new (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="901" width="0.4886%" height="15" fill="rgb(213,199,42)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="885" width="0.4886%" height="15" fill="rgb(235,201,11)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="895.50"></text></g><g><title>regex_automata::meta::wrappers::HybridCache::new::{{closure}} (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="869" width="0.4886%" height="15" fill="rgb(207,46,11)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="879.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::create_cache (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="853" width="0.4886%" height="15" fill="rgb(241,35,35)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="863.50"></text></g><g><title>regex_automata::hybrid::regex::Cache::new (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="837" width="0.4886%" height="15" fill="rgb(243,32,47)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="847.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="821" width="0.4886%" height="15" fill="rgb(247,202,23)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="831.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="805" width="0.4886%" height="15" fill="rgb(219,102,11)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="815.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSet::new (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="789" width="0.4886%" height="15" fill="rgb(243,110,44)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="799.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSet::resize (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="773" width="0.4886%" height="15" fill="rgb(222,74,54)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="757" width="0.4886%" height="15" fill="rgb(216,99,12)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="741" width="0.4886%" height="15" fill="rgb(226,22,26)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="751.50"></text></g><g><title>core::ptr::write (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="725" width="0.4886%" height="15" fill="rgb(217,163,10)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="735.50"></text></g><g><title>__memset_avx2_unaligned_erms (3,672,810 samples, 0.49%)</title><rect x="84.4445%" y="709" width="0.4886%" height="15" fill="rgb(213,25,53)" fg:x="634804629" fg:w="3672810"/><text x="84.6945%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::ast::Ast&gt;&gt; (3,874,381 samples, 0.52%)</title><rect x="84.9331%" y="645" width="0.5154%" height="15" fill="rgb(252,105,26)" fg:x="638477439" fg:w="3874381"/><text x="85.1831%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,874,381 samples, 0.52%)</title><rect x="84.9331%" y="629" width="0.5154%" height="15" fill="rgb(220,39,43)" fg:x="638477439" fg:w="3874381"/><text x="85.1831%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_syntax::ast::Ast]&gt; (3,874,381 samples, 0.52%)</title><rect x="84.9331%" y="613" width="0.5154%" height="15" fill="rgb(229,68,48)" fg:x="638477439" fg:w="3874381"/><text x="85.1831%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3,874,381 samples, 0.52%)</title><rect x="84.9331%" y="597" width="0.5154%" height="15" fill="rgb(252,8,32)" fg:x="638477439" fg:w="3874381"/><text x="85.1831%" y="607.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3,874,381 samples, 0.52%)</title><rect x="84.9331%" y="581" width="0.5154%" height="15" fill="rgb(223,20,43)" fg:x="638477439" fg:w="3874381"/><text x="85.1831%" y="591.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3,874,381 samples, 0.52%)</title><rect x="84.9331%" y="565" width="0.5154%" height="15" fill="rgb(229,81,49)" fg:x="638477439" fg:w="3874381"/><text x="85.1831%" y="575.50"></text></g><g><title>__memmove_avx_unaligned_erms (3,914,810 samples, 0.52%)</title><rect x="85.4485%" y="597" width="0.5208%" height="15" fill="rgb(236,28,36)" fg:x="642351820" fg:w="3914810"/><text x="85.6985%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::builder::Builder&gt;&gt; (3,655,588 samples, 0.49%)</title><rect x="85.9692%" y="581" width="0.4863%" height="15" fill="rgb(249,185,26)" fg:x="646266630" fg:w="3655588"/><text x="86.2192%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::builder::Builder&gt;&gt; (3,655,588 samples, 0.49%)</title><rect x="85.9692%" y="565" width="0.4863%" height="15" fill="rgb(249,174,33)" fg:x="646266630" fg:w="3655588"/><text x="86.2192%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::builder::Builder&gt; (3,655,588 samples, 0.49%)</title><rect x="85.9692%" y="549" width="0.4863%" height="15" fill="rgb(233,201,37)" fg:x="646266630" fg:w="3655588"/><text x="86.2192%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::builder::State&gt;&gt; (3,655,588 samples, 0.49%)</title><rect x="85.9692%" y="533" width="0.4863%" height="15" fill="rgb(221,78,26)" fg:x="646266630" fg:w="3655588"/><text x="86.2192%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,655,588 samples, 0.49%)</title><rect x="85.9692%" y="517" width="0.4863%" height="15" fill="rgb(250,127,30)" fg:x="646266630" fg:w="3655588"/><text x="86.2192%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::builder::State]&gt; (3,655,588 samples, 0.49%)</title><rect x="85.9692%" y="501" width="0.4863%" height="15" fill="rgb(230,49,44)" fg:x="646266630" fg:w="3655588"/><text x="86.2192%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::builder::State&gt; (3,655,588 samples, 0.49%)</title><rect x="85.9692%" y="485" width="0.4863%" height="15" fill="rgb(229,67,23)" fg:x="646266630" fg:w="3655588"/><text x="86.2192%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,314,513 samples, 1.51%)</title><rect x="86.4555%" y="501" width="1.5051%" height="15" fill="rgb(249,83,47)" fg:x="649922218" fg:w="11314513"/><text x="86.7055%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::map::Utf8BoundedEntry]&gt; (11,314,513 samples, 1.51%)</title><rect x="86.4555%" y="485" width="1.5051%" height="15" fill="rgb(215,43,3)" fg:x="649922218" fg:w="11314513"/><text x="86.7055%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt; (11,314,513 samples, 1.51%)</title><rect x="86.4555%" y="469" width="1.5051%" height="15" fill="rgb(238,154,13)" fg:x="649922218" fg:w="11314513"/><text x="86.7055%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (11,314,513 samples, 1.51%)</title><rect x="86.4555%" y="453" width="1.5051%" height="15" fill="rgb(219,56,2)" fg:x="649922218" fg:w="11314513"/><text x="86.7055%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (11,314,513 samples, 1.51%)</title><rect x="86.4555%" y="437" width="1.5051%" height="15" fill="rgb(233,0,4)" fg:x="649922218" fg:w="11314513"/><text x="86.7055%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,314,513 samples, 1.51%)</title><rect x="86.4555%" y="421" width="1.5051%" height="15" fill="rgb(235,30,7)" fg:x="649922218" fg:w="11314513"/><text x="86.7055%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,672,263 samples, 0.49%)</title><rect x="87.4721%" y="405" width="0.4885%" height="15" fill="rgb(250,79,13)" fg:x="657564468" fg:w="3672263"/><text x="87.7221%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (3,672,263 samples, 0.49%)</title><rect x="87.4721%" y="389" width="0.4885%" height="15" fill="rgb(211,146,34)" fg:x="657564468" fg:w="3672263"/><text x="87.7221%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (18,634,943 samples, 2.48%)</title><rect x="85.9692%" y="597" width="2.4789%" height="15" fill="rgb(228,22,38)" fg:x="646266630" fg:w="18634943"/><text x="86.2192%" y="607.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14,979,355 samples, 1.99%)</title><rect x="86.4555%" y="581" width="1.9926%" height="15" fill="rgb(235,168,5)" fg:x="649922218" fg:w="14979355"/><text x="86.7055%" y="591.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14,979,355 samples, 1.99%)</title><rect x="86.4555%" y="565" width="1.9926%" height="15" fill="rgb(221,155,16)" fg:x="649922218" fg:w="14979355"/><text x="86.7055%" y="575.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt; (14,979,355 samples, 1.99%)</title><rect x="86.4555%" y="549" width="1.9926%" height="15" fill="rgb(215,215,53)" fg:x="649922218" fg:w="14979355"/><text x="86.7055%" y="559.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedMap&gt; (14,979,355 samples, 1.99%)</title><rect x="86.4555%" y="533" width="1.9926%" height="15" fill="rgb(223,4,10)" fg:x="649922218" fg:w="14979355"/><text x="86.7055%" y="543.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (14,979,355 samples, 1.99%)</title><rect x="86.4555%" y="517" width="1.9926%" height="15" fill="rgb(234,103,6)" fg:x="649922218" fg:w="14979355"/><text x="86.7055%" y="527.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (3,664,842 samples, 0.49%)</title><rect x="87.9606%" y="501" width="0.4875%" height="15" fill="rgb(227,97,0)" fg:x="661236731" fg:w="3664842"/><text x="88.2106%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,664,842 samples, 0.49%)</title><rect x="87.9606%" y="485" width="0.4875%" height="15" fill="rgb(234,150,53)" fg:x="661236731" fg:w="3664842"/><text x="88.2106%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,664,842 samples, 0.49%)</title><rect x="87.9606%" y="469" width="0.4875%" height="15" fill="rgb(228,201,54)" fg:x="661236731" fg:w="3664842"/><text x="88.2106%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,664,842 samples, 0.49%)</title><rect x="87.9606%" y="453" width="0.4875%" height="15" fill="rgb(222,22,37)" fg:x="661236731" fg:w="3664842"/><text x="88.2106%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (3,664,842 samples, 0.49%)</title><rect x="87.9606%" y="437" width="0.4875%" height="15" fill="rgb(237,53,32)" fg:x="661236731" fg:w="3664842"/><text x="88.2106%" y="447.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3,664,842 samples, 0.49%)</title><rect x="87.9606%" y="421" width="0.4875%" height="15" fill="rgb(233,25,53)" fg:x="661236731" fg:w="3664842"/><text x="88.2106%" y="431.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (3,664,842 samples, 0.49%)</title><rect x="87.9606%" y="405" width="0.4875%" height="15" fill="rgb(210,40,34)" fg:x="661236731" fg:w="3664842"/><text x="88.2106%" y="415.50"></text></g><g><title>malloc_consolidate (3,664,842 samples, 0.49%)</title><rect x="87.9606%" y="389" width="0.4875%" height="15" fill="rgb(241,220,44)" fg:x="661236731" fg:w="3664842"/><text x="88.2106%" y="399.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3,878,601 samples, 0.52%)</title><rect x="88.4481%" y="597" width="0.5159%" height="15" fill="rgb(235,28,35)" fg:x="664901573" fg:w="3878601"/><text x="88.6981%" y="607.50"></text></g><g><title>regex_automata::meta::wrappers::HybridEngine::new (3,878,601 samples, 0.52%)</title><rect x="88.4481%" y="581" width="0.5159%" height="15" fill="rgb(210,56,17)" fg:x="664901573" fg:w="3878601"/><text x="88.6981%" y="591.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3,878,601 samples, 0.52%)</title><rect x="88.4481%" y="565" width="0.5159%" height="15" fill="rgb(224,130,29)" fg:x="664901573" fg:w="3878601"/><text x="88.6981%" y="575.50"></text></g><g><title>regex_automata::hybrid::dfa::minimum_cache_capacity (3,878,601 samples, 0.52%)</title><rect x="88.4481%" y="549" width="0.5159%" height="15" fill="rgb(235,212,8)" fg:x="664901573" fg:w="3878601"/><text x="88.6981%" y="559.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (3,878,601 samples, 0.52%)</title><rect x="88.4481%" y="533" width="0.5159%" height="15" fill="rgb(223,33,50)" fg:x="664901573" fg:w="3878601"/><text x="88.6981%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::determinize::state::StateBuilderNFA&gt; (3,878,601 samples, 0.52%)</title><rect x="88.4481%" y="517" width="0.5159%" height="15" fill="rgb(219,149,13)" fg:x="664901573" fg:w="3878601"/><text x="88.6981%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3,878,601 samples, 0.52%)</title><rect x="88.4481%" y="501" width="0.5159%" height="15" fill="rgb(250,156,29)" fg:x="664901573" fg:w="3878601"/><text x="88.6981%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3,878,601 samples, 0.52%)</title><rect x="88.4481%" y="485" width="0.5159%" height="15" fill="rgb(216,193,19)" fg:x="664901573" fg:w="3878601"/><text x="88.6981%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,878,601 samples, 0.52%)</title><rect x="88.4481%" y="469" width="0.5159%" height="15" fill="rgb(216,135,14)" fg:x="664901573" fg:w="3878601"/><text x="88.6981%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3,673,067 samples, 0.49%)</title><rect x="88.9641%" y="565" width="0.4886%" height="15" fill="rgb(241,47,5)" fg:x="668780174" fg:w="3673067"/><text x="89.2141%" y="575.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3,673,067 samples, 0.49%)</title><rect x="88.9641%" y="549" width="0.4886%" height="15" fill="rgb(233,42,35)" fg:x="668780174" fg:w="3673067"/><text x="89.2141%" y="559.50"></text></g><g><title>regex_automata::util::alphabet::ByteClassSet::byte_classes (3,673,067 samples, 0.49%)</title><rect x="88.9641%" y="533" width="0.4886%" height="15" fill="rgb(231,13,6)" fg:x="668780174" fg:w="3673067"/><text x="89.2141%" y="543.50"></text></g><g><title>regex_automata::util::alphabet::ByteSet::contains (3,673,067 samples, 0.49%)</title><rect x="88.9641%" y="517" width="0.4886%" height="15" fill="rgb(207,181,40)" fg:x="668780174" fg:w="3673067"/><text x="89.2141%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_literal (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="357" width="0.5197%" height="15" fill="rgb(254,173,49)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="341" width="0.5197%" height="15" fill="rgb(221,1,38)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="325" width="0.5197%" height="15" fill="rgb(206,124,46)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="309" width="0.5197%" height="15" fill="rgb(249,21,11)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="293" width="0.5197%" height="15" fill="rgb(222,201,40)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_literal::{{closure}} (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="277" width="0.5197%" height="15" fill="rgb(235,61,29)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_range (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="261" width="0.5197%" height="15" fill="rgb(219,207,3)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::add_range (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="245" width="0.5197%" height="15" fill="rgb(222,56,46)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_range (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="229" width="0.5197%" height="15" fill="rgb(239,76,54)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="213" width="0.5197%" height="15" fill="rgb(231,124,27)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="197" width="0.5197%" height="15" fill="rgb(249,195,6)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="181" width="0.5197%" height="15" fill="rgb(237,174,47)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="165" width="0.5197%" height="15" fill="rgb(206,201,31)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="149" width="0.5197%" height="15" fill="rgb(231,57,52)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="133" width="0.5197%" height="15" fill="rgb(248,177,22)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="117" width="0.5197%" height="15" fill="rgb(215,211,37)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="101" width="0.5197%" height="15" fill="rgb(241,128,51)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="111.50"></text></g><g><title>alloc::alloc::realloc (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="85" width="0.5197%" height="15" fill="rgb(227,165,31)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="95.50"></text></g><g><title>realloc (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="69" width="0.5197%" height="15" fill="rgb(228,167,24)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="79.50"></text></g><g><title>_int_realloc (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="53" width="0.5197%" height="15" fill="rgb(228,143,12)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="63.50"></text></g><g><title>_int_malloc (3,906,633 samples, 0.52%)</title><rect x="89.4527%" y="37" width="0.5197%" height="15" fill="rgb(249,149,8)" fg:x="672453241" fg:w="3906633"/><text x="89.7027%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (11,564,081 samples, 1.54%)</title><rect x="89.4527%" y="373" width="1.5383%" height="15" fill="rgb(243,35,44)" fg:x="672453241" fg:w="11564081"/><text x="89.7027%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (7,657,448 samples, 1.02%)</title><rect x="89.9724%" y="357" width="1.0186%" height="15" fill="rgb(246,89,9)" fg:x="676359874" fg:w="7657448"/><text x="90.2224%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_exactly (7,657,448 samples, 1.02%)</title><rect x="89.9724%" y="341" width="1.0186%" height="15" fill="rgb(233,213,13)" fg:x="676359874" fg:w="7657448"/><text x="90.2224%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (7,657,448 samples, 1.02%)</title><rect x="89.9724%" y="325" width="1.0186%" height="15" fill="rgb(233,141,41)" fg:x="676359874" fg:w="7657448"/><text x="90.2224%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (7,657,448 samples, 1.02%)</title><rect x="89.9724%" y="309" width="1.0186%" height="15" fill="rgb(239,167,4)" fg:x="676359874" fg:w="7657448"/><text x="90.2224%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (7,657,448 samples, 1.02%)</title><rect x="89.9724%" y="293" width="1.0186%" height="15" fill="rgb(209,217,16)" fg:x="676359874" fg:w="7657448"/><text x="90.2224%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (7,657,448 samples, 1.02%)</title><rect x="89.9724%" y="277" width="1.0186%" height="15" fill="rgb(219,88,35)" fg:x="676359874" fg:w="7657448"/><text x="90.2224%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (7,657,448 samples, 1.02%)</title><rect x="89.9724%" y="261" width="1.0186%" height="15" fill="rgb(220,193,23)" fg:x="676359874" fg:w="7657448"/><text x="90.2224%" y="271.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::from_encoded_range (3,771,605 samples, 0.50%)</title><rect x="90.4893%" y="245" width="0.5017%" height="15" fill="rgb(230,90,52)" fg:x="680245717" fg:w="3771605"/><text x="90.7393%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (18,878,782 samples, 2.51%)</title><rect x="89.4527%" y="437" width="2.5113%" height="15" fill="rgb(252,106,19)" fg:x="672453241" fg:w="18878782"/><text x="89.7027%" y="447.50">&lt;c..</text></g><g><title>core::option::Option&lt;T&gt;::map (18,878,782 samples, 2.51%)</title><rect x="89.4527%" y="421" width="2.5113%" height="15" fill="rgb(206,74,20)" fg:x="672453241" fg:w="18878782"/><text x="89.7027%" y="431.50">co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (18,878,782 samples, 2.51%)</title><rect x="89.4527%" y="405" width="2.5113%" height="15" fill="rgb(230,138,44)" fg:x="672453241" fg:w="18878782"/><text x="89.7027%" y="415.50">co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (18,878,782 samples, 2.51%)</title><rect x="89.4527%" y="389" width="2.5113%" height="15" fill="rgb(235,182,43)" fg:x="672453241" fg:w="18878782"/><text x="89.7027%" y="399.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (7,314,701 samples, 0.97%)</title><rect x="90.9910%" y="373" width="0.9730%" height="15" fill="rgb(242,16,51)" fg:x="684017322" fg:w="7314701"/><text x="91.2410%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (7,314,701 samples, 0.97%)</title><rect x="90.9910%" y="357" width="0.9730%" height="15" fill="rgb(248,9,4)" fg:x="684017322" fg:w="7314701"/><text x="91.2410%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (7,314,701 samples, 0.97%)</title><rect x="90.9910%" y="341" width="0.9730%" height="15" fill="rgb(210,31,22)" fg:x="684017322" fg:w="7314701"/><text x="91.2410%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (7,314,701 samples, 0.97%)</title><rect x="90.9910%" y="325" width="0.9730%" height="15" fill="rgb(239,54,39)" fg:x="684017322" fg:w="7314701"/><text x="91.2410%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_range (3,688,569 samples, 0.49%)</title><rect x="91.4734%" y="309" width="0.4907%" height="15" fill="rgb(230,99,41)" fg:x="687643454" fg:w="3688569"/><text x="91.7234%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::add_range (3,688,569 samples, 0.49%)</title><rect x="91.4734%" y="293" width="0.4907%" height="15" fill="rgb(253,106,12)" fg:x="687643454" fg:w="3688569"/><text x="91.7234%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_range (3,688,569 samples, 0.49%)</title><rect x="91.4734%" y="277" width="0.4907%" height="15" fill="rgb(213,46,41)" fg:x="687643454" fg:w="3688569"/><text x="91.7234%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3,688,569 samples, 0.49%)</title><rect x="91.4734%" y="261" width="0.4907%" height="15" fill="rgb(215,133,35)" fg:x="687643454" fg:w="3688569"/><text x="91.7234%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,688,569 samples, 0.49%)</title><rect x="91.4734%" y="245" width="0.4907%" height="15" fill="rgb(213,28,5)" fg:x="687643454" fg:w="3688569"/><text x="91.7234%" y="255.50"></text></g><g><title>core::ptr::write (3,688,569 samples, 0.49%)</title><rect x="91.4734%" y="229" width="0.4907%" height="15" fill="rgb(215,77,49)" fg:x="687643454" fg:w="3688569"/><text x="91.7234%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3,923,521 samples, 0.52%)</title><rect x="91.9640%" y="277" width="0.5219%" height="15" fill="rgb(248,100,22)" fg:x="691332023" fg:w="3923521"/><text x="92.2140%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3,923,521 samples, 0.52%)</title><rect x="91.9640%" y="261" width="0.5219%" height="15" fill="rgb(208,67,9)" fg:x="691332023" fg:w="3923521"/><text x="92.2140%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (7,766,618 samples, 1.03%)</title><rect x="91.9640%" y="373" width="1.0331%" height="15" fill="rgb(219,133,21)" fg:x="691332023" fg:w="7766618"/><text x="92.2140%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (7,766,618 samples, 1.03%)</title><rect x="91.9640%" y="357" width="1.0331%" height="15" fill="rgb(246,46,29)" fg:x="691332023" fg:w="7766618"/><text x="92.2140%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_exactly (7,766,618 samples, 1.03%)</title><rect x="91.9640%" y="341" width="1.0331%" height="15" fill="rgb(246,185,52)" fg:x="691332023" fg:w="7766618"/><text x="92.2140%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (7,766,618 samples, 1.03%)</title><rect x="91.9640%" y="325" width="1.0331%" height="15" fill="rgb(252,136,11)" fg:x="691332023" fg:w="7766618"/><text x="92.2140%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (7,766,618 samples, 1.03%)</title><rect x="91.9640%" y="309" width="1.0331%" height="15" fill="rgb(219,138,53)" fg:x="691332023" fg:w="7766618"/><text x="92.2140%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (7,766,618 samples, 1.03%)</title><rect x="91.9640%" y="293" width="1.0331%" height="15" fill="rgb(211,51,23)" fg:x="691332023" fg:w="7766618"/><text x="92.2140%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3,843,097 samples, 0.51%)</title><rect x="92.4860%" y="277" width="0.5112%" height="15" fill="rgb(247,221,28)" fg:x="695255544" fg:w="3843097"/><text x="92.7360%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3,843,097 samples, 0.51%)</title><rect x="92.4860%" y="261" width="0.5112%" height="15" fill="rgb(251,222,45)" fg:x="695255544" fg:w="3843097"/><text x="92.7360%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::top_last_freeze (3,843,097 samples, 0.51%)</title><rect x="92.4860%" y="245" width="0.5112%" height="15" fill="rgb(217,162,53)" fg:x="695255544" fg:w="3843097"/><text x="92.7360%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Node::set_last_transition (3,843,097 samples, 0.51%)</title><rect x="92.4860%" y="229" width="0.5112%" height="15" fill="rgb(229,93,14)" fg:x="695255544" fg:w="3843097"/><text x="92.7360%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,843,097 samples, 0.51%)</title><rect x="92.4860%" y="213" width="0.5112%" height="15" fill="rgb(209,67,49)" fg:x="695255544" fg:w="3843097"/><text x="92.7360%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,843,097 samples, 0.51%)</title><rect x="92.4860%" y="197" width="0.5112%" height="15" fill="rgb(213,87,29)" fg:x="695255544" fg:w="3843097"/><text x="92.7360%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,843,097 samples, 0.51%)</title><rect x="92.4860%" y="181" width="0.5112%" height="15" fill="rgb(205,151,52)" fg:x="695255544" fg:w="3843097"/><text x="92.7360%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,843,097 samples, 0.51%)</title><rect x="92.4860%" y="165" width="0.5112%" height="15" fill="rgb(253,215,39)" fg:x="695255544" fg:w="3843097"/><text x="92.7360%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,843,097 samples, 0.51%)</title><rect x="92.4860%" y="149" width="0.5112%" height="15" fill="rgb(221,220,41)" fg:x="695255544" fg:w="3843097"/><text x="92.7360%" y="159.50"></text></g><g><title>malloc (3,843,097 samples, 0.51%)</title><rect x="92.4860%" y="133" width="0.5112%" height="15" fill="rgb(218,133,21)" fg:x="695255544" fg:w="3843097"/><text x="92.7360%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3,901,123 samples, 0.52%)</title><rect x="92.9972%" y="325" width="0.5189%" height="15" fill="rgb(221,193,43)" fg:x="699098641" fg:w="3901123"/><text x="93.2472%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3,901,123 samples, 0.52%)</title><rect x="92.9972%" y="309" width="0.5189%" height="15" fill="rgb(240,128,52)" fg:x="699098641" fg:w="3901123"/><text x="93.2472%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::pop_freeze (3,901,123 samples, 0.52%)</title><rect x="92.9972%" y="293" width="0.5189%" height="15" fill="rgb(253,114,12)" fg:x="699098641" fg:w="3901123"/><text x="93.2472%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Node::set_last_transition (3,901,123 samples, 0.52%)</title><rect x="92.9972%" y="277" width="0.5189%" height="15" fill="rgb(215,223,47)" fg:x="699098641" fg:w="3901123"/><text x="93.2472%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3,901,123 samples, 0.52%)</title><rect x="92.9972%" y="261" width="0.5189%" height="15" fill="rgb(248,225,23)" fg:x="699098641" fg:w="3901123"/><text x="93.2472%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,901,123 samples, 0.52%)</title><rect x="92.9972%" y="245" width="0.5189%" height="15" fill="rgb(250,108,0)" fg:x="699098641" fg:w="3901123"/><text x="93.2472%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,901,123 samples, 0.52%)</title><rect x="92.9972%" y="229" width="0.5189%" height="15" fill="rgb(228,208,7)" fg:x="699098641" fg:w="3901123"/><text x="93.2472%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,901,123 samples, 0.52%)</title><rect x="92.9972%" y="213" width="0.5189%" height="15" fill="rgb(244,45,10)" fg:x="699098641" fg:w="3901123"/><text x="93.2472%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,901,123 samples, 0.52%)</title><rect x="92.9972%" y="197" width="0.5189%" height="15" fill="rgb(207,125,25)" fg:x="699098641" fg:w="3901123"/><text x="93.2472%" y="207.50"></text></g><g><title>malloc (3,901,123 samples, 0.52%)</title><rect x="92.9972%" y="181" width="0.5189%" height="15" fill="rgb(210,195,18)" fg:x="699098641" fg:w="3901123"/><text x="93.2472%" y="191.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="1125" width="10.5655%" height="15" fill="rgb(249,80,12)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="1135.50">&lt;once_cell::syn..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="1109" width="10.5655%" height="15" fill="rgb(221,65,9)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="1119.50">once_cell::sync..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="1093" width="10.5655%" height="15" fill="rgb(235,49,36)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="1103.50">once_cell::sync..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="1077" width="10.5655%" height="15" fill="rgb(225,32,20)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="1087.50">once_cell::sync..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="1061" width="10.5655%" height="15" fill="rgb(215,141,46)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="1071.50">once_cell::imp:..</text></g><g><title>once_cell::imp::initialize_or_wait (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="1045" width="10.5655%" height="15" fill="rgb(250,160,47)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="1055.50">once_cell::imp:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="1029" width="10.5655%" height="15" fill="rgb(216,222,40)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="1039.50">core::ops::func..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="1013" width="10.5655%" height="15" fill="rgb(234,217,39)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="1023.50">once_cell::imp:..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="997" width="10.5655%" height="15" fill="rgb(207,178,40)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="1007.50">once_cell::sync..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="981" width="10.5655%" height="15" fill="rgb(221,136,13)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="991.50">once_cell::sync..</text></g><g><title>core::ops::function::FnOnce::call_once (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="965" width="10.5655%" height="15" fill="rgb(249,199,10)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="975.50">core::ops::func..</text></g><g><title>core::ops::function::FnOnce::call_once (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="949" width="10.5655%" height="15" fill="rgb(249,222,13)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="959.50">core::ops::func..</text></g><g><title>tft::detect::pattern::PATTERN::{{closure}} (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="933" width="10.5655%" height="15" fill="rgb(244,185,38)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="943.50">tft::detect::pa..</text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="917" width="10.5655%" height="15" fill="rgb(236,202,9)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="927.50">&lt;once_cell::syn..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="901" width="10.5655%" height="15" fill="rgb(250,229,37)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="911.50">once_cell::sync..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="885" width="10.5655%" height="15" fill="rgb(206,174,23)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="895.50">once_cell::sync..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="869" width="10.5655%" height="15" fill="rgb(211,33,43)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="879.50">once_cell::sync..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="853" width="10.5655%" height="15" fill="rgb(245,58,50)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="863.50">once_cell::imp:..</text></g><g><title>once_cell::imp::initialize_or_wait (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="837" width="10.5655%" height="15" fill="rgb(244,68,36)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="847.50">once_cell::imp:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="821" width="10.5655%" height="15" fill="rgb(232,229,15)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="831.50">core::ops::func..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="805" width="10.5655%" height="15" fill="rgb(254,30,23)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="815.50">once_cell::imp:..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="789" width="10.5655%" height="15" fill="rgb(235,160,14)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="799.50">once_cell::sync..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="773" width="10.5655%" height="15" fill="rgb(212,155,44)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="783.50">once_cell::sync..</text></g><g><title>core::ops::function::FnOnce::call_once (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="757" width="10.5655%" height="15" fill="rgb(226,2,50)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="767.50">core::ops::func..</text></g><g><title>core::ops::function::FnOnce::call_once (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="741" width="10.5655%" height="15" fill="rgb(234,177,6)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="751.50">core::ops::func..</text></g><g><title>tft::detect::pattern::PATTERN::{{closure}}::RE::{{closure}} (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="725" width="10.5655%" height="15" fill="rgb(217,24,9)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="735.50">tft::detect::pa..</text></g><g><title>regex::builders::string::RegexBuilder::build (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="709" width="10.5655%" height="15" fill="rgb(220,13,46)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="719.50">regex::builders..</text></g><g><title>regex::builders::Builder::build_one_string (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="693" width="10.5655%" height="15" fill="rgb(239,221,27)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="703.50">regex::builders..</text></g><g><title>regex_automata::meta::regex::Builder::build (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="677" width="10.5655%" height="15" fill="rgb(222,198,25)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="687.50">regex_automata:..</text></g><g><title>regex_automata::meta::regex::Builder::build_many (79,425,215 samples, 10.57%)</title><rect x="84.9331%" y="661" width="10.5655%" height="15" fill="rgb(211,99,13)" fg:x="638477439" fg:w="79425215"/><text x="85.1831%" y="671.50">regex_automata:..</text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (75,550,834 samples, 10.05%)</title><rect x="85.4485%" y="645" width="10.0501%" height="15" fill="rgb(232,111,31)" fg:x="642351820" fg:w="75550834"/><text x="85.6985%" y="655.50">regex_automata:..</text></g><g><title>regex_automata::meta::strategy::new (75,550,834 samples, 10.05%)</title><rect x="85.4485%" y="629" width="10.0501%" height="15" fill="rgb(245,82,37)" fg:x="642351820" fg:w="75550834"/><text x="85.6985%" y="639.50">regex_automata:..</text></g><g><title>regex_automata::meta::strategy::Core::new (75,550,834 samples, 10.05%)</title><rect x="85.4485%" y="613" width="10.0501%" height="15" fill="rgb(227,149,46)" fg:x="642351820" fg:w="75550834"/><text x="85.6985%" y="623.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (49,122,480 samples, 6.53%)</title><rect x="88.9641%" y="597" width="6.5345%" height="15" fill="rgb(218,36,50)" fg:x="668780174" fg:w="49122480"/><text x="89.2141%" y="607.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (49,122,480 samples, 6.53%)</title><rect x="88.9641%" y="581" width="6.5345%" height="15" fill="rgb(226,80,48)" fg:x="668780174" fg:w="49122480"/><text x="89.2141%" y="591.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (45,449,413 samples, 6.05%)</title><rect x="89.4527%" y="565" width="6.0459%" height="15" fill="rgb(238,224,15)" fg:x="672453241" fg:w="45449413"/><text x="89.7027%" y="575.50">regex_au..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (45,449,413 samples, 6.05%)</title><rect x="89.4527%" y="549" width="6.0459%" height="15" fill="rgb(241,136,10)" fg:x="672453241" fg:w="45449413"/><text x="89.7027%" y="559.50">&lt;core::i..</text></g><g><title>core::option::Option&lt;T&gt;::map (45,449,413 samples, 6.05%)</title><rect x="89.4527%" y="533" width="6.0459%" height="15" fill="rgb(208,32,45)" fg:x="672453241" fg:w="45449413"/><text x="89.7027%" y="543.50">core::op..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (45,449,413 samples, 6.05%)</title><rect x="89.4527%" y="517" width="6.0459%" height="15" fill="rgb(207,135,9)" fg:x="672453241" fg:w="45449413"/><text x="89.7027%" y="527.50">core::op..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (45,449,413 samples, 6.05%)</title><rect x="89.4527%" y="501" width="6.0459%" height="15" fill="rgb(206,86,44)" fg:x="672453241" fg:w="45449413"/><text x="89.7027%" y="511.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (45,449,413 samples, 6.05%)</title><rect x="89.4527%" y="485" width="6.0459%" height="15" fill="rgb(245,177,15)" fg:x="672453241" fg:w="45449413"/><text x="89.7027%" y="495.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (45,449,413 samples, 6.05%)</title><rect x="89.4527%" y="469" width="6.0459%" height="15" fill="rgb(206,64,50)" fg:x="672453241" fg:w="45449413"/><text x="89.7027%" y="479.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (45,449,413 samples, 6.05%)</title><rect x="89.4527%" y="453" width="6.0459%" height="15" fill="rgb(234,36,40)" fg:x="672453241" fg:w="45449413"/><text x="89.7027%" y="463.50">regex_au..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26,570,631 samples, 3.53%)</title><rect x="91.9640%" y="437" width="3.5345%" height="15" fill="rgb(213,64,8)" fg:x="691332023" fg:w="26570631"/><text x="92.2140%" y="447.50">&lt;co..</text></g><g><title>core::option::Option&lt;T&gt;::map (26,570,631 samples, 3.53%)</title><rect x="91.9640%" y="421" width="3.5345%" height="15" fill="rgb(210,75,36)" fg:x="691332023" fg:w="26570631"/><text x="92.2140%" y="431.50">cor..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (26,570,631 samples, 3.53%)</title><rect x="91.9640%" y="405" width="3.5345%" height="15" fill="rgb(229,88,21)" fg:x="691332023" fg:w="26570631"/><text x="92.2140%" y="415.50">cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (26,570,631 samples, 3.53%)</title><rect x="91.9640%" y="389" width="3.5345%" height="15" fill="rgb(252,204,47)" fg:x="691332023" fg:w="26570631"/><text x="92.2140%" y="399.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (18,804,013 samples, 2.50%)</title><rect x="92.9972%" y="373" width="2.5014%" height="15" fill="rgb(208,77,27)" fg:x="699098641" fg:w="18804013"/><text x="93.2472%" y="383.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (18,804,013 samples, 2.50%)</title><rect x="92.9972%" y="357" width="2.5014%" height="15" fill="rgb(221,76,26)" fg:x="699098641" fg:w="18804013"/><text x="93.2472%" y="367.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (18,804,013 samples, 2.50%)</title><rect x="92.9972%" y="341" width="2.5014%" height="15" fill="rgb(225,139,18)" fg:x="699098641" fg:w="18804013"/><text x="93.2472%" y="351.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (14,902,890 samples, 1.98%)</title><rect x="93.5161%" y="325" width="1.9824%" height="15" fill="rgb(230,137,11)" fg:x="702999764" fg:w="14902890"/><text x="93.7661%" y="335.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (14,902,890 samples, 1.98%)</title><rect x="93.5161%" y="309" width="1.9824%" height="15" fill="rgb(212,28,1)" fg:x="702999764" fg:w="14902890"/><text x="93.7661%" y="319.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (14,902,890 samples, 1.98%)</title><rect x="93.5161%" y="293" width="1.9824%" height="15" fill="rgb(248,164,17)" fg:x="702999764" fg:w="14902890"/><text x="93.7661%" y="303.50">r..</text></g><g><title>alloc::vec::from_elem (14,902,890 samples, 1.98%)</title><rect x="93.5161%" y="277" width="1.9824%" height="15" fill="rgb(222,171,42)" fg:x="702999764" fg:w="14902890"/><text x="93.7661%" y="287.50">a..</text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (14,902,890 samples, 1.98%)</title><rect x="93.5161%" y="261" width="1.9824%" height="15" fill="rgb(243,84,45)" fg:x="702999764" fg:w="14902890"/><text x="93.7661%" y="271.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (14,902,890 samples, 1.98%)</title><rect x="93.5161%" y="245" width="1.9824%" height="15" fill="rgb(252,49,23)" fg:x="702999764" fg:w="14902890"/><text x="93.7661%" y="255.50">a..</text></g><g><title>core::ptr::write (14,902,890 samples, 1.98%)</title><rect x="93.5161%" y="229" width="1.9824%" height="15" fill="rgb(215,19,7)" fg:x="702999764" fg:w="14902890"/><text x="93.7661%" y="239.50">c..</text></g><g><title>core::str::converts::from_utf8 (3,687,111 samples, 0.49%)</title><rect x="95.4986%" y="1125" width="0.4905%" height="15" fill="rgb(238,81,41)" fg:x="717902654" fg:w="3687111"/><text x="95.7486%" y="1135.50"></text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process (720,453,528 samples, 95.84%)</title><rect x="0.6283%" y="1269" width="95.8379%" height="15" fill="rgb(210,199,37)" fg:x="4722900" fg:w="720453528"/><text x="0.8783%" y="1279.50">syntastica::processor::Processor&lt;Set&gt;::process</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl (720,453,528 samples, 95.84%)</title><rect x="0.6283%" y="1253" width="95.8379%" height="15" fill="rgb(244,192,49)" fg:x="4722900" fg:w="720453528"/><text x="0.8783%" y="1263.50">syntastica::processor::Processor&lt;Set&gt;::process_impl</text></g><g><title>syntastica::processor::process_highlight_iter (90,371,799 samples, 12.02%)</title><rect x="84.4445%" y="1237" width="12.0217%" height="15" fill="rgb(226,211,11)" fg:x="634804629" fg:w="90371799"/><text x="84.6945%" y="1247.50">syntastica::proces..</text></g><g><title>&lt;syntastica_highlight::HighlightIter&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (90,371,799 samples, 12.02%)</title><rect x="84.4445%" y="1221" width="12.0217%" height="15" fill="rgb(236,162,54)" fg:x="634804629" fg:w="90371799"/><text x="84.6945%" y="1231.50">&lt;syntastica_highli..</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl::{{closure}} (90,371,799 samples, 12.02%)</title><rect x="84.4445%" y="1205" width="12.0217%" height="15" fill="rgb(220,229,9)" fg:x="634804629" fg:w="90371799"/><text x="84.6945%" y="1215.50">syntastica::proces..</text></g><g><title>core::option::Option&lt;T&gt;::or_else (90,371,799 samples, 12.02%)</title><rect x="84.4445%" y="1189" width="12.0217%" height="15" fill="rgb(250,87,22)" fg:x="634804629" fg:w="90371799"/><text x="84.6945%" y="1199.50">core::option::Opti..</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl::{{closure}}::{{closure}} (90,371,799 samples, 12.02%)</title><rect x="84.4445%" y="1173" width="12.0217%" height="15" fill="rgb(239,43,17)" fg:x="634804629" fg:w="90371799"/><text x="84.6945%" y="1183.50">syntastica::proces..</text></g><g><title>syntastica_core::language_set::SupportedLanguage::for_injection (90,371,799 samples, 12.02%)</title><rect x="84.4445%" y="1157" width="12.0217%" height="15" fill="rgb(231,177,25)" fg:x="634804629" fg:w="90371799"/><text x="84.6945%" y="1167.50">syntastica_core::l..</text></g><g><title>tft::detect::try_detect (86,698,989 samples, 11.53%)</title><rect x="84.9331%" y="1141" width="11.5331%" height="15" fill="rgb(219,179,1)" fg:x="638477439" fg:w="86698989"/><text x="85.1831%" y="1151.50">tft::detect::try_..</text></g><g><title>std::path::Path::ends_with (3,586,663 samples, 0.48%)</title><rect x="95.9891%" y="1125" width="0.4771%" height="15" fill="rgb(238,219,53)" fg:x="721589765" fg:w="3586663"/><text x="96.2391%" y="1135.50"></text></g><g><title>std::path::Path::_ends_with (3,586,663 samples, 0.48%)</title><rect x="95.9891%" y="1109" width="0.4771%" height="15" fill="rgb(232,167,36)" fg:x="721589765" fg:w="3586663"/><text x="96.2391%" y="1119.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (3,586,663 samples, 0.48%)</title><rect x="95.9891%" y="1093" width="0.4771%" height="15" fill="rgb(244,19,51)" fg:x="721589765" fg:w="3586663"/><text x="96.2391%" y="1103.50"></text></g><g><title>std::path::Components::parse_next_component_back (3,586,663 samples, 0.48%)</title><rect x="95.9891%" y="1077" width="0.4771%" height="15" fill="rgb(224,6,22)" fg:x="721589765" fg:w="3586663"/><text x="96.2391%" y="1087.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build_auto (3,689,128 samples, 0.49%)</title><rect x="96.4662%" y="1205" width="0.4907%" height="15" fill="rgb(224,145,5)" fg:x="725176428" fg:w="3689128"/><text x="96.7162%" y="1215.50"></text></g><g><title>aho_corasick::dfa::Builder::build_from_noncontiguous (3,689,128 samples, 0.49%)</title><rect x="96.4662%" y="1189" width="0.4907%" height="15" fill="rgb(234,130,49)" fg:x="725176428" fg:w="3689128"/><text x="96.7162%" y="1199.50"></text></g><g><title>aho_corasick::dfa::Builder::finish_build_one_start (3,689,128 samples, 0.49%)</title><rect x="96.4662%" y="1173" width="0.4907%" height="15" fill="rgb(254,6,2)" fg:x="725176428" fg:w="3689128"/><text x="96.7162%" y="1183.50"></text></g><g><title>pulldown_cmark::html::push_html (739,456,421 samples, 98.37%)</title><rect x="0.5589%" y="1349" width="98.3658%" height="15" fill="rgb(208,96,46)" fg:x="4201539" fg:w="739456421"/><text x="0.8089%" y="1359.50">pulldown_cmark::html::push_html</text></g><g><title>pulldown_cmark::html::write_html_fmt (739,456,421 samples, 98.37%)</title><rect x="0.5589%" y="1333" width="98.3658%" height="15" fill="rgb(239,3,39)" fg:x="4201539" fg:w="739456421"/><text x="0.8089%" y="1343.50">pulldown_cmark::html::write_html_fmt</text></g><g><title>pulldown_cmark::html::HtmlWriter&lt;I,W&gt;::run (739,456,421 samples, 98.37%)</title><rect x="0.5589%" y="1317" width="98.3658%" height="15" fill="rgb(233,210,1)" fg:x="4201539" fg:w="739456421"/><text x="0.8089%" y="1327.50">pulldown_cmark::html::HtmlWriter&lt;I,W&gt;::run</text></g><g><title>&lt;kaka_nest::pullmark_parsers::format_blockquotes::FormatBlockquotes&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (739,456,421 samples, 98.37%)</title><rect x="0.5589%" y="1301" width="98.3658%" height="15" fill="rgb(244,137,37)" fg:x="4201539" fg:w="739456421"/><text x="0.8089%" y="1311.50">&lt;kaka_nest::pullmark_parsers::format_blockquotes::FormatBlockquotes&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;kaka_nest::pullmark_parsers::highlight_codeblocks::HighlightCodeblocks&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (738,935,060 samples, 98.30%)</title><rect x="0.6283%" y="1285" width="98.2964%" height="15" fill="rgb(240,136,2)" fg:x="4722900" fg:w="738935060"/><text x="0.8783%" y="1295.50">&lt;kaka_nest::pullmark_parsers::highlight_codeblocks::HighlightCodeblocks&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>syntastica::renderer::render (18,481,532 samples, 2.46%)</title><rect x="96.4662%" y="1269" width="2.4585%" height="15" fill="rgb(239,18,37)" fg:x="725176428" fg:w="18481532"/><text x="96.7162%" y="1279.50">sy..</text></g><g><title>&lt;syntastica::renderer::HtmlRenderer as syntastica::renderer::Renderer&gt;::escape (18,481,532 samples, 2.46%)</title><rect x="96.4662%" y="1253" width="2.4585%" height="15" fill="rgb(218,185,22)" fg:x="725176428" fg:w="18481532"/><text x="96.7162%" y="1263.50">&lt;s..</text></g><g><title>aho_corasick::ahocorasick::AhoCorasick::new (18,481,532 samples, 2.46%)</title><rect x="96.4662%" y="1237" width="2.4585%" height="15" fill="rgb(225,218,4)" fg:x="725176428" fg:w="18481532"/><text x="96.7162%" y="1247.50">ah..</text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build (18,481,532 samples, 2.46%)</title><rect x="96.4662%" y="1221" width="2.4585%" height="15" fill="rgb(230,182,32)" fg:x="725176428" fg:w="18481532"/><text x="96.7162%" y="1231.50">ah..</text></g><g><title>aho_corasick::nfa::noncontiguous::Builder::build (14,792,404 samples, 1.97%)</title><rect x="96.9569%" y="1205" width="1.9678%" height="15" fill="rgb(242,56,43)" fg:x="728865556" fg:w="14792404"/><text x="97.2069%" y="1215.50">a..</text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::compile (14,792,404 samples, 1.97%)</title><rect x="96.9569%" y="1189" width="1.9678%" height="15" fill="rgb(233,99,24)" fg:x="728865556" fg:w="14792404"/><text x="97.2069%" y="1199.50">a..</text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::shuffle (14,792,404 samples, 1.97%)</title><rect x="96.9569%" y="1173" width="1.9678%" height="15" fill="rgb(234,209,42)" fg:x="728865556" fg:w="14792404"/><text x="97.2069%" y="1183.50">a..</text></g><g><title>aho_corasick::util::remapper::Remapper::remap (14,792,404 samples, 1.97%)</title><rect x="96.9569%" y="1157" width="1.9678%" height="15" fill="rgb(227,7,12)" fg:x="728865556" fg:w="14792404"/><text x="97.2069%" y="1167.50">a..</text></g><g><title>&lt;aho_corasick::nfa::noncontiguous::NFA as aho_corasick::util::remapper::Remappable&gt;::remap (14,792,404 samples, 1.97%)</title><rect x="96.9569%" y="1141" width="1.9678%" height="15" fill="rgb(245,203,43)" fg:x="728865556" fg:w="14792404"/><text x="97.2069%" y="1151.50">&lt;..</text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::remap (14,792,404 samples, 1.97%)</title><rect x="96.9569%" y="1125" width="1.9678%" height="15" fill="rgb(238,205,33)" fg:x="728865556" fg:w="14792404"/><text x="97.2069%" y="1135.50">a..</text></g><g><title>aho_corasick::util::remapper::Remapper::remap::{{closure}} (3,627,207 samples, 0.48%)</title><rect x="98.4422%" y="1109" width="0.4825%" height="15" fill="rgb(231,56,7)" fg:x="740030753" fg:w="3627207"/><text x="98.6922%" y="1119.50"></text></g><g><title>aho_corasick::util::remapper::IndexMapper::to_index (3,627,207 samples, 0.48%)</title><rect x="98.4422%" y="1093" width="0.4825%" height="15" fill="rgb(244,186,29)" fg:x="740030753" fg:w="3627207"/><text x="98.6922%" y="1103.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (743,861,243 samples, 98.95%)</title><rect x="0.4922%" y="1493" width="98.9517%" height="15" fill="rgb(234,111,31)" fg:x="3700035" fg:w="743861243"/><text x="0.7422%" y="1503.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (743,861,243 samples, 98.95%)</title><rect x="0.4922%" y="1477" width="98.9517%" height="15" fill="rgb(241,149,10)" fg:x="3700035" fg:w="743861243"/><text x="0.7422%" y="1487.50">__libc_start_call_main</text></g><g><title>main (743,861,243 samples, 98.95%)</title><rect x="0.4922%" y="1461" width="98.9517%" height="15" fill="rgb(249,206,44)" fg:x="3700035" fg:w="743861243"/><text x="0.7422%" y="1471.50">main</text></g><g><title>std::rt::lang_start_internal (743,861,243 samples, 98.95%)</title><rect x="0.4922%" y="1445" width="98.9517%" height="15" fill="rgb(251,153,30)" fg:x="3700035" fg:w="743861243"/><text x="0.7422%" y="1455.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (743,861,243 samples, 98.95%)</title><rect x="0.4922%" y="1429" width="98.9517%" height="15" fill="rgb(239,152,38)" fg:x="3700035" fg:w="743861243"/><text x="0.7422%" y="1439.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (743,861,243 samples, 98.95%)</title><rect x="0.4922%" y="1413" width="98.9517%" height="15" fill="rgb(249,139,47)" fg:x="3700035" fg:w="743861243"/><text x="0.7422%" y="1423.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (743,861,243 samples, 98.95%)</title><rect x="0.4922%" y="1397" width="98.9517%" height="15" fill="rgb(244,64,35)" fg:x="3700035" fg:w="743861243"/><text x="0.7422%" y="1407.50">core::ops::function::FnOnce::call_once</text></g><g><title>kaka_nest::main (743,861,243 samples, 98.95%)</title><rect x="0.4922%" y="1381" width="98.9517%" height="15" fill="rgb(216,46,15)" fg:x="3700035" fg:w="743861243"/><text x="0.7422%" y="1391.50">kaka_nest::main</text></g><g><title>kaka_nest::get_markdown::get_blogs (743,861,243 samples, 98.95%)</title><rect x="0.4922%" y="1365" width="98.9517%" height="15" fill="rgb(250,74,19)" fg:x="3700035" fg:w="743861243"/><text x="0.7422%" y="1375.50">kaka_nest::get_markdown::get_blogs</text></g><g><title>pulldown_cmark::parse::Parser::new_ext (3,903,318 samples, 0.52%)</title><rect x="98.9247%" y="1349" width="0.5192%" height="15" fill="rgb(249,42,33)" fg:x="743657960" fg:w="3903318"/><text x="99.1747%" y="1359.50"></text></g><g><title>pulldown_cmark::parse::Parser&lt;F&gt;::new_with_broken_link_callback (3,903,318 samples, 0.52%)</title><rect x="98.9247%" y="1333" width="0.5192%" height="15" fill="rgb(242,149,17)" fg:x="743657960" fg:w="3903318"/><text x="99.1747%" y="1343.50"></text></g><g><title>pulldown_cmark::firstpass::run_first_pass (3,903,318 samples, 0.52%)</title><rect x="98.9247%" y="1317" width="0.5192%" height="15" fill="rgb(244,29,21)" fg:x="743657960" fg:w="3903318"/><text x="99.1747%" y="1327.50"></text></g><g><title>pulldown_cmark::firstpass::FirstPass::run (3,903,318 samples, 0.52%)</title><rect x="98.9247%" y="1301" width="0.5192%" height="15" fill="rgb(220,130,37)" fg:x="743657960" fg:w="3903318"/><text x="99.1747%" y="1311.50"></text></g><g><title>pulldown_cmark::firstpass::FirstPass::parse_block (3,903,318 samples, 0.52%)</title><rect x="98.9247%" y="1285" width="0.5192%" height="15" fill="rgb(211,67,2)" fg:x="743657960" fg:w="3903318"/><text x="99.1747%" y="1295.50"></text></g><g><title>pulldown_cmark::firstpass::FirstPass::parse_refdef_total (3,903,318 samples, 0.52%)</title><rect x="98.9247%" y="1269" width="0.5192%" height="15" fill="rgb(235,68,52)" fg:x="743657960" fg:w="3903318"/><text x="99.1747%" y="1279.50"></text></g><g><title>pulldown_cmark::firstpass::FirstPass::parse_refdef_label (3,903,318 samples, 0.52%)</title><rect x="98.9247%" y="1253" width="0.5192%" height="15" fill="rgb(246,142,3)" fg:x="743657960" fg:w="3903318"/><text x="99.1747%" y="1263.50"></text></g><g><title>pulldown_cmark::linklabel::scan_link_label_rest (3,903,318 samples, 0.52%)</title><rect x="98.9247%" y="1237" width="0.5192%" height="15" fill="rgb(241,25,7)" fg:x="743657960" fg:w="3903318"/><text x="99.1747%" y="1247.50"></text></g><g><title>alloc::string::String::new (3,903,318 samples, 0.52%)</title><rect x="98.9247%" y="1221" width="0.5192%" height="15" fill="rgb(242,119,39)" fg:x="743657960" fg:w="3903318"/><text x="99.1747%" y="1231.50"></text></g><g><title>_start (744,362,747 samples, 99.02%)</title><rect x="0.4922%" y="1509" width="99.0184%" height="15" fill="rgb(241,98,45)" fg:x="3700035" fg:w="744362747"/><text x="0.7422%" y="1519.50">_start</text></g><g><title>_dl_start (501,504 samples, 0.07%)</title><rect x="99.4439%" y="1493" width="0.0667%" height="15" fill="rgb(254,28,30)" fg:x="747561278" fg:w="501504"/><text x="99.6939%" y="1503.50"></text></g><g><title>_dl_sysdep_start (501,504 samples, 0.07%)</title><rect x="99.4439%" y="1477" width="0.0667%" height="15" fill="rgb(241,142,54)" fg:x="747561278" fg:w="501504"/><text x="99.6939%" y="1487.50"></text></g><g><title>dl_main (501,504 samples, 0.07%)</title><rect x="99.4439%" y="1461" width="0.0667%" height="15" fill="rgb(222,85,15)" fg:x="747561278" fg:w="501504"/><text x="99.6939%" y="1471.50"></text></g><g><title>_dl_relocate_object (501,504 samples, 0.07%)</title><rect x="99.4439%" y="1445" width="0.0667%" height="15" fill="rgb(210,85,47)" fg:x="747561278" fg:w="501504"/><text x="99.6939%" y="1455.50"></text></g><g><title>all (751,741,676 samples, 100%)</title><rect x="0.0000%" y="1541" width="100.0000%" height="15" fill="rgb(224,206,25)" fg:x="0" fg:w="751741676"/><text x="0.2500%" y="1551.50"></text></g><g><title>kaka-nest (751,741,676 samples, 100.00%)</title><rect x="0.0000%" y="1525" width="100.0000%" height="15" fill="rgb(243,201,19)" fg:x="0" fg:w="751741676"/><text x="0.2500%" y="1535.50">kaka-nest</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::builder::Builder&gt;&gt; (3,678,894 samples, 0.49%)</title><rect x="99.5106%" y="1509" width="0.4894%" height="15" fill="rgb(236,59,4)" fg:x="748062782" fg:w="3678894"/><text x="99.7606%" y="1519.50"></text></g></svg></svg>