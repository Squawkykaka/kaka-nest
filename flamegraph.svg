<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="1109334776"><g><title>&lt;aho_corasick::nfa::noncontiguous::NFA as aho_corasick::util::remapper::Remappable&gt;::remap (2,225,861 samples, 0.20%)</title><rect x="0.0000%" y="293" width="0.2006%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2225861"/><text x="0.2500%" y="303.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::remap (2,225,861 samples, 0.20%)</title><rect x="0.0000%" y="277" width="0.2006%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2225861"/><text x="0.2500%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2,366,390 samples, 0.21%)</title><rect x="0.2006%" y="293" width="0.2133%" height="15" fill="rgb(221,193,54)" fg:x="2225861" fg:w="2366390"/><text x="0.4506%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2,524,153 samples, 0.23%)</title><rect x="0.4140%" y="261" width="0.2275%" height="15" fill="rgb(248,212,6)" fg:x="4592251" fg:w="2524153"/><text x="0.6640%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2,524,153 samples, 0.23%)</title><rect x="0.4140%" y="245" width="0.2275%" height="15" fill="rgb(208,68,35)" fg:x="4592251" fg:w="2524153"/><text x="0.6640%" y="255.50"></text></g><g><title>alloc::alloc::realloc (2,524,153 samples, 0.23%)</title><rect x="0.4140%" y="229" width="0.2275%" height="15" fill="rgb(232,128,0)" fg:x="4592251" fg:w="2524153"/><text x="0.6640%" y="239.50"></text></g><g><title>realloc (2,524,153 samples, 0.23%)</title><rect x="0.4140%" y="213" width="0.2275%" height="15" fill="rgb(207,160,47)" fg:x="4592251" fg:w="2524153"/><text x="0.6640%" y="223.50"></text></g><g><title>_int_realloc (2,524,153 samples, 0.23%)</title><rect x="0.4140%" y="197" width="0.2275%" height="15" fill="rgb(228,23,34)" fg:x="4592251" fg:w="2524153"/><text x="0.6640%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (2,524,153 samples, 0.23%)</title><rect x="0.4140%" y="181" width="0.2275%" height="15" fill="rgb(218,30,26)" fg:x="4592251" fg:w="2524153"/><text x="0.6640%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (5,074,357 samples, 0.46%)</title><rect x="0.4140%" y="277" width="0.4574%" height="15" fill="rgb(220,122,19)" fg:x="4592251" fg:w="5074357"/><text x="0.6640%" y="287.50"></text></g><g><title>malloc (2,550,204 samples, 0.23%)</title><rect x="0.6415%" y="261" width="0.2299%" height="15" fill="rgb(250,228,42)" fg:x="7116404" fg:w="2550204"/><text x="0.8915%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2,533,178 samples, 0.23%)</title><rect x="0.8714%" y="277" width="0.2284%" height="15" fill="rgb(240,193,28)" fg:x="9666608" fg:w="2533178"/><text x="1.1214%" y="287.50"></text></g><g><title>analysis_state_set__push (2,562,943 samples, 0.23%)</title><rect x="2.4718%" y="229" width="0.2310%" height="15" fill="rgb(216,20,37)" fg:x="27420126" fg:w="2562943"/><text x="2.7218%" y="239.50"></text></g><g><title>analysis_state_pool__clone_or_reuse (2,562,943 samples, 0.23%)</title><rect x="2.4718%" y="213" width="0.2310%" height="15" fill="rgb(206,188,39)" fg:x="27420126" fg:w="2562943"/><text x="2.7218%" y="223.50"></text></g><g><title>analysis_subgraph_node__compare (4,110,831 samples, 0.37%)</title><rect x="2.7028%" y="229" width="0.3706%" height="15" fill="rgb(217,207,13)" fg:x="29983069" fg:w="4110831"/><text x="2.9528%" y="239.50"></text></g><g><title>state_predecessor_map_add (11,859,419 samples, 1.07%)</title><rect x="3.0734%" y="229" width="1.0691%" height="15" fill="rgb(231,73,38)" fg:x="34093900" fg:w="11859419"/><text x="3.3234%" y="239.50"></text></g><g><title>ts_language_aliases_for_symbol (2,291,289 samples, 0.21%)</title><rect x="4.1424%" y="229" width="0.2065%" height="15" fill="rgb(225,20,46)" fg:x="45953319" fg:w="2291289"/><text x="4.3924%" y="239.50"></text></g><g><title>ts_language_lookaheads (1,788,069 samples, 0.16%)</title><rect x="4.3490%" y="229" width="0.1612%" height="15" fill="rgb(210,31,41)" fg:x="48244608" fg:w="1788069"/><text x="4.5990%" y="239.50"></text></g><g><title>ts_lookahead_iterator__next (5,858,938 samples, 0.53%)</title><rect x="4.5102%" y="229" width="0.5281%" height="15" fill="rgb(221,200,47)" fg:x="50032677" fg:w="5858938"/><text x="4.7602%" y="239.50"></text></g><g><title>analysis_state__compare_position (2,556,540 samples, 0.23%)</title><rect x="14.8095%" y="213" width="0.2305%" height="15" fill="rgb(226,26,5)" fg:x="164286956" fg:w="2556540"/><text x="15.0595%" y="223.50"></text></g><g><title>_array__splice (5,095,617 samples, 0.46%)</title><rect x="15.7016%" y="197" width="0.4593%" height="15" fill="rgb(249,33,26)" fg:x="174183423" fg:w="5095617"/><text x="15.9516%" y="207.50"></text></g><g><title>memmove (5,095,617 samples, 0.46%)</title><rect x="15.7016%" y="181" width="0.4593%" height="15" fill="rgb(235,183,28)" fg:x="174183423" fg:w="5095617"/><text x="15.9516%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (5,095,617 samples, 0.46%)</title><rect x="15.7016%" y="165" width="0.4593%" height="15" fill="rgb(221,5,38)" fg:x="174183423" fg:w="5095617"/><text x="15.9516%" y="175.50"></text></g><g><title>analysis_state__compare (20,423,659 samples, 1.84%)</title><rect x="16.3907%" y="181" width="1.8411%" height="15" fill="rgb(247,18,42)" fg:x="181827575" fg:w="20423659"/><text x="16.6407%" y="191.50">a..</text></g><g><title>analysis_state_set__insert_sorted (60,833,495 samples, 5.48%)</title><rect x="15.0400%" y="213" width="5.4838%" height="15" fill="rgb(241,131,45)" fg:x="166843496" fg:w="60833495"/><text x="15.2900%" y="223.50">analysi..</text></g><g><title>analysis_state__compare (48,397,951 samples, 4.36%)</title><rect x="16.1610%" y="197" width="4.3628%" height="15" fill="rgb(249,31,29)" fg:x="179279040" fg:w="48397951"/><text x="16.4110%" y="207.50">analy..</text></g><g><title>analysis_state__compare_position (25,425,757 samples, 2.29%)</title><rect x="18.2318%" y="181" width="2.2920%" height="15" fill="rgb(225,111,53)" fg:x="202251234" fg:w="25425757"/><text x="18.4818%" y="191.50">a..</text></g><g><title>analysis_subgraph_node__compare (40,509,072 samples, 3.65%)</title><rect x="20.5237%" y="213" width="3.6517%" height="15" fill="rgb(238,160,17)" fg:x="227676991" fg:w="40509072"/><text x="20.7737%" y="223.50">anal..</text></g><g><title>ts_language_alias_at (2,562,823 samples, 0.23%)</title><rect x="24.1754%" y="213" width="0.2310%" height="15" fill="rgb(214,148,48)" fg:x="268186063" fg:w="2562823"/><text x="24.4254%" y="223.50"></text></g><g><title>ts_language_alias_at (2,562,823 samples, 0.23%)</title><rect x="24.1754%" y="197" width="0.2310%" height="15" fill="rgb(232,36,49)" fg:x="268186063" fg:w="2562823"/><text x="24.4254%" y="207.50"></text></g><g><title>[kaka-nest] (298,365,152 samples, 26.90%)</title><rect x="0.4140%" y="293" width="26.8959%" height="15" fill="rgb(209,103,24)" fg:x="4592251" fg:w="298365152"/><text x="0.6640%" y="303.50">[kaka-nest]</text></g><g><title>tree_sitter::Query::new (290,757,617 samples, 26.21%)</title><rect x="1.0997%" y="277" width="26.2101%" height="15" fill="rgb(229,88,8)" fg:x="12199786" fg:w="290757617"/><text x="1.3497%" y="287.50">tree_sitter::Query::new</text></g><g><title>ts_query_new (290,757,617 samples, 26.21%)</title><rect x="1.0997%" y="261" width="26.2101%" height="15" fill="rgb(213,181,19)" fg:x="12199786" fg:w="290757617"/><text x="1.3497%" y="271.50">ts_query_new</text></g><g><title>ts_query__analyze_patterns (290,757,617 samples, 26.21%)</title><rect x="1.0997%" y="245" width="26.2101%" height="15" fill="rgb(254,191,54)" fg:x="12199786" fg:w="290757617"/><text x="1.3497%" y="255.50">ts_query__analyze_patterns</text></g><g><title>ts_query__perform_analysis (247,065,788 samples, 22.27%)</title><rect x="5.0383%" y="229" width="22.2715%" height="15" fill="rgb(241,83,37)" fg:x="55891615" fg:w="247065788"/><text x="5.2883%" y="239.50">ts_query__perform_analysis</text></g><g><title>ts_lookahead_iterator__next (32,208,517 samples, 2.90%)</title><rect x="24.4064%" y="213" width="2.9034%" height="15" fill="rgb(233,36,39)" fg:x="270748886" fg:w="32208517"/><text x="24.6564%" y="223.50">ts..</text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2,030,043 samples, 0.18%)</title><rect x="27.3098%" y="277" width="0.1830%" height="15" fill="rgb(226,3,54)" fg:x="302957403" fg:w="2030043"/><text x="27.5598%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::HybridEngine::try_search_half_fwd (2,030,043 samples, 0.18%)</title><rect x="27.3098%" y="261" width="0.1830%" height="15" fill="rgb(245,192,40)" fg:x="302957403" fg:w="2030043"/><text x="27.5598%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::try_search_fwd (2,030,043 samples, 0.18%)</title><rect x="27.3098%" y="245" width="0.1830%" height="15" fill="rgb(238,167,29)" fg:x="302957403" fg:w="2030043"/><text x="27.5598%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2,505,154 samples, 0.23%)</title><rect x="27.4928%" y="277" width="0.2258%" height="15" fill="rgb(232,182,51)" fg:x="304987446" fg:w="2505154"/><text x="27.7428%" y="287.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::from_encoded_range (2,505,154 samples, 0.23%)</title><rect x="27.4928%" y="261" width="0.2258%" height="15" fill="rgb(231,60,39)" fg:x="304987446" fg:w="2505154"/><text x="27.7428%" y="271.50"></text></g><g><title>[unknown] (14,676,612 samples, 1.32%)</title><rect x="27.7186%" y="277" width="1.3230%" height="15" fill="rgb(208,69,12)" fg:x="307492600" fg:w="14676612"/><text x="27.9686%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (14,676,612 samples, 1.32%)</title><rect x="27.7186%" y="261" width="1.3230%" height="15" fill="rgb(235,93,37)" fg:x="307492600" fg:w="14676612"/><text x="27.9686%" y="271.50"></text></g><g><title>core::ptr::write (14,676,612 samples, 1.32%)</title><rect x="27.7186%" y="245" width="1.3230%" height="15" fill="rgb(213,116,39)" fg:x="307492600" fg:w="14676612"/><text x="27.9686%" y="255.50"></text></g><g><title>aho_corasick::dfa::Builder::build_from_noncontiguous (12,550,413 samples, 1.13%)</title><rect x="29.0417%" y="277" width="1.1313%" height="15" fill="rgb(222,207,29)" fg:x="322169212" fg:w="12550413"/><text x="29.2917%" y="287.50"></text></g><g><title>aho_corasick::dfa::Builder::finish_build_one_start (12,550,413 samples, 1.13%)</title><rect x="29.0417%" y="261" width="1.1313%" height="15" fill="rgb(206,96,30)" fg:x="322169212" fg:w="12550413"/><text x="29.2917%" y="271.50"></text></g><g><title>aho_corasick::dfa::sparse_iter (12,550,413 samples, 1.13%)</title><rect x="29.0417%" y="245" width="1.1313%" height="15" fill="rgb(218,138,4)" fg:x="322169212" fg:w="12550413"/><text x="29.2917%" y="255.50"></text></g><g><title>aho_corasick::util::alphabet::ByteClasses::get (12,550,413 samples, 1.13%)</title><rect x="29.0417%" y="229" width="1.1313%" height="15" fill="rgb(250,191,14)" fg:x="322169212" fg:w="12550413"/><text x="29.2917%" y="239.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::densify (4,536,860 samples, 0.41%)</title><rect x="30.1730%" y="277" width="0.4090%" height="15" fill="rgb(239,60,40)" fg:x="334719625" fg:w="4536860"/><text x="30.4230%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2,289,492 samples, 0.21%)</title><rect x="30.3756%" y="261" width="0.2064%" height="15" fill="rgb(206,27,48)" fg:x="336966993" fg:w="2289492"/><text x="30.6256%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2,289,492 samples, 0.21%)</title><rect x="30.3756%" y="245" width="0.2064%" height="15" fill="rgb(225,35,8)" fg:x="336966993" fg:w="2289492"/><text x="30.6256%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2,289,492 samples, 0.21%)</title><rect x="30.3756%" y="229" width="0.2064%" height="15" fill="rgb(250,213,24)" fg:x="336966993" fg:w="2289492"/><text x="30.6256%" y="239.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::init_full_state (4,954,497 samples, 0.45%)</title><rect x="30.5820%" y="277" width="0.4466%" height="15" fill="rgb(247,123,22)" fg:x="339256485" fg:w="4954497"/><text x="30.8320%" y="287.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::alloc_transition (2,548,374 samples, 0.23%)</title><rect x="30.7989%" y="261" width="0.2297%" height="15" fill="rgb(231,138,38)" fg:x="341662608" fg:w="2548374"/><text x="31.0489%" y="271.50"></text></g><g><title>aho_corasick::util::primitives::StateID::new (2,548,374 samples, 0.23%)</title><rect x="30.7989%" y="245" width="0.2297%" height="15" fill="rgb(231,145,46)" fg:x="341662608" fg:w="2548374"/><text x="31.0489%" y="255.50"></text></g><g><title>aho_corasick::util::primitives::SmallIndex::new (2,548,374 samples, 0.23%)</title><rect x="30.7989%" y="229" width="0.2297%" height="15" fill="rgb(251,118,11)" fg:x="341662608" fg:w="2548374"/><text x="31.0489%" y="239.50"></text></g><g><title>&lt;aho_corasick::util::primitives::SmallIndex as core::convert::TryFrom&lt;usize&gt;&gt;::try_from (2,548,374 samples, 0.23%)</title><rect x="30.7989%" y="213" width="0.2297%" height="15" fill="rgb(217,147,25)" fg:x="341662608" fg:w="2548374"/><text x="31.0489%" y="223.50"></text></g><g><title>aho_corasick::util::alphabet::ByteClassSet::byte_classes (2,301,847 samples, 0.21%)</title><rect x="31.0286%" y="277" width="0.2075%" height="15" fill="rgb(247,81,37)" fg:x="344210982" fg:w="2301847"/><text x="31.2786%" y="287.50"></text></g><g><title>aho_corasick::util::alphabet::ByteSet::contains (2,301,847 samples, 0.21%)</title><rect x="31.0286%" y="261" width="0.2075%" height="15" fill="rgb(209,12,38)" fg:x="344210982" fg:w="2301847"/><text x="31.2786%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2,538,990 samples, 0.23%)</title><rect x="31.2361%" y="277" width="0.2289%" height="15" fill="rgb(227,1,9)" fg:x="346512829" fg:w="2538990"/><text x="31.4861%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::captures::GroupInfoInner&gt; (2,538,990 samples, 0.23%)</title><rect x="31.2361%" y="261" width="0.2289%" height="15" fill="rgb(248,47,43)" fg:x="346512829" fg:w="2538990"/><text x="31.4861%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt;&gt; (2,538,990 samples, 0.23%)</title><rect x="31.2361%" y="245" width="0.2289%" height="15" fill="rgb(221,10,30)" fg:x="346512829" fg:w="2538990"/><text x="31.4861%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt;&gt; (2,538,990 samples, 0.23%)</title><rect x="31.2361%" y="229" width="0.2289%" height="15" fill="rgb(210,229,1)" fg:x="346512829" fg:w="2538990"/><text x="31.4861%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,538,990 samples, 0.23%)</title><rect x="31.2361%" y="213" width="0.2289%" height="15" fill="rgb(222,148,37)" fg:x="346512829" fg:w="2538990"/><text x="31.4861%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2,411,639 samples, 0.22%)</title><rect x="31.4650%" y="277" width="0.2174%" height="15" fill="rgb(234,67,33)" fg:x="349051819" fg:w="2411639"/><text x="31.7150%" y="287.50"></text></g><g><title>core::ptr::write (2,411,639 samples, 0.22%)</title><rect x="31.4650%" y="261" width="0.2174%" height="15" fill="rgb(247,98,35)" fg:x="349051819" fg:w="2411639"/><text x="31.7150%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,193,361 samples, 0.20%)</title><rect x="31.6824%" y="277" width="0.1977%" height="15" fill="rgb(247,138,52)" fg:x="351463458" fg:w="2193361"/><text x="31.9324%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2,193,361 samples, 0.20%)</title><rect x="31.6824%" y="261" width="0.1977%" height="15" fill="rgb(213,79,30)" fg:x="351463458" fg:w="2193361"/><text x="31.9324%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,193,361 samples, 0.20%)</title><rect x="31.6824%" y="245" width="0.1977%" height="15" fill="rgb(246,177,23)" fg:x="351463458" fg:w="2193361"/><text x="31.9324%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,193,361 samples, 0.20%)</title><rect x="31.6824%" y="229" width="0.1977%" height="15" fill="rgb(230,62,27)" fg:x="351463458" fg:w="2193361"/><text x="31.9324%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2,193,361 samples, 0.20%)</title><rect x="31.6824%" y="213" width="0.1977%" height="15" fill="rgb(216,154,8)" fg:x="351463458" fg:w="2193361"/><text x="31.9324%" y="223.50"></text></g><g><title>core::slice::sort::stable::drift::sort (2,427,248 samples, 0.22%)</title><rect x="31.8801%" y="277" width="0.2188%" height="15" fill="rgb(244,35,45)" fg:x="353656819" fg:w="2427248"/><text x="32.1301%" y="287.50"></text></g><g><title>core::slice::sort::stable::drift::logical_merge (2,427,248 samples, 0.22%)</title><rect x="31.8801%" y="261" width="0.2188%" height="15" fill="rgb(251,115,12)" fg:x="353656819" fg:w="2427248"/><text x="32.1301%" y="271.50"></text></g><g><title>core::slice::sort::stable::merge::merge (2,427,248 samples, 0.22%)</title><rect x="31.8801%" y="245" width="0.2188%" height="15" fill="rgb(240,54,50)" fg:x="353656819" fg:w="2427248"/><text x="32.1301%" y="255.50"></text></g><g><title>core::slice::sort::stable::merge::MergeState&lt;T&gt;::merge_down (2,427,248 samples, 0.22%)</title><rect x="31.8801%" y="229" width="0.2188%" height="15" fill="rgb(233,84,52)" fg:x="353656819" fg:w="2427248"/><text x="32.1301%" y="239.50"></text></g><g><title>core::ptr::copy_nonoverlapping (2,427,248 samples, 0.22%)</title><rect x="31.8801%" y="213" width="0.2188%" height="15" fill="rgb(207,117,47)" fg:x="353656819" fg:w="2427248"/><text x="32.1301%" y="223.50"></text></g><g><title>handlebars::template::Template::compile2 (2,297,127 samples, 0.21%)</title><rect x="32.0989%" y="277" width="0.2071%" height="15" fill="rgb(249,43,39)" fg:x="356084067" fg:w="2297127"/><text x="32.3489%" y="287.50"></text></g><g><title>pest::position::Position::line_col (2,297,127 samples, 0.21%)</title><rect x="32.0989%" y="261" width="0.2071%" height="15" fill="rgb(209,38,44)" fg:x="356084067" fg:w="2297127"/><text x="32.3489%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2,407,040 samples, 0.22%)</title><rect x="32.3060%" y="277" width="0.2170%" height="15" fill="rgb(236,212,23)" fg:x="358381194" fg:w="2407040"/><text x="32.5560%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2,359,010 samples, 0.21%)</title><rect x="32.5229%" y="277" width="0.2127%" height="15" fill="rgb(242,79,21)" fg:x="360788234" fg:w="2359010"/><text x="32.7729%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2,359,010 samples, 0.21%)</title><rect x="32.5229%" y="261" width="0.2127%" height="15" fill="rgb(211,96,35)" fg:x="360788234" fg:w="2359010"/><text x="32.7729%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (2,359,010 samples, 0.21%)</title><rect x="32.5229%" y="245" width="0.2127%" height="15" fill="rgb(253,215,40)" fg:x="360788234" fg:w="2359010"/><text x="32.7729%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::literal_trie::LiteralTrie&gt; (2,359,010 samples, 0.21%)</title><rect x="32.5229%" y="229" width="0.2127%" height="15" fill="rgb(211,81,21)" fg:x="360788234" fg:w="2359010"/><text x="32.7729%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::literal_trie::State&gt;&gt; (2,359,010 samples, 0.21%)</title><rect x="32.5229%" y="213" width="0.2127%" height="15" fill="rgb(208,190,38)" fg:x="360788234" fg:w="2359010"/><text x="32.7729%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,359,010 samples, 0.21%)</title><rect x="32.5229%" y="197" width="0.2127%" height="15" fill="rgb(235,213,38)" fg:x="360788234" fg:w="2359010"/><text x="32.7729%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::literal_trie::State]&gt; (2,359,010 samples, 0.21%)</title><rect x="32.5229%" y="181" width="0.2127%" height="15" fill="rgb(237,122,38)" fg:x="360788234" fg:w="2359010"/><text x="32.7729%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::literal_trie::State&gt; (2,359,010 samples, 0.21%)</title><rect x="32.5229%" y="165" width="0.2127%" height="15" fill="rgb(244,218,35)" fg:x="360788234" fg:w="2359010"/><text x="32.7729%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(usize,usize)&gt;&gt; (2,359,010 samples, 0.21%)</title><rect x="32.5229%" y="149" width="0.2127%" height="15" fill="rgb(240,68,47)" fg:x="360788234" fg:w="2359010"/><text x="32.7729%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,usize)&gt;&gt; (2,359,010 samples, 0.21%)</title><rect x="32.5229%" y="133" width="0.2127%" height="15" fill="rgb(210,16,53)" fg:x="360788234" fg:w="2359010"/><text x="32.7729%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,359,010 samples, 0.21%)</title><rect x="32.5229%" y="117" width="0.2127%" height="15" fill="rgb(235,124,12)" fg:x="360788234" fg:w="2359010"/><text x="32.7729%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,359,010 samples, 0.21%)</title><rect x="32.5229%" y="101" width="0.2127%" height="15" fill="rgb(224,169,11)" fg:x="360788234" fg:w="2359010"/><text x="32.7729%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,359,010 samples, 0.21%)</title><rect x="32.5229%" y="85" width="0.2127%" height="15" fill="rgb(250,166,2)" fg:x="360788234" fg:w="2359010"/><text x="32.7729%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (2,359,010 samples, 0.21%)</title><rect x="32.5229%" y="69" width="0.2127%" height="15" fill="rgb(242,216,29)" fg:x="360788234" fg:w="2359010"/><text x="32.7729%" y="79.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,359,010 samples, 0.21%)</title><rect x="32.5229%" y="53" width="0.2127%" height="15" fill="rgb(230,116,27)" fg:x="360788234" fg:w="2359010"/><text x="32.7729%" y="63.50"></text></g><g><title>_int_free (2,359,010 samples, 0.21%)</title><rect x="32.5229%" y="37" width="0.2127%" height="15" fill="rgb(228,99,48)" fg:x="360788234" fg:w="2359010"/><text x="32.7729%" y="47.50"></text></g><g><title>regex_syntax::hir::Properties::union (2,408,438 samples, 0.22%)</title><rect x="32.7356%" y="277" width="0.2171%" height="15" fill="rgb(253,11,6)" fg:x="363147244" fg:w="2408438"/><text x="32.9856%" y="287.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2,408,438 samples, 0.22%)</title><rect x="32.7356%" y="261" width="0.2171%" height="15" fill="rgb(247,143,39)" fg:x="363147244" fg:w="2408438"/><text x="32.9856%" y="271.50"></text></g><g><title>alloc::alloc::exchange_malloc (2,408,438 samples, 0.22%)</title><rect x="32.7356%" y="245" width="0.2171%" height="15" fill="rgb(236,97,10)" fg:x="363147244" fg:w="2408438"/><text x="32.9856%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,408,438 samples, 0.22%)</title><rect x="32.7356%" y="229" width="0.2171%" height="15" fill="rgb(233,208,19)" fg:x="363147244" fg:w="2408438"/><text x="32.9856%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,408,438 samples, 0.22%)</title><rect x="32.7356%" y="213" width="0.2171%" height="15" fill="rgb(216,164,2)" fg:x="363147244" fg:w="2408438"/><text x="32.9856%" y="223.50"></text></g><g><title>alloc::alloc::alloc (2,408,438 samples, 0.22%)</title><rect x="32.7356%" y="197" width="0.2171%" height="15" fill="rgb(220,129,5)" fg:x="363147244" fg:w="2408438"/><text x="32.9856%" y="207.50"></text></g><g><title>malloc (2,408,438 samples, 0.22%)</title><rect x="32.7356%" y="181" width="0.2171%" height="15" fill="rgb(242,17,10)" fg:x="363147244" fg:w="2408438"/><text x="32.9856%" y="191.50"></text></g><g><title>_int_malloc (2,408,438 samples, 0.22%)</title><rect x="32.7356%" y="165" width="0.2171%" height="15" fill="rgb(242,107,0)" fg:x="363147244" fg:w="2408438"/><text x="32.9856%" y="175.50"></text></g><g><title>tft::detect::try_detect (1,963,029 samples, 0.18%)</title><rect x="32.9527%" y="277" width="0.1770%" height="15" fill="rgb(251,28,31)" fg:x="365555682" fg:w="1963029"/><text x="33.2027%" y="287.50"></text></g><g><title>std::path::Path::file_name (1,963,029 samples, 0.18%)</title><rect x="32.9527%" y="261" width="0.1770%" height="15" fill="rgb(233,223,10)" fg:x="365555682" fg:w="1963029"/><text x="33.2027%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1,963,029 samples, 0.18%)</title><rect x="32.9527%" y="245" width="0.1770%" height="15" fill="rgb(215,21,27)" fg:x="365555682" fg:w="1963029"/><text x="33.2027%" y="255.50"></text></g><g><title>analysis_state__compare_position (4,952,803 samples, 0.45%)</title><rect x="39.0093%" y="261" width="0.4465%" height="15" fill="rgb(232,23,21)" fg:x="432743559" fg:w="4952803"/><text x="39.2593%" y="271.50"></text></g><g><title>analysis_state_set__insert_sorted (5,083,148 samples, 0.46%)</title><rect x="39.4558%" y="261" width="0.4582%" height="15" fill="rgb(244,5,23)" fg:x="437696362" fg:w="5083148"/><text x="39.7058%" y="271.50"></text></g><g><title>analysis_state__compare (2,528,819 samples, 0.23%)</title><rect x="39.6860%" y="245" width="0.2280%" height="15" fill="rgb(226,81,46)" fg:x="440250691" fg:w="2528819"/><text x="39.9360%" y="255.50"></text></g><g><title>analysis_state__compare_position (2,528,819 samples, 0.23%)</title><rect x="39.6860%" y="229" width="0.2280%" height="15" fill="rgb(247,70,30)" fg:x="440250691" fg:w="2528819"/><text x="39.9360%" y="239.50"></text></g><g><title>ts_language_alias_at (2,551,804 samples, 0.23%)</title><rect x="39.9140%" y="261" width="0.2300%" height="15" fill="rgb(212,68,19)" fg:x="442779510" fg:w="2551804"/><text x="40.1640%" y="271.50"></text></g><g><title>[unknown] (146,886,725 samples, 13.24%)</title><rect x="27.3098%" y="293" width="13.2410%" height="15" fill="rgb(240,187,13)" fg:x="302957403" fg:w="146886725"/><text x="27.5598%" y="303.50">[unknown]</text></g><g><title>ts_query__perform_analysis (82,325,417 samples, 7.42%)</title><rect x="33.1296%" y="277" width="7.4212%" height="15" fill="rgb(223,113,26)" fg:x="367518711" fg:w="82325417"/><text x="33.3796%" y="287.50">ts_query__..</text></g><g><title>ts_lookahead_iterator__next (4,512,814 samples, 0.41%)</title><rect x="40.1440%" y="261" width="0.4068%" height="15" fill="rgb(206,192,2)" fg:x="445331314" fg:w="4512814"/><text x="40.3940%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (2,564,154 samples, 0.23%)</title><rect x="40.5508%" y="293" width="0.2311%" height="15" fill="rgb(241,108,4)" fg:x="449844128" fg:w="2564154"/><text x="40.8008%" y="303.50"></text></g><g><title>_start (1,436,109 samples, 0.13%)</title><rect x="40.7819%" y="293" width="0.1295%" height="15" fill="rgb(247,173,49)" fg:x="452408282" fg:w="1436109"/><text x="41.0319%" y="303.50"></text></g><g><title>_dl_start (1,436,109 samples, 0.13%)</title><rect x="40.7819%" y="277" width="0.1295%" height="15" fill="rgb(224,114,35)" fg:x="452408282" fg:w="1436109"/><text x="41.0319%" y="287.50"></text></g><g><title>_dl_sysdep_start (1,436,109 samples, 0.13%)</title><rect x="40.7819%" y="261" width="0.1295%" height="15" fill="rgb(245,159,27)" fg:x="452408282" fg:w="1436109"/><text x="41.0319%" y="271.50"></text></g><g><title>dl_main (1,436,109 samples, 0.13%)</title><rect x="40.7819%" y="245" width="0.1295%" height="15" fill="rgb(245,172,44)" fg:x="452408282" fg:w="1436109"/><text x="41.0319%" y="255.50"></text></g><g><title>_dl_relocate_object (1,436,109 samples, 0.13%)</title><rect x="40.7819%" y="229" width="0.1295%" height="15" fill="rgb(236,23,11)" fg:x="452408282" fg:w="1436109"/><text x="41.0319%" y="239.50"></text></g><g><title>aho_corasick::dfa::Builder::build_from_noncontiguous (2,138,023 samples, 0.19%)</title><rect x="40.9114%" y="293" width="0.1927%" height="15" fill="rgb(205,117,38)" fg:x="453844391" fg:w="2138023"/><text x="41.1614%" y="303.50"></text></g><g><title>aho_corasick::dfa::Builder::finish_build_one_start (2,138,023 samples, 0.19%)</title><rect x="40.9114%" y="277" width="0.1927%" height="15" fill="rgb(237,72,25)" fg:x="453844391" fg:w="2138023"/><text x="41.1614%" y="287.50"></text></g><g><title>aho_corasick::dfa::sparse_iter (2,138,023 samples, 0.19%)</title><rect x="40.9114%" y="261" width="0.1927%" height="15" fill="rgb(244,70,9)" fg:x="453844391" fg:w="2138023"/><text x="41.1614%" y="271.50"></text></g><g><title>&lt;core::iter::sources::from_fn::FromFn&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,138,023 samples, 0.19%)</title><rect x="40.9114%" y="245" width="0.1927%" height="15" fill="rgb(217,125,39)" fg:x="453844391" fg:w="2138023"/><text x="41.1614%" y="255.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::iter_trans::{{closure}} (2,138,023 samples, 0.19%)</title><rect x="40.9114%" y="229" width="0.1927%" height="15" fill="rgb(235,36,10)" fg:x="453844391" fg:w="2138023"/><text x="41.1614%" y="239.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::build_trie (2,541,015 samples, 0.23%)</title><rect x="41.1041%" y="293" width="0.2291%" height="15" fill="rgb(251,123,47)" fg:x="455982414" fg:w="2541015"/><text x="41.3541%" y="303.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::follow_transition (2,541,015 samples, 0.23%)</title><rect x="41.1041%" y="277" width="0.2291%" height="15" fill="rgb(221,13,13)" fg:x="455982414" fg:w="2541015"/><text x="41.3541%" y="287.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::follow_transition_sparse (2,541,015 samples, 0.23%)</title><rect x="41.1041%" y="261" width="0.2291%" height="15" fill="rgb(238,131,9)" fg:x="455982414" fg:w="2541015"/><text x="41.3541%" y="271.50"></text></g><g><title>&lt;core::iter::sources::from_fn::FromFn&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,541,015 samples, 0.23%)</title><rect x="41.1041%" y="245" width="0.2291%" height="15" fill="rgb(211,50,8)" fg:x="455982414" fg:w="2541015"/><text x="41.3541%" y="255.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::iter_trans::{{closure}} (2,541,015 samples, 0.23%)</title><rect x="41.1041%" y="229" width="0.2291%" height="15" fill="rgb(245,182,24)" fg:x="455982414" fg:w="2541015"/><text x="41.3541%" y="239.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::alloc_state (2,550,205 samples, 0.23%)</title><rect x="41.3332%" y="293" width="0.2299%" height="15" fill="rgb(242,14,37)" fg:x="458523429" fg:w="2550205"/><text x="41.5832%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,550,205 samples, 0.23%)</title><rect x="41.3332%" y="277" width="0.2299%" height="15" fill="rgb(246,228,12)" fg:x="458523429" fg:w="2550205"/><text x="41.5832%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (2,550,205 samples, 0.23%)</title><rect x="41.3332%" y="261" width="0.2299%" height="15" fill="rgb(213,55,15)" fg:x="458523429" fg:w="2550205"/><text x="41.5832%" y="271.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::add_transition (2,550,205 samples, 0.23%)</title><rect x="41.3332%" y="245" width="0.2299%" height="15" fill="rgb(209,9,3)" fg:x="458523429" fg:w="2550205"/><text x="41.5832%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2,539,598 samples, 0.23%)</title><rect x="41.5631%" y="245" width="0.2289%" height="15" fill="rgb(230,59,30)" fg:x="461073634" fg:w="2539598"/><text x="41.8131%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5,092,877 samples, 0.46%)</title><rect x="41.5631%" y="293" width="0.4591%" height="15" fill="rgb(209,121,21)" fg:x="461073634" fg:w="5092877"/><text x="41.8131%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (5,092,877 samples, 0.46%)</title><rect x="41.5631%" y="277" width="0.4591%" height="15" fill="rgb(220,109,13)" fg:x="461073634" fg:w="5092877"/><text x="41.8131%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (5,092,877 samples, 0.46%)</title><rect x="41.5631%" y="261" width="0.4591%" height="15" fill="rgb(232,18,1)" fg:x="461073634" fg:w="5092877"/><text x="41.8131%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (2,553,279 samples, 0.23%)</title><rect x="41.7920%" y="245" width="0.2302%" height="15" fill="rgb(215,41,42)" fg:x="463613232" fg:w="2553279"/><text x="42.0420%" y="255.50"></text></g><g><title>_int_free_merge_chunk (2,537,712 samples, 0.23%)</title><rect x="42.0222%" y="181" width="0.2288%" height="15" fill="rgb(224,123,36)" fg:x="466166511" fg:w="2537712"/><text x="42.2722%" y="191.50"></text></g><g><title>_int_free_create_chunk (2,537,712 samples, 0.23%)</title><rect x="42.0222%" y="165" width="0.2288%" height="15" fill="rgb(240,125,3)" fg:x="466166511" fg:w="2537712"/><text x="42.2722%" y="175.50"></text></g><g><title>anon.d0394f74d87e8f54ce2c9bd5a7b2b98b.16.llvm.14745926396568796715 (4,860,258 samples, 0.44%)</title><rect x="42.0222%" y="293" width="0.4381%" height="15" fill="rgb(205,98,50)" fg:x="466166511" fg:w="4860258"/><text x="42.2722%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (4,860,258 samples, 0.44%)</title><rect x="42.0222%" y="277" width="0.4381%" height="15" fill="rgb(205,185,37)" fg:x="466166511" fg:w="4860258"/><text x="42.2722%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4,860,258 samples, 0.44%)</title><rect x="42.0222%" y="261" width="0.4381%" height="15" fill="rgb(238,207,15)" fg:x="466166511" fg:w="4860258"/><text x="42.2722%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4,860,258 samples, 0.44%)</title><rect x="42.0222%" y="245" width="0.4381%" height="15" fill="rgb(213,199,42)" fg:x="466166511" fg:w="4860258"/><text x="42.2722%" y="255.50"></text></g><g><title>alloc::alloc::realloc (4,860,258 samples, 0.44%)</title><rect x="42.0222%" y="229" width="0.4381%" height="15" fill="rgb(235,201,11)" fg:x="466166511" fg:w="4860258"/><text x="42.2722%" y="239.50"></text></g><g><title>realloc (4,860,258 samples, 0.44%)</title><rect x="42.0222%" y="213" width="0.4381%" height="15" fill="rgb(207,46,11)" fg:x="466166511" fg:w="4860258"/><text x="42.2722%" y="223.50"></text></g><g><title>_int_realloc (4,860,258 samples, 0.44%)</title><rect x="42.0222%" y="197" width="0.4381%" height="15" fill="rgb(241,35,35)" fg:x="466166511" fg:w="4860258"/><text x="42.2722%" y="207.50"></text></g><g><title>_int_malloc (2,322,546 samples, 0.21%)</title><rect x="42.2509%" y="181" width="0.2094%" height="15" fill="rgb(243,32,47)" fg:x="468704223" fg:w="2322546"/><text x="42.5009%" y="191.50"></text></g><g><title>clap_builder::builder::command::Command::get_matches_from (506,182 samples, 0.05%)</title><rect x="42.4603%" y="293" width="0.0456%" height="15" fill="rgb(247,202,23)" fg:x="471026769" fg:w="506182"/><text x="42.7103%" y="303.50"></text></g><g><title>clap_builder::builder::command::Command::try_get_matches_from_mut (506,182 samples, 0.05%)</title><rect x="42.4603%" y="277" width="0.0456%" height="15" fill="rgb(219,102,11)" fg:x="471026769" fg:w="506182"/><text x="42.7103%" y="287.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (506,182 samples, 0.05%)</title><rect x="42.4603%" y="261" width="0.0456%" height="15" fill="rgb(243,110,44)" fg:x="471026769" fg:w="506182"/><text x="42.7103%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (2,376,580 samples, 0.21%)</title><rect x="42.5059%" y="293" width="0.2142%" height="15" fill="rgb(222,74,54)" fg:x="471532951" fg:w="2376580"/><text x="42.7559%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (16,971,768 samples, 1.53%)</title><rect x="42.7202%" y="293" width="1.5299%" height="15" fill="rgb(216,99,12)" fg:x="473909531" fg:w="16971768"/><text x="42.9702%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (16,971,768 samples, 1.53%)</title><rect x="42.7202%" y="277" width="1.5299%" height="15" fill="rgb(226,22,26)" fg:x="473909531" fg:w="16971768"/><text x="42.9702%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt; (16,971,768 samples, 1.53%)</title><rect x="42.7202%" y="261" width="1.5299%" height="15" fill="rgb(217,163,10)" fg:x="473909531" fg:w="16971768"/><text x="42.9702%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedMap&gt; (16,971,768 samples, 1.53%)</title><rect x="42.7202%" y="245" width="1.5299%" height="15" fill="rgb(213,25,53)" fg:x="473909531" fg:w="16971768"/><text x="42.9702%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (16,971,768 samples, 1.53%)</title><rect x="42.7202%" y="229" width="1.5299%" height="15" fill="rgb(252,105,26)" fg:x="473909531" fg:w="16971768"/><text x="42.9702%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16,971,768 samples, 1.53%)</title><rect x="42.7202%" y="213" width="1.5299%" height="15" fill="rgb(220,39,43)" fg:x="473909531" fg:w="16971768"/><text x="42.9702%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::map::Utf8BoundedEntry]&gt; (16,971,768 samples, 1.53%)</title><rect x="42.7202%" y="197" width="1.5299%" height="15" fill="rgb(229,68,48)" fg:x="473909531" fg:w="16971768"/><text x="42.9702%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt; (14,541,809 samples, 1.31%)</title><rect x="42.9392%" y="181" width="1.3109%" height="15" fill="rgb(252,8,32)" fg:x="476339490" fg:w="14541809"/><text x="43.1892%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (14,541,809 samples, 1.31%)</title><rect x="42.9392%" y="165" width="1.3109%" height="15" fill="rgb(223,20,43)" fg:x="476339490" fg:w="14541809"/><text x="43.1892%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (14,541,809 samples, 1.31%)</title><rect x="42.9392%" y="149" width="1.3109%" height="15" fill="rgb(229,81,49)" fg:x="476339490" fg:w="14541809"/><text x="43.1892%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14,541,809 samples, 1.31%)</title><rect x="42.9392%" y="133" width="1.3109%" height="15" fill="rgb(236,28,36)" fg:x="476339490" fg:w="14541809"/><text x="43.1892%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7,430,132 samples, 0.67%)</title><rect x="43.5803%" y="117" width="0.6698%" height="15" fill="rgb(249,185,26)" fg:x="483451167" fg:w="7430132"/><text x="43.8303%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (7,430,132 samples, 0.67%)</title><rect x="43.5803%" y="101" width="0.6698%" height="15" fill="rgb(249,174,33)" fg:x="483451167" fg:w="7430132"/><text x="43.8303%" y="111.50"></text></g><g><title>handlebars::support::str::write_indented (1,384,542 samples, 0.12%)</title><rect x="44.2501%" y="293" width="0.1248%" height="15" fill="rgb(233,201,37)" fg:x="490881299" fg:w="1384542"/><text x="44.5001%" y="303.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (1,384,542 samples, 0.12%)</title><rect x="44.2501%" y="277" width="0.1248%" height="15" fill="rgb(221,78,26)" fg:x="490881299" fg:w="1384542"/><text x="44.5001%" y="287.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index (1,384,542 samples, 0.12%)</title><rect x="44.2501%" y="261" width="0.1248%" height="15" fill="rgb(250,127,30)" fg:x="490881299" fg:w="1384542"/><text x="44.5001%" y="271.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1,384,542 samples, 0.12%)</title><rect x="44.2501%" y="245" width="0.1248%" height="15" fill="rgb(230,49,44)" fg:x="490881299" fg:w="1384542"/><text x="44.5001%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,348,586 samples, 0.21%)</title><rect x="44.3749%" y="293" width="0.2117%" height="15" fill="rgb(229,67,23)" fg:x="492265841" fg:w="2348586"/><text x="44.6249%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::determinize::state::State&gt; (2,348,586 samples, 0.21%)</title><rect x="44.3749%" y="277" width="0.2117%" height="15" fill="rgb(249,83,47)" fg:x="492265841" fg:w="2348586"/><text x="44.6249%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;[u8]&gt;&gt; (2,348,586 samples, 0.21%)</title><rect x="44.3749%" y="261" width="0.2117%" height="15" fill="rgb(215,43,3)" fg:x="492265841" fg:w="2348586"/><text x="44.6249%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,348,586 samples, 0.21%)</title><rect x="44.3749%" y="245" width="0.2117%" height="15" fill="rgb(238,154,13)" fg:x="492265841" fg:w="2348586"/><text x="44.6249%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2,348,586 samples, 0.21%)</title><rect x="44.3749%" y="229" width="0.2117%" height="15" fill="rgb(219,56,2)" fg:x="492265841" fg:w="2348586"/><text x="44.6249%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (2,348,586 samples, 0.21%)</title><rect x="44.3749%" y="213" width="0.2117%" height="15" fill="rgb(233,0,4)" fg:x="492265841" fg:w="2348586"/><text x="44.6249%" y="223.50"></text></g><g><title>malloc (2,273,099 samples, 0.20%)</title><rect x="44.5866%" y="293" width="0.2049%" height="15" fill="rgb(235,30,7)" fg:x="494614427" fg:w="2273099"/><text x="44.8366%" y="303.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::match_string (2,206,092 samples, 0.20%)</title><rect x="44.7915%" y="293" width="0.1989%" height="15" fill="rgb(250,79,13)" fg:x="496887526" fg:w="2206092"/><text x="45.0415%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2,518,956 samples, 0.23%)</title><rect x="44.9904%" y="293" width="0.2271%" height="15" fill="rgb(211,146,34)" fg:x="499093618" fg:w="2518956"/><text x="45.2404%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Config::byte_classes_from_nfa (2,518,956 samples, 0.23%)</title><rect x="44.9904%" y="277" width="0.2271%" height="15" fill="rgb(228,22,38)" fg:x="499093618" fg:w="2518956"/><text x="45.2404%" y="287.50"></text></g><g><title>regex_automata::util::alphabet::ByteClassSet::byte_classes (2,518,956 samples, 0.23%)</title><rect x="44.9904%" y="261" width="0.2271%" height="15" fill="rgb(235,168,5)" fg:x="499093618" fg:w="2518956"/><text x="45.2404%" y="271.50"></text></g><g><title>regex_automata::util::alphabet::ByteSet::contains (2,518,956 samples, 0.23%)</title><rect x="44.9904%" y="245" width="0.2271%" height="15" fill="rgb(221,155,16)" fg:x="499093618" fg:w="2518956"/><text x="45.2404%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (4,941,040 samples, 0.45%)</title><rect x="45.2174%" y="293" width="0.4454%" height="15" fill="rgb(215,215,53)" fg:x="501612574" fg:w="4941040"/><text x="45.4674%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (4,941,040 samples, 0.45%)</title><rect x="45.2174%" y="277" width="0.4454%" height="15" fill="rgb(223,4,10)" fg:x="501612574" fg:w="4941040"/><text x="45.4674%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (4,941,040 samples, 0.45%)</title><rect x="45.2174%" y="261" width="0.4454%" height="15" fill="rgb(234,103,6)" fg:x="501612574" fg:w="4941040"/><text x="45.4674%" y="271.50"></text></g><g><title>[unknown] (4,941,040 samples, 0.45%)</title><rect x="45.2174%" y="245" width="0.4454%" height="15" fill="rgb(227,97,0)" fg:x="501612574" fg:w="4941040"/><text x="45.4674%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (4,941,040 samples, 0.45%)</title><rect x="45.2174%" y="229" width="0.4454%" height="15" fill="rgb(234,150,53)" fg:x="501612574" fg:w="4941040"/><text x="45.4674%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (4,941,040 samples, 0.45%)</title><rect x="45.2174%" y="213" width="0.4454%" height="15" fill="rgb(228,201,54)" fg:x="501612574" fg:w="4941040"/><text x="45.4674%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4,941,040 samples, 0.45%)</title><rect x="45.2174%" y="197" width="0.4454%" height="15" fill="rgb(222,22,37)" fg:x="501612574" fg:w="4941040"/><text x="45.4674%" y="207.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (4,941,040 samples, 0.45%)</title><rect x="45.2174%" y="181" width="0.4454%" height="15" fill="rgb(237,53,32)" fg:x="501612574" fg:w="4941040"/><text x="45.4674%" y="191.50"></text></g><g><title>malloc_consolidate (4,941,040 samples, 0.45%)</title><rect x="45.2174%" y="165" width="0.4454%" height="15" fill="rgb(233,25,53)" fg:x="501612574" fg:w="4941040"/><text x="45.4674%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2,432,886 samples, 0.22%)</title><rect x="45.6628%" y="293" width="0.2193%" height="15" fill="rgb(210,40,34)" fg:x="506553614" fg:w="2432886"/><text x="45.9128%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVMEngine::new (2,432,886 samples, 0.22%)</title><rect x="45.6628%" y="277" width="0.2193%" height="15" fill="rgb(241,220,44)" fg:x="506553614" fg:w="2432886"/><text x="45.9128%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::Builder::new (2,432,886 samples, 0.22%)</title><rect x="45.6628%" y="261" width="0.2193%" height="15" fill="rgb(235,28,35)" fg:x="506553614" fg:w="2432886"/><text x="45.9128%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2,391,116 samples, 0.22%)</title><rect x="45.8821%" y="293" width="0.2155%" height="15" fill="rgb(210,56,17)" fg:x="508986500" fg:w="2391116"/><text x="46.1321%" y="303.50"></text></g><g><title>regex_automata::util::primitives::&lt;impl core::ops::index::IndexMut&lt;regex_automata::util::primitives::StateID&gt; for alloc::vec::Vec&lt;T&gt;&gt;::index_mut (2,391,116 samples, 0.22%)</title><rect x="45.8821%" y="277" width="0.2155%" height="15" fill="rgb(224,130,29)" fg:x="508986500" fg:w="2391116"/><text x="46.1321%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2,391,116 samples, 0.22%)</title><rect x="45.8821%" y="261" width="0.2155%" height="15" fill="rgb(235,212,8)" fg:x="508986500" fg:w="2391116"/><text x="46.1321%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2,391,116 samples, 0.22%)</title><rect x="45.8821%" y="245" width="0.2155%" height="15" fill="rgb(223,33,50)" fg:x="508986500" fg:w="2391116"/><text x="46.1321%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (2,391,116 samples, 0.22%)</title><rect x="45.8821%" y="229" width="0.2155%" height="15" fill="rgb(219,149,13)" fg:x="508986500" fg:w="2391116"/><text x="46.1321%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::utf8::Utf8Sequences&gt; (2,342,994 samples, 0.21%)</title><rect x="46.0977%" y="245" width="0.2112%" height="15" fill="rgb(250,156,29)" fg:x="511377616" fg:w="2342994"/><text x="46.3477%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::utf8::ScalarRange&gt;&gt; (2,342,994 samples, 0.21%)</title><rect x="46.0977%" y="229" width="0.2112%" height="15" fill="rgb(216,193,19)" fg:x="511377616" fg:w="2342994"/><text x="46.3477%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_syntax::utf8::ScalarRange&gt;&gt; (2,342,994 samples, 0.21%)</title><rect x="46.0977%" y="213" width="0.2112%" height="15" fill="rgb(216,135,14)" fg:x="511377616" fg:w="2342994"/><text x="46.3477%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,342,994 samples, 0.21%)</title><rect x="46.0977%" y="197" width="0.2112%" height="15" fill="rgb(241,47,5)" fg:x="511377616" fg:w="2342994"/><text x="46.3477%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2,342,994 samples, 0.21%)</title><rect x="46.0977%" y="181" width="0.2112%" height="15" fill="rgb(233,42,35)" fg:x="511377616" fg:w="2342994"/><text x="46.3477%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,342,994 samples, 0.21%)</title><rect x="46.0977%" y="165" width="0.2112%" height="15" fill="rgb(231,13,6)" fg:x="511377616" fg:w="2342994"/><text x="46.3477%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (2,342,994 samples, 0.21%)</title><rect x="46.0977%" y="149" width="0.2112%" height="15" fill="rgb(207,181,40)" fg:x="511377616" fg:w="2342994"/><text x="46.3477%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,342,994 samples, 0.21%)</title><rect x="46.0977%" y="133" width="0.2112%" height="15" fill="rgb(254,173,49)" fg:x="511377616" fg:w="2342994"/><text x="46.3477%" y="143.50"></text></g><g><title>_int_free (2,342,994 samples, 0.21%)</title><rect x="46.0977%" y="117" width="0.2112%" height="15" fill="rgb(221,1,38)" fg:x="511377616" fg:w="2342994"/><text x="46.3477%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (4,897,633 samples, 0.44%)</title><rect x="46.0977%" y="293" width="0.4415%" height="15" fill="rgb(206,124,46)" fg:x="511377616" fg:w="4897633"/><text x="46.3477%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4,897,633 samples, 0.44%)</title><rect x="46.0977%" y="277" width="0.4415%" height="15" fill="rgb(249,21,11)" fg:x="511377616" fg:w="4897633"/><text x="46.3477%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (4,897,633 samples, 0.44%)</title><rect x="46.0977%" y="261" width="0.4415%" height="15" fill="rgb(222,201,40)" fg:x="511377616" fg:w="4897633"/><text x="46.3477%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (2,554,639 samples, 0.23%)</title><rect x="46.3089%" y="245" width="0.2303%" height="15" fill="rgb(235,61,29)" fg:x="513720610" fg:w="2554639"/><text x="46.5589%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2,356,411 samples, 0.21%)</title><rect x="46.5392%" y="293" width="0.2124%" height="15" fill="rgb(219,207,3)" fg:x="516275249" fg:w="2356411"/><text x="46.7892%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add_suffix (2,356,411 samples, 0.21%)</title><rect x="46.5392%" y="277" width="0.2124%" height="15" fill="rgb(222,56,46)" fg:x="516275249" fg:w="2356411"/><text x="46.7892%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,356,411 samples, 0.21%)</title><rect x="46.5392%" y="261" width="0.2124%" height="15" fill="rgb(239,76,54)" fg:x="516275249" fg:w="2356411"/><text x="46.7892%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2,348,662 samples, 0.21%)</title><rect x="46.7516%" y="293" width="0.2117%" height="15" fill="rgb(231,124,27)" fg:x="518631660" fg:w="2348662"/><text x="47.0016%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,348,662 samples, 0.21%)</title><rect x="46.7516%" y="277" width="0.2117%" height="15" fill="rgb(249,195,6)" fg:x="518631660" fg:w="2348662"/><text x="47.0016%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,348,662 samples, 0.21%)</title><rect x="46.7516%" y="261" width="0.2117%" height="15" fill="rgb(237,174,47)" fg:x="518631660" fg:w="2348662"/><text x="47.0016%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (2,348,662 samples, 0.21%)</title><rect x="46.7516%" y="245" width="0.2117%" height="15" fill="rgb(206,201,31)" fg:x="518631660" fg:w="2348662"/><text x="47.0016%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,348,662 samples, 0.21%)</title><rect x="46.7516%" y="229" width="0.2117%" height="15" fill="rgb(231,57,52)" fg:x="518631660" fg:w="2348662"/><text x="47.0016%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,348,662 samples, 0.21%)</title><rect x="46.7516%" y="213" width="0.2117%" height="15" fill="rgb(248,177,22)" fg:x="518631660" fg:w="2348662"/><text x="47.0016%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2,348,662 samples, 0.21%)</title><rect x="46.7516%" y="197" width="0.2117%" height="15" fill="rgb(215,211,37)" fg:x="518631660" fg:w="2348662"/><text x="47.0016%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,348,662 samples, 0.21%)</title><rect x="46.7516%" y="181" width="0.2117%" height="15" fill="rgb(241,128,51)" fg:x="518631660" fg:w="2348662"/><text x="47.0016%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,348,662 samples, 0.21%)</title><rect x="46.7516%" y="165" width="0.2117%" height="15" fill="rgb(227,165,31)" fg:x="518631660" fg:w="2348662"/><text x="47.0016%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,348,662 samples, 0.21%)</title><rect x="46.7516%" y="149" width="0.2117%" height="15" fill="rgb(228,167,24)" fg:x="518631660" fg:w="2348662"/><text x="47.0016%" y="159.50"></text></g><g><title>alloc::alloc::alloc (2,348,662 samples, 0.21%)</title><rect x="46.7516%" y="133" width="0.2117%" height="15" fill="rgb(228,143,12)" fg:x="518631660" fg:w="2348662"/><text x="47.0016%" y="143.50"></text></g><g><title>malloc (2,348,662 samples, 0.21%)</title><rect x="46.7516%" y="117" width="0.2117%" height="15" fill="rgb(249,149,8)" fg:x="518631660" fg:w="2348662"/><text x="47.0016%" y="127.50"></text></g><g><title>_int_malloc (2,348,662 samples, 0.21%)</title><rect x="46.7516%" y="101" width="0.2117%" height="15" fill="rgb(243,35,44)" fg:x="518631660" fg:w="2348662"/><text x="47.0016%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2,546,050 samples, 0.23%)</title><rect x="46.9633%" y="293" width="0.2295%" height="15" fill="rgb(246,89,9)" fg:x="520980322" fg:w="2546050"/><text x="47.2133%" y="303.50"></text></g><g><title>alloc::vec::from_elem (2,546,050 samples, 0.23%)</title><rect x="46.9633%" y="277" width="0.2295%" height="15" fill="rgb(233,213,13)" fg:x="520980322" fg:w="2546050"/><text x="47.2133%" y="287.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2,546,050 samples, 0.23%)</title><rect x="46.9633%" y="261" width="0.2295%" height="15" fill="rgb(233,141,41)" fg:x="520980322" fg:w="2546050"/><text x="47.2133%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2,546,050 samples, 0.23%)</title><rect x="46.9633%" y="245" width="0.2295%" height="15" fill="rgb(239,167,4)" fg:x="520980322" fg:w="2546050"/><text x="47.2133%" y="255.50"></text></g><g><title>core::ptr::write (2,546,050 samples, 0.23%)</title><rect x="46.9633%" y="229" width="0.2295%" height="15" fill="rgb(209,217,16)" fg:x="520980322" fg:w="2546050"/><text x="47.2133%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4,899,507 samples, 0.44%)</title><rect x="47.1928%" y="293" width="0.4417%" height="15" fill="rgb(219,88,35)" fg:x="523526372" fg:w="4899507"/><text x="47.4428%" y="303.50"></text></g><g><title>regex_automata::util::alphabet::ByteClassSet::set_range (2,383,330 samples, 0.21%)</title><rect x="47.4196%" y="277" width="0.2148%" height="15" fill="rgb(220,193,23)" fg:x="526042549" fg:w="2383330"/><text x="47.6696%" y="287.50"></text></g><g><title>regex_automata::util::alphabet::ByteSet::add (2,383,330 samples, 0.21%)</title><rect x="47.4196%" y="261" width="0.2148%" height="15" fill="rgb(230,90,52)" fg:x="526042549" fg:w="2383330"/><text x="47.6696%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (2,542,425 samples, 0.23%)</title><rect x="47.6345%" y="293" width="0.2292%" height="15" fill="rgb(252,106,19)" fg:x="528425879" fg:w="2542425"/><text x="47.8845%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,542,425 samples, 0.23%)</title><rect x="47.6345%" y="277" width="0.2292%" height="15" fill="rgb(206,74,20)" fg:x="528425879" fg:w="2542425"/><text x="47.8845%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (2,542,425 samples, 0.23%)</title><rect x="47.6345%" y="261" width="0.2292%" height="15" fill="rgb(230,138,44)" fg:x="528425879" fg:w="2542425"/><text x="47.8845%" y="271.50"></text></g><g><title>core::ptr::write (2,542,425 samples, 0.23%)</title><rect x="47.6345%" y="245" width="0.2292%" height="15" fill="rgb(235,182,43)" fg:x="528425879" fg:w="2542425"/><text x="47.8845%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2,397,354 samples, 0.22%)</title><rect x="47.8637%" y="293" width="0.2161%" height="15" fill="rgb(242,16,51)" fg:x="530968304" fg:w="2397354"/><text x="48.1137%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::State::is_epsilon (2,397,354 samples, 0.22%)</title><rect x="47.8637%" y="277" width="0.2161%" height="15" fill="rgb(248,9,4)" fg:x="530968304" fg:w="2397354"/><text x="48.1137%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2,553,296 samples, 0.23%)</title><rect x="48.0798%" y="293" width="0.2302%" height="15" fill="rgb(210,31,22)" fg:x="533365658" fg:w="2553296"/><text x="48.3298%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (2,553,296 samples, 0.23%)</title><rect x="48.0798%" y="277" width="0.2302%" height="15" fill="rgb(239,54,39)" fg:x="533365658" fg:w="2553296"/><text x="48.3298%" y="287.50"></text></g><g><title>regex_syntax::hir::Properties::empty (2,553,296 samples, 0.23%)</title><rect x="48.0798%" y="261" width="0.2302%" height="15" fill="rgb(230,99,41)" fg:x="533365658" fg:w="2553296"/><text x="48.3298%" y="271.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2,553,296 samples, 0.23%)</title><rect x="48.0798%" y="245" width="0.2302%" height="15" fill="rgb(253,106,12)" fg:x="533365658" fg:w="2553296"/><text x="48.3298%" y="255.50"></text></g><g><title>alloc::alloc::exchange_malloc (2,553,296 samples, 0.23%)</title><rect x="48.0798%" y="229" width="0.2302%" height="15" fill="rgb(213,46,41)" fg:x="533365658" fg:w="2553296"/><text x="48.3298%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,553,296 samples, 0.23%)</title><rect x="48.0798%" y="213" width="0.2302%" height="15" fill="rgb(215,133,35)" fg:x="533365658" fg:w="2553296"/><text x="48.3298%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,553,296 samples, 0.23%)</title><rect x="48.0798%" y="197" width="0.2302%" height="15" fill="rgb(213,28,5)" fg:x="533365658" fg:w="2553296"/><text x="48.3298%" y="207.50"></text></g><g><title>alloc::alloc::alloc (2,553,296 samples, 0.23%)</title><rect x="48.0798%" y="181" width="0.2302%" height="15" fill="rgb(215,77,49)" fg:x="533365658" fg:w="2553296"/><text x="48.3298%" y="191.50"></text></g><g><title>malloc (2,553,296 samples, 0.23%)</title><rect x="48.0798%" y="165" width="0.2302%" height="15" fill="rgb(248,100,22)" fg:x="533365658" fg:w="2553296"/><text x="48.3298%" y="175.50"></text></g><g><title>_int_malloc (2,553,296 samples, 0.23%)</title><rect x="48.0798%" y="149" width="0.2302%" height="15" fill="rgb(208,67,9)" fg:x="533365658" fg:w="2553296"/><text x="48.3298%" y="159.50"></text></g><g><title>stream_scan_identifier (809,456 samples, 0.07%)</title><rect x="48.3099%" y="293" width="0.0730%" height="15" fill="rgb(219,133,21)" fg:x="535918954" fg:w="809456"/><text x="48.5599%" y="303.50"></text></g><g><title>tree_sitter::Query::from_raw_parts (2,440,894 samples, 0.22%)</title><rect x="48.3829%" y="293" width="0.2200%" height="15" fill="rgb(246,46,29)" fg:x="536728410" fg:w="2440894"/><text x="48.6329%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (2,440,894 samples, 0.22%)</title><rect x="48.3829%" y="277" width="0.2200%" height="15" fill="rgb(246,185,52)" fg:x="536728410" fg:w="2440894"/><text x="48.6329%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (2,440,894 samples, 0.22%)</title><rect x="48.3829%" y="261" width="0.2200%" height="15" fill="rgb(252,136,11)" fg:x="536728410" fg:w="2440894"/><text x="48.6329%" y="271.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (2,440,894 samples, 0.22%)</title><rect x="48.3829%" y="245" width="0.2200%" height="15" fill="rgb(219,138,53)" fg:x="536728410" fg:w="2440894"/><text x="48.6329%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,440,894 samples, 0.22%)</title><rect x="48.3829%" y="229" width="0.2200%" height="15" fill="rgb(211,51,23)" fg:x="536728410" fg:w="2440894"/><text x="48.6329%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,440,894 samples, 0.22%)</title><rect x="48.3829%" y="213" width="0.2200%" height="15" fill="rgb(247,221,28)" fg:x="536728410" fg:w="2440894"/><text x="48.6329%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,440,894 samples, 0.22%)</title><rect x="48.3829%" y="197" width="0.2200%" height="15" fill="rgb(251,222,45)" fg:x="536728410" fg:w="2440894"/><text x="48.6329%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2,440,894 samples, 0.22%)</title><rect x="48.3829%" y="181" width="0.2200%" height="15" fill="rgb(217,162,53)" fg:x="536728410" fg:w="2440894"/><text x="48.6329%" y="191.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (2,440,894 samples, 0.22%)</title><rect x="48.3829%" y="165" width="0.2200%" height="15" fill="rgb(229,93,14)" fg:x="536728410" fg:w="2440894"/><text x="48.6329%" y="175.50"></text></g><g><title>[unknown] (5,112,890 samples, 0.46%)</title><rect x="49.4681%" y="245" width="0.4609%" height="15" fill="rgb(209,67,49)" fg:x="548766958" fg:w="5112890"/><text x="49.7181%" y="255.50"></text></g><g><title>ts_query__perform_analysis (5,112,890 samples, 0.46%)</title><rect x="49.4681%" y="229" width="0.4609%" height="15" fill="rgb(213,87,29)" fg:x="548766958" fg:w="5112890"/><text x="49.7181%" y="239.50"></text></g><g><title>analysis_state_set__insert_sorted (2,552,772 samples, 0.23%)</title><rect x="49.6989%" y="213" width="0.2301%" height="15" fill="rgb(205,151,52)" fg:x="551327076" fg:w="2552772"/><text x="49.9489%" y="223.50"></text></g><g><title>analysis_state_set__push (2,561,893 samples, 0.23%)</title><rect x="49.9290%" y="245" width="0.2309%" height="15" fill="rgb(253,215,39)" fg:x="553879848" fg:w="2561893"/><text x="50.1790%" y="255.50"></text></g><g><title>analysis_state_pool__clone_or_reuse (2,561,893 samples, 0.23%)</title><rect x="49.9290%" y="229" width="0.2309%" height="15" fill="rgb(221,220,41)" fg:x="553879848" fg:w="2561893"/><text x="50.1790%" y="239.50"></text></g><g><title>state_predecessor_map_add (5,378,967 samples, 0.48%)</title><rect x="50.1599%" y="245" width="0.4849%" height="15" fill="rgb(218,133,21)" fg:x="556441741" fg:w="5378967"/><text x="50.4099%" y="255.50"></text></g><g><title>ts_lookahead_iterator__next (2,127,620 samples, 0.19%)</title><rect x="50.6448%" y="245" width="0.1918%" height="15" fill="rgb(221,193,43)" fg:x="561820708" fg:w="2127620"/><text x="50.8948%" y="255.50"></text></g><g><title>analysis_state__recursion_depth (21,865,855 samples, 1.97%)</title><rect x="74.4315%" y="229" width="1.9711%" height="15" fill="rgb(240,128,52)" fg:x="825694821" fg:w="21865855"/><text x="74.6815%" y="239.50">a..</text></g><g><title>analysis_state__top (7,054,524 samples, 0.64%)</title><rect x="76.4026%" y="229" width="0.6359%" height="15" fill="rgb(253,114,12)" fg:x="847560676" fg:w="7054524"/><text x="76.6526%" y="239.50"></text></g><g><title>_array__splice (8,434,983 samples, 0.76%)</title><rect x="79.3652%" y="213" width="0.7604%" height="15" fill="rgb(215,223,47)" fg:x="880425343" fg:w="8434983"/><text x="79.6152%" y="223.50"></text></g><g><title>memmove (8,434,983 samples, 0.76%)</title><rect x="79.3652%" y="197" width="0.7604%" height="15" fill="rgb(248,225,23)" fg:x="880425343" fg:w="8434983"/><text x="79.6152%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (5,872,427 samples, 0.53%)</title><rect x="79.5962%" y="181" width="0.5294%" height="15" fill="rgb(250,108,0)" fg:x="882987899" fg:w="5872427"/><text x="79.8462%" y="191.50"></text></g><g><title>analysis_state__compare (32,688,896 samples, 2.95%)</title><rect x="80.1255%" y="197" width="2.9467%" height="15" fill="rgb(228,208,7)" fg:x="888860326" fg:w="32688896"/><text x="80.3755%" y="207.50">an..</text></g><g><title>analysis_state_set__insert_sorted (100,756,714 samples, 9.08%)</title><rect x="77.0385%" y="229" width="9.0826%" height="15" fill="rgb(244,45,10)" fg:x="854615200" fg:w="100756714"/><text x="77.2885%" y="239.50">analysis_stat..</text></g><g><title>analysis_state__compare (66,511,588 samples, 6.00%)</title><rect x="80.1255%" y="213" width="5.9956%" height="15" fill="rgb(207,125,25)" fg:x="888860326" fg:w="66511588"/><text x="80.3755%" y="223.50">analysis..</text></g><g><title>analysis_state__compare_position (33,822,692 samples, 3.05%)</title><rect x="83.0722%" y="197" width="3.0489%" height="15" fill="rgb(210,195,18)" fg:x="921549222" fg:w="33822692"/><text x="83.3222%" y="207.50">ana..</text></g><g><title>analysis_subgraph_node__compare (50,508,816 samples, 4.55%)</title><rect x="86.1212%" y="229" width="4.5531%" height="15" fill="rgb(249,80,12)" fg:x="955371914" fg:w="50508816"/><text x="86.3712%" y="239.50">analy..</text></g><g><title>ts_language_alias_at (1,931,535 samples, 0.17%)</title><rect x="90.6742%" y="229" width="0.1741%" height="15" fill="rgb(221,65,9)" fg:x="1005880730" fg:w="1931535"/><text x="90.9242%" y="239.50"></text></g><g><title>ts_language_alias_at (1,931,535 samples, 0.17%)</title><rect x="90.6742%" y="213" width="0.1741%" height="15" fill="rgb(235,49,36)" fg:x="1005880730" fg:w="1931535"/><text x="90.9242%" y="223.50"></text></g><g><title>ts_language_field_map (2,233,761 samples, 0.20%)</title><rect x="90.8483%" y="229" width="0.2014%" height="15" fill="rgb(225,32,20)" fg:x="1007812265" fg:w="2233761"/><text x="91.0983%" y="239.50"></text></g><g><title>ts_language_field_map (2,233,761 samples, 0.20%)</title><rect x="90.8483%" y="213" width="0.2014%" height="15" fill="rgb(215,141,46)" fg:x="1007812265" fg:w="2233761"/><text x="91.0983%" y="223.50"></text></g><g><title>ts_language_lookaheads (2,551,288 samples, 0.23%)</title><rect x="91.0497%" y="229" width="0.2300%" height="15" fill="rgb(250,160,47)" fg:x="1010046026" fg:w="2551288"/><text x="91.2997%" y="239.50"></text></g><g><title>ts_query__analyze_patterns (564,575,815 samples, 50.89%)</title><rect x="48.6029%" y="261" width="50.8932%" height="15" fill="rgb(216,222,40)" fg:x="539169304" fg:w="564575815"/><text x="48.8529%" y="271.50">ts_query__analyze_patterns</text></g><g><title>ts_query__perform_analysis (539,796,791 samples, 48.66%)</title><rect x="50.8366%" y="245" width="48.6595%" height="15" fill="rgb(234,217,39)" fg:x="563948328" fg:w="539796791"/><text x="51.0866%" y="255.50">ts_query__perform_analysis</text></g><g><title>ts_lookahead_iterator__next (91,147,805 samples, 8.22%)</title><rect x="91.2797%" y="229" width="8.2164%" height="15" fill="rgb(207,178,40)" fg:x="1012597314" fg:w="91147805"/><text x="91.5297%" y="239.50">ts_lookahea..</text></g><g><title>ts_language_symbol_for_name (612,804 samples, 0.06%)</title><rect x="99.4961%" y="245" width="0.0552%" height="15" fill="rgb(221,136,13)" fg:x="1103745119" fg:w="612804"/><text x="99.7461%" y="255.50"></text></g><g><title>__strncmp_avx2 (612,804 samples, 0.06%)</title><rect x="99.4961%" y="229" width="0.0552%" height="15" fill="rgb(249,199,10)" fg:x="1103745119" fg:w="612804"/><text x="99.7461%" y="239.50"></text></g><g><title>tree_sitter::Query::new (565,685,481 samples, 50.99%)</title><rect x="48.6029%" y="293" width="50.9932%" height="15" fill="rgb(249,222,13)" fg:x="539169304" fg:w="565685481"/><text x="48.8529%" y="303.50">tree_sitter::Query::new</text></g><g><title>ts_query_new (565,685,481 samples, 50.99%)</title><rect x="48.6029%" y="277" width="50.9932%" height="15" fill="rgb(244,185,38)" fg:x="539169304" fg:w="565685481"/><text x="48.8529%" y="287.50">ts_query_new</text></g><g><title>ts_query__parse_pattern (1,109,666 samples, 0.10%)</title><rect x="99.4961%" y="261" width="0.1000%" height="15" fill="rgb(236,202,9)" fg:x="1103745119" fg:w="1109666"/><text x="99.7461%" y="271.50"></text></g><g><title>ts_query__parse_pattern (496,862 samples, 0.04%)</title><rect x="99.5514%" y="245" width="0.0448%" height="15" fill="rgb(250,229,37)" fg:x="1104357923" fg:w="496862"/><text x="99.8014%" y="255.50"></text></g><g><title>ts_query__parse_pattern (496,862 samples, 0.04%)</title><rect x="99.5514%" y="229" width="0.0448%" height="15" fill="rgb(206,174,23)" fg:x="1104357923" fg:w="496862"/><text x="99.8014%" y="239.50"></text></g><g><title>ts_query__parse_pattern (496,862 samples, 0.04%)</title><rect x="99.5514%" y="213" width="0.0448%" height="15" fill="rgb(211,33,43)" fg:x="1104357923" fg:w="496862"/><text x="99.8014%" y="223.50"></text></g><g><title>ts_language_symbol_for_name (496,862 samples, 0.04%)</title><rect x="99.5514%" y="197" width="0.0448%" height="15" fill="rgb(245,58,50)" fg:x="1104357923" fg:w="496862"/><text x="99.8014%" y="207.50"></text></g><g><title>__strncmp_avx2 (496,862 samples, 0.04%)</title><rect x="99.5514%" y="181" width="0.0448%" height="15" fill="rgb(244,68,36)" fg:x="1104357923" fg:w="496862"/><text x="99.8014%" y="191.50"></text></g><g><title>ts_query__perform_analysis (2,536,532 samples, 0.23%)</title><rect x="99.5962%" y="293" width="0.2287%" height="15" fill="rgb(232,229,15)" fg:x="1104854785" fg:w="2536532"/><text x="99.8462%" y="303.50"></text></g><g><title>ts_realloc_default (1,416,141 samples, 0.13%)</title><rect x="99.8248%" y="293" width="0.1277%" height="15" fill="rgb(254,30,23)" fg:x="1107391317" fg:w="1416141"/><text x="100.0748%" y="303.50"></text></g><g><title>realloc (1,416,141 samples, 0.13%)</title><rect x="99.8248%" y="277" width="0.1277%" height="15" fill="rgb(235,160,14)" fg:x="1107391317" fg:w="1416141"/><text x="100.0748%" y="287.50"></text></g><g><title>_int_realloc (1,416,141 samples, 0.13%)</title><rect x="99.8248%" y="261" width="0.1277%" height="15" fill="rgb(212,155,44)" fg:x="1107391317" fg:w="1416141"/><text x="100.0748%" y="271.50"></text></g><g><title>_int_free (1,416,141 samples, 0.13%)</title><rect x="99.8248%" y="245" width="0.1277%" height="15" fill="rgb(226,2,50)" fg:x="1107391317" fg:w="1416141"/><text x="100.0748%" y="255.50"></text></g><g><title>all (1,109,334,776 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(234,177,6)" fg:x="0" fg:w="1109334776"/><text x="0.2500%" y="335.50"></text></g><g><title>kaka-nest (1,109,334,776 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(217,24,9)" fg:x="0" fg:w="1109334776"/><text x="0.2500%" y="319.50">kaka-nest</text></g><g><title>unsafe_libyaml::api::yaml_string_extend (527,318 samples, 0.05%)</title><rect x="99.9525%" y="293" width="0.0475%" height="15" fill="rgb(220,13,46)" fg:x="1108807458" fg:w="527318"/><text x="100.2025%" y="303.50"></text></g><g><title>unsafe_libyaml::externs::memset (527,318 samples, 0.05%)</title><rect x="99.9525%" y="277" width="0.0475%" height="15" fill="rgb(239,221,27)" fg:x="1108807458" fg:w="527318"/><text x="100.2025%" y="287.50"></text></g><g><title>core::ptr::write_bytes (527,318 samples, 0.05%)</title><rect x="99.9525%" y="261" width="0.0475%" height="15" fill="rgb(222,198,25)" fg:x="1108807458" fg:w="527318"/><text x="100.2025%" y="271.50"></text></g><g><title>__memset_avx2_unaligned_erms (527,318 samples, 0.05%)</title><rect x="99.9525%" y="245" width="0.0475%" height="15" fill="rgb(211,99,13)" fg:x="1108807458" fg:w="527318"/><text x="100.2025%" y="255.50"></text></g></svg></svg>