<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1590" onload="init(evt)" viewBox="0 0 1200 1590" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1590" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1573.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1573.00"> </text><svg id="frames" x="10" width="1180" total_samples="776350249"><g><title>&lt;kaka_nest::HANDLEBARS as core::ops::deref::Deref&gt;::deref (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="1221" width="0.6691%" height="15" fill="rgb(227,0,7)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="1231.50"></text></g><g><title>&lt;kaka_nest::HANDLEBARS as core::ops::deref::Deref&gt;::deref::__stability (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="1205" width="0.6691%" height="15" fill="rgb(217,0,24)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="1215.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="1189" width="0.6691%" height="15" fill="rgb(221,193,54)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="1199.50"></text></g><g><title>std::sync::poison::once::Once::call_once (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="1173" width="0.6691%" height="15" fill="rgb(248,212,6)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="1183.50"></text></g><g><title>std::sys::sync::once::futex::Once::call (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="1157" width="0.6691%" height="15" fill="rgb(208,68,35)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="1167.50"></text></g><g><title>std::sync::poison::once::Once::call_once::{{closure}} (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="1141" width="0.6691%" height="15" fill="rgb(232,128,0)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="1151.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="1125" width="0.6691%" height="15" fill="rgb(207,160,47)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="1135.50"></text></g><g><title>core::ops::function::FnOnce::call_once (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="1109" width="0.6691%" height="15" fill="rgb(228,23,34)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="1119.50"></text></g><g><title>&lt;kaka_nest::HANDLEBARS as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="1093" width="0.6691%" height="15" fill="rgb(218,30,26)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="1103.50"></text></g><g><title>handlebars::registry::Registry::register_template_file (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="1077" width="0.6691%" height="15" fill="rgb(220,122,19)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="1087.50"></text></g><g><title>handlebars::registry::Registry::register_template_string (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="1061" width="0.6691%" height="15" fill="rgb(250,228,42)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="1071.50"></text></g><g><title>handlebars::template::Template::compile2 (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="1045" width="0.6691%" height="15" fill="rgb(240,193,28)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="1055.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="1029" width="0.6691%" height="15" fill="rgb(216,20,37)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="1039.50"></text></g><g><title>pest::parser_state::state (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="1013" width="0.6691%" height="15" fill="rgb(206,188,39)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="1023.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::{{closure}} (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="997" width="0.6691%" height="15" fill="rgb(217,207,13)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="1007.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::handlebars (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="981" width="0.6691%" height="15" fill="rgb(231,73,38)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="991.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="965" width="0.6691%" height="15" fill="rgb(225,20,46)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="975.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::handlebars::{{closure}} (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="949" width="0.6691%" height="15" fill="rgb(210,31,41)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="959.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="933" width="0.6691%" height="15" fill="rgb(221,200,47)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="943.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::rule (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="917" width="0.6691%" height="15" fill="rgb(226,26,5)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="927.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}} (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="901" width="0.6691%" height="15" fill="rgb(249,33,26)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="911.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="885" width="0.6691%" height="15" fill="rgb(235,183,28)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="895.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}} (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="869" width="0.6691%" height="15" fill="rgb(221,5,38)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="879.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::optional (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="853" width="0.6691%" height="15" fill="rgb(247,18,42)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="863.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::template::{{closure}}::{{closure}}::{{closure}} (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="837" width="0.6691%" height="15" fill="rgb(241,131,45)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="847.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="821" width="0.6691%" height="15" fill="rgb(249,31,29)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="831.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::atomic (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="805" width="0.6691%" height="15" fill="rgb(225,111,53)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="815.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}} (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="789" width="0.6691%" height="15" fill="rgb(238,160,17)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="799.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::rule (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="773" width="0.6691%" height="15" fill="rgb(214,148,48)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="783.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}}::{{closure}} (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="757" width="0.6691%" height="15" fill="rgb(232,36,49)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="767.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::sequence (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="741" width="0.6691%" height="15" fill="rgb(209,103,24)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="751.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}}::{{closure}}::{{closure}} (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="725" width="0.6691%" height="15" fill="rgb(229,88,8)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="709" width="0.6691%" height="15" fill="rgb(213,181,19)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="719.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}}::{{closure}}::{{closure}}::{{closure}} (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="693" width="0.6691%" height="15" fill="rgb(254,191,54)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="703.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::repeat (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="677" width="0.6691%" height="15" fill="rgb(241,83,37)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="687.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::raw_text::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="661" width="0.6691%" height="15" fill="rgb(233,36,39)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="671.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::escape (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="645" width="0.6691%" height="15" fill="rgb(226,3,54)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="655.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::rule (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="629" width="0.6691%" height="15" fill="rgb(245,192,40)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="639.50"></text></g><g><title>&lt;handlebars::grammar::HandlebarsParser as pest::parser::Parser&lt;handlebars::grammar::Rule&gt;&gt;::parse::rules::visible::escape::{{closure}} (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="613" width="0.6691%" height="15" fill="rgb(238,167,29)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="623.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::atomic (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="597" width="0.6691%" height="15" fill="rgb(232,182,51)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="607.50"></text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::inc_call_check_limit (5,194,828 samples, 0.67%)</title><rect x="0.0070%" y="581" width="0.6691%" height="15" fill="rgb(231,60,39)" fg:x="54622" fg:w="5194828"/><text x="0.2570%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (5,218,223 samples, 0.67%)</title><rect x="0.6762%" y="1013" width="0.6721%" height="15" fill="rgb(208,69,12)" fg:x="5249450" fg:w="5218223"/><text x="0.9262%" y="1023.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (5,218,223 samples, 0.67%)</title><rect x="0.6762%" y="997" width="0.6721%" height="15" fill="rgb(235,93,37)" fg:x="5249450" fg:w="5218223"/><text x="0.9262%" y="1007.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (5,218,223 samples, 0.67%)</title><rect x="0.6762%" y="981" width="0.6721%" height="15" fill="rgb(213,116,39)" fg:x="5249450" fg:w="5218223"/><text x="0.9262%" y="991.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,218,223 samples, 0.67%)</title><rect x="0.6762%" y="965" width="0.6721%" height="15" fill="rgb(222,207,29)" fg:x="5249450" fg:w="5218223"/><text x="0.9262%" y="975.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,218,223 samples, 0.67%)</title><rect x="0.6762%" y="949" width="0.6721%" height="15" fill="rgb(206,96,30)" fg:x="5249450" fg:w="5218223"/><text x="0.9262%" y="959.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5,218,223 samples, 0.67%)</title><rect x="0.6762%" y="933" width="0.6721%" height="15" fill="rgb(218,138,4)" fg:x="5249450" fg:w="5218223"/><text x="0.9262%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (5,218,223 samples, 0.67%)</title><rect x="0.6762%" y="917" width="0.6721%" height="15" fill="rgb(250,191,14)" fg:x="5249450" fg:w="5218223"/><text x="0.9262%" y="927.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (5,218,223 samples, 0.67%)</title><rect x="0.6762%" y="901" width="0.6721%" height="15" fill="rgb(239,60,40)" fg:x="5249450" fg:w="5218223"/><text x="0.9262%" y="911.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (5,218,223 samples, 0.67%)</title><rect x="0.6762%" y="885" width="0.6721%" height="15" fill="rgb(206,27,48)" fg:x="5249450" fg:w="5218223"/><text x="0.9262%" y="895.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (5,218,223 samples, 0.67%)</title><rect x="0.6762%" y="869" width="0.6721%" height="15" fill="rgb(225,35,8)" fg:x="5249450" fg:w="5218223"/><text x="0.9262%" y="879.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (5,218,223 samples, 0.67%)</title><rect x="0.6762%" y="853" width="0.6721%" height="15" fill="rgb(250,213,24)" fg:x="5249450" fg:w="5218223"/><text x="0.9262%" y="863.50"></text></g><g><title>tree_sitter::Query::from_raw_parts (10,416,413 samples, 1.34%)</title><rect x="0.6762%" y="1029" width="1.3417%" height="15" fill="rgb(247,123,22)" fg:x="5249450" fg:w="10416413"/><text x="0.9262%" y="1039.50"></text></g><g><title>regex::regex::bytes::Regex::new (5,198,190 samples, 0.67%)</title><rect x="1.3483%" y="1013" width="0.6696%" height="15" fill="rgb(231,138,38)" fg:x="10467673" fg:w="5198190"/><text x="1.5983%" y="1023.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::build (5,198,190 samples, 0.67%)</title><rect x="1.3483%" y="997" width="0.6696%" height="15" fill="rgb(231,145,46)" fg:x="10467673" fg:w="5198190"/><text x="1.5983%" y="1007.50"></text></g><g><title>regex::builders::Builder::build_one_bytes (5,198,190 samples, 0.67%)</title><rect x="1.3483%" y="981" width="0.6696%" height="15" fill="rgb(251,118,11)" fg:x="10467673" fg:w="5198190"/><text x="1.5983%" y="991.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (5,198,190 samples, 0.67%)</title><rect x="1.3483%" y="965" width="0.6696%" height="15" fill="rgb(217,147,25)" fg:x="10467673" fg:w="5198190"/><text x="1.5983%" y="975.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (5,198,190 samples, 0.67%)</title><rect x="1.3483%" y="949" width="0.6696%" height="15" fill="rgb(247,81,37)" fg:x="10467673" fg:w="5198190"/><text x="1.5983%" y="959.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (5,198,190 samples, 0.67%)</title><rect x="1.3483%" y="933" width="0.6696%" height="15" fill="rgb(209,12,38)" fg:x="10467673" fg:w="5198190"/><text x="1.5983%" y="943.50"></text></g><g><title>regex_automata::meta::strategy::new (5,198,190 samples, 0.67%)</title><rect x="1.3483%" y="917" width="0.6696%" height="15" fill="rgb(227,1,9)" fg:x="10467673" fg:w="5198190"/><text x="1.5983%" y="927.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (5,198,190 samples, 0.67%)</title><rect x="1.3483%" y="901" width="0.6696%" height="15" fill="rgb(248,47,43)" fg:x="10467673" fg:w="5198190"/><text x="1.5983%" y="911.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5,198,190 samples, 0.67%)</title><rect x="1.3483%" y="885" width="0.6696%" height="15" fill="rgb(221,10,30)" fg:x="10467673" fg:w="5198190"/><text x="1.5983%" y="895.50"></text></g><g><title>regex_automata::meta::wrappers::HybridEngine::new (5,198,190 samples, 0.67%)</title><rect x="1.3483%" y="869" width="0.6696%" height="15" fill="rgb(210,229,1)" fg:x="10467673" fg:w="5198190"/><text x="1.5983%" y="879.50"></text></g><g><title>&lt;regex_automata::nfa::thompson::nfa::NFA as core::clone::Clone&gt;::clone (5,198,190 samples, 0.67%)</title><rect x="1.3483%" y="853" width="0.6696%" height="15" fill="rgb(222,148,37)" fg:x="10467673" fg:w="5198190"/><text x="1.5983%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (5,198,190 samples, 0.67%)</title><rect x="1.3483%" y="837" width="0.6696%" height="15" fill="rgb(234,67,33)" fg:x="10467673" fg:w="5198190"/><text x="1.5983%" y="847.50"></text></g><g><title>analysis_state_set__push (10,293,795 samples, 1.33%)</title><rect x="4.0283%" y="997" width="1.3259%" height="15" fill="rgb(247,98,35)" fg:x="31274044" fg:w="10293795"/><text x="4.2783%" y="1007.50"></text></g><g><title>analysis_state_pool__clone_or_reuse (10,293,795 samples, 1.33%)</title><rect x="4.0283%" y="981" width="1.3259%" height="15" fill="rgb(247,138,52)" fg:x="31274044" fg:w="10293795"/><text x="4.2783%" y="991.50"></text></g><g><title>analysis_subgraph_node__compare (4,665,616 samples, 0.60%)</title><rect x="5.3543%" y="997" width="0.6010%" height="15" fill="rgb(213,79,30)" fg:x="41567839" fg:w="4665616"/><text x="5.6043%" y="1007.50"></text></g><g><title>ts_lookahead_iterator__next (9,335,972 samples, 1.20%)</title><rect x="5.9552%" y="997" width="1.2025%" height="15" fill="rgb(246,177,23)" fg:x="46233455" fg:w="9335972"/><text x="6.2052%" y="1007.50"></text></g><g><title>analysis_state__recursion_depth (15,549,795 samples, 2.00%)</title><rect x="45.8746%" y="981" width="2.0029%" height="15" fill="rgb(230,62,27)" fg:x="356147656" fg:w="15549795"/><text x="46.1246%" y="991.50">a..</text></g><g><title>analysis_state__top (9,657,039 samples, 1.24%)</title><rect x="47.8775%" y="981" width="1.2439%" height="15" fill="rgb(216,154,8)" fg:x="371697451" fg:w="9657039"/><text x="48.1275%" y="991.50"></text></g><g><title>analysis_state__compare (25,261,996 samples, 3.25%)</title><rect x="54.1859%" y="949" width="3.2539%" height="15" fill="rgb(244,35,45)" fg:x="420672208" fg:w="25261996"/><text x="54.4359%" y="959.50">ana..</text></g><g><title>analysis_state__compare (112,564,824 samples, 14.50%)</title><rect x="54.1859%" y="965" width="14.4992%" height="15" fill="rgb(251,115,12)" fg:x="420672208" fg:w="112564824"/><text x="54.4359%" y="975.50">analysis_state__compare</text></g><g><title>analysis_state__compare_position (87,302,828 samples, 11.25%)</title><rect x="57.4398%" y="949" width="11.2453%" height="15" fill="rgb(240,54,50)" fg:x="445934204" fg:w="87302828"/><text x="57.6898%" y="959.50">analysis_state__c..</text></g><g><title>analysis_state_set__insert_sorted (162,288,854 samples, 20.90%)</title><rect x="49.1214%" y="981" width="20.9041%" height="15" fill="rgb(233,84,52)" fg:x="381354490" fg:w="162288854"/><text x="49.3714%" y="991.50">analysis_state_set__insert_sorted</text></g><g><title>analysis_state_pool__clone_or_reuse (10,406,312 samples, 1.34%)</title><rect x="68.6851%" y="965" width="1.3404%" height="15" fill="rgb(207,117,47)" fg:x="533237032" fg:w="10406312"/><text x="68.9351%" y="975.50"></text></g><g><title>analysis_subgraph_node__compare (71,297,619 samples, 9.18%)</title><rect x="70.0255%" y="981" width="9.1837%" height="15" fill="rgb(249,43,39)" fg:x="543643344" fg:w="71297619"/><text x="70.2755%" y="991.50">analysis_subg..</text></g><g><title>ts_language_alias_at (5,190,678 samples, 0.67%)</title><rect x="79.2092%" y="981" width="0.6686%" height="15" fill="rgb(209,38,44)" fg:x="614940963" fg:w="5190678"/><text x="79.4592%" y="991.50"></text></g><g><title>ts_language_field_map (5,047,848 samples, 0.65%)</title><rect x="79.8778%" y="981" width="0.6502%" height="15" fill="rgb(236,212,23)" fg:x="620131641" fg:w="5047848"/><text x="80.1278%" y="991.50"></text></g><g><title>ts_language_field_map (5,047,848 samples, 0.65%)</title><rect x="79.8778%" y="965" width="0.6502%" height="15" fill="rgb(242,79,21)" fg:x="620131641" fg:w="5047848"/><text x="80.1278%" y="975.50"></text></g><g><title>&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language (699,727,836 samples, 90.13%)</title><rect x="0.6762%" y="1189" width="90.1304%" height="15" fill="rgb(211,96,35)" fg:x="5249450" fg:w="699727836"/><text x="0.9262%" y="1199.50">&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (699,727,836 samples, 90.13%)</title><rect x="0.6762%" y="1173" width="90.1304%" height="15" fill="rgb(253,215,40)" fg:x="5249450" fg:w="699727836"/><text x="0.9262%" y="1183.50">once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (699,727,836 samples, 90.13%)</title><rect x="0.6762%" y="1157" width="90.1304%" height="15" fill="rgb(211,81,21)" fg:x="5249450" fg:w="699727836"/><text x="0.9262%" y="1167.50">once_cell::imp::OnceCell&lt;T&gt;::initialize</text></g><g><title>once_cell::imp::initialize_or_wait (699,727,836 samples, 90.13%)</title><rect x="0.6762%" y="1141" width="90.1304%" height="15" fill="rgb(208,190,38)" fg:x="5249450" fg:w="699727836"/><text x="0.9262%" y="1151.50">once_cell::imp::initialize_or_wait</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (699,727,836 samples, 90.13%)</title><rect x="0.6762%" y="1125" width="90.1304%" height="15" fill="rgb(235,213,38)" fg:x="5249450" fg:w="699727836"/><text x="0.9262%" y="1135.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (699,727,836 samples, 90.13%)</title><rect x="0.6762%" y="1109" width="90.1304%" height="15" fill="rgb(237,122,38)" fg:x="5249450" fg:w="699727836"/><text x="0.9262%" y="1119.50">once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}}</text></g><g><title>&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language::{{closure}} (699,727,836 samples, 90.13%)</title><rect x="0.6762%" y="1093" width="90.1304%" height="15" fill="rgb(244,218,35)" fg:x="5249450" fg:w="699727836"/><text x="0.9262%" y="1103.50">&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language::{{closure}}</text></g><g><title>syntastica_parsers::Lang::get_config (699,727,836 samples, 90.13%)</title><rect x="0.6762%" y="1077" width="90.1304%" height="15" fill="rgb(240,68,47)" fg:x="5249450" fg:w="699727836"/><text x="0.9262%" y="1087.50">syntastica_parsers::Lang::get_config</text></g><g><title>syntastica_highlight::HighlightConfiguration::new (699,727,836 samples, 90.13%)</title><rect x="0.6762%" y="1061" width="90.1304%" height="15" fill="rgb(210,16,53)" fg:x="5249450" fg:w="699727836"/><text x="0.9262%" y="1071.50">syntastica_highlight::HighlightConfiguration::new</text></g><g><title>tree_sitter::Query::new (699,727,836 samples, 90.13%)</title><rect x="0.6762%" y="1045" width="90.1304%" height="15" fill="rgb(235,124,12)" fg:x="5249450" fg:w="699727836"/><text x="0.9262%" y="1055.50">tree_sitter::Query::new</text></g><g><title>ts_query_new (689,311,423 samples, 88.79%)</title><rect x="2.0179%" y="1029" width="88.7887%" height="15" fill="rgb(224,169,11)" fg:x="15665863" fg:w="689311423"/><text x="2.2679%" y="1039.50">ts_query_new</text></g><g><title>ts_query__analyze_patterns (689,311,423 samples, 88.79%)</title><rect x="2.0179%" y="1013" width="88.7887%" height="15" fill="rgb(250,166,2)" fg:x="15665863" fg:w="689311423"/><text x="2.2679%" y="1023.50">ts_query__analyze_patterns</text></g><g><title>ts_query__perform_analysis (649,407,859 samples, 83.65%)</title><rect x="7.1578%" y="997" width="83.6488%" height="15" fill="rgb(242,216,29)" fg:x="55569427" fg:w="649407859"/><text x="7.4078%" y="1007.50">ts_query__perform_analysis</text></g><g><title>ts_lookahead_iterator__next (79,797,797 samples, 10.28%)</title><rect x="80.5280%" y="981" width="10.2786%" height="15" fill="rgb(230,116,27)" fg:x="625179489" fg:w="79797797"/><text x="80.7780%" y="991.50">ts_lookahead_it..</text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (5,192,380 samples, 0.67%)</title><rect x="90.8066%" y="1157" width="0.6688%" height="15" fill="rgb(228,99,48)" fg:x="704977286" fg:w="5192380"/><text x="91.0566%" y="1167.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (5,192,380 samples, 0.67%)</title><rect x="90.8066%" y="1141" width="0.6688%" height="15" fill="rgb(253,11,6)" fg:x="704977286" fg:w="5192380"/><text x="91.0566%" y="1151.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (5,192,380 samples, 0.67%)</title><rect x="90.8066%" y="1125" width="0.6688%" height="15" fill="rgb(247,143,39)" fg:x="704977286" fg:w="5192380"/><text x="91.0566%" y="1135.50"></text></g><g><title>&lt;syntastica_highlight::_QueryCaptures&lt;T,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,192,380 samples, 0.67%)</title><rect x="90.8066%" y="1109" width="0.6688%" height="15" fill="rgb(236,97,10)" fg:x="704977286" fg:w="5192380"/><text x="91.0566%" y="1119.50"></text></g><g><title>tree_sitter::QueryMatch::satisfies_text_predicates (5,192,380 samples, 0.67%)</title><rect x="90.8066%" y="1093" width="0.6688%" height="15" fill="rgb(233,208,19)" fg:x="704977286" fg:w="5192380"/><text x="91.0566%" y="1103.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (5,192,380 samples, 0.67%)</title><rect x="90.8066%" y="1077" width="0.6688%" height="15" fill="rgb(216,164,2)" fg:x="704977286" fg:w="5192380"/><text x="91.0566%" y="1087.50"></text></g><g><title>tree_sitter::QueryMatch::satisfies_text_predicates::{{closure}} (5,192,380 samples, 0.67%)</title><rect x="90.8066%" y="1061" width="0.6688%" height="15" fill="rgb(220,129,5)" fg:x="704977286" fg:w="5192380"/><text x="91.0566%" y="1071.50"></text></g><g><title>regex::regex::bytes::Regex::is_match (5,192,380 samples, 0.67%)</title><rect x="90.8066%" y="1045" width="0.6688%" height="15" fill="rgb(242,17,10)" fg:x="704977286" fg:w="5192380"/><text x="91.0566%" y="1055.50"></text></g><g><title>regex::regex::bytes::Regex::is_match_at (5,192,380 samples, 0.67%)</title><rect x="90.8066%" y="1029" width="0.6688%" height="15" fill="rgb(242,107,0)" fg:x="704977286" fg:w="5192380"/><text x="91.0566%" y="1039.50"></text></g><g><title>regex_automata::meta::regex::Regex::is_match (5,192,380 samples, 0.67%)</title><rect x="90.8066%" y="1013" width="0.6688%" height="15" fill="rgb(251,28,31)" fg:x="704977286" fg:w="5192380"/><text x="91.0566%" y="1023.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::is_match (5,192,380 samples, 0.67%)</title><rect x="90.8066%" y="997" width="0.6688%" height="15" fill="rgb(233,223,10)" fg:x="704977286" fg:w="5192380"/><text x="91.0566%" y="1007.50"></text></g><g><title>regex_automata::meta::wrappers::HybridEngine::try_search_half_fwd (5,192,380 samples, 0.67%)</title><rect x="90.8066%" y="981" width="0.6688%" height="15" fill="rgb(215,21,27)" fg:x="704977286" fg:w="5192380"/><text x="91.0566%" y="991.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::try_search_fwd (5,192,380 samples, 0.67%)</title><rect x="90.8066%" y="965" width="0.6688%" height="15" fill="rgb(232,23,21)" fg:x="704977286" fg:w="5192380"/><text x="91.0566%" y="975.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5,192,380 samples, 0.67%)</title><rect x="90.8066%" y="949" width="0.6688%" height="15" fill="rgb(244,5,23)" fg:x="704977286" fg:w="5192380"/><text x="91.0566%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10,369,673 samples, 1.34%)</title><rect x="91.4754%" y="549" width="1.3357%" height="15" fill="rgb(226,81,46)" fg:x="710169666" fg:w="10369673"/><text x="91.7254%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10,369,673 samples, 1.34%)</title><rect x="91.4754%" y="533" width="1.3357%" height="15" fill="rgb(247,70,30)" fg:x="710169666" fg:w="10369673"/><text x="91.7254%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10,369,673 samples, 1.34%)</title><rect x="91.4754%" y="517" width="1.3357%" height="15" fill="rgb(212,68,19)" fg:x="710169666" fg:w="10369673"/><text x="91.7254%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt; (10,369,673 samples, 1.34%)</title><rect x="91.4754%" y="501" width="1.3357%" height="15" fill="rgb(240,187,13)" fg:x="710169666" fg:w="10369673"/><text x="91.7254%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedMap&gt; (10,369,673 samples, 1.34%)</title><rect x="91.4754%" y="485" width="1.3357%" height="15" fill="rgb(223,113,26)" fg:x="710169666" fg:w="10369673"/><text x="91.7254%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (10,369,673 samples, 1.34%)</title><rect x="91.4754%" y="469" width="1.3357%" height="15" fill="rgb(206,192,2)" fg:x="710169666" fg:w="10369673"/><text x="91.7254%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10,369,673 samples, 1.34%)</title><rect x="91.4754%" y="453" width="1.3357%" height="15" fill="rgb(241,108,4)" fg:x="710169666" fg:w="10369673"/><text x="91.7254%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::map::Utf8BoundedEntry]&gt; (10,369,673 samples, 1.34%)</title><rect x="91.4754%" y="437" width="1.3357%" height="15" fill="rgb(247,173,49)" fg:x="710169666" fg:w="10369673"/><text x="91.7254%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt; (10,369,673 samples, 1.34%)</title><rect x="91.4754%" y="421" width="1.3357%" height="15" fill="rgb(224,114,35)" fg:x="710169666" fg:w="10369673"/><text x="91.7254%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (10,369,673 samples, 1.34%)</title><rect x="91.4754%" y="405" width="1.3357%" height="15" fill="rgb(245,159,27)" fg:x="710169666" fg:w="10369673"/><text x="91.7254%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (10,369,673 samples, 1.34%)</title><rect x="91.4754%" y="389" width="1.3357%" height="15" fill="rgb(245,172,44)" fg:x="710169666" fg:w="10369673"/><text x="91.7254%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10,369,673 samples, 1.34%)</title><rect x="91.4754%" y="373" width="1.3357%" height="15" fill="rgb(236,23,11)" fg:x="710169666" fg:w="10369673"/><text x="91.7254%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (10,369,673 samples, 1.34%)</title><rect x="91.4754%" y="357" width="1.3357%" height="15" fill="rgb(205,117,38)" fg:x="710169666" fg:w="10369673"/><text x="91.7254%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (10,369,673 samples, 1.34%)</title><rect x="91.4754%" y="341" width="1.3357%" height="15" fill="rgb(237,72,25)" fg:x="710169666" fg:w="10369673"/><text x="91.7254%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5,169,215 samples, 0.67%)</title><rect x="92.8111%" y="501" width="0.6658%" height="15" fill="rgb(244,70,9)" fg:x="720539339" fg:w="5169215"/><text x="93.0611%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (5,169,215 samples, 0.67%)</title><rect x="92.8111%" y="485" width="0.6658%" height="15" fill="rgb(217,125,39)" fg:x="720539339" fg:w="5169215"/><text x="93.0611%" y="495.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (5,169,215 samples, 0.67%)</title><rect x="92.8111%" y="469" width="0.6658%" height="15" fill="rgb(235,36,10)" fg:x="720539339" fg:w="5169215"/><text x="93.0611%" y="479.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5,169,215 samples, 0.67%)</title><rect x="92.8111%" y="453" width="0.6658%" height="15" fill="rgb(251,123,47)" fg:x="720539339" fg:w="5169215"/><text x="93.0611%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10,377,630 samples, 1.34%)</title><rect x="92.8111%" y="517" width="1.3367%" height="15" fill="rgb(221,13,13)" fg:x="720539339" fg:w="10377630"/><text x="93.0611%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::set_captures (5,208,415 samples, 0.67%)</title><rect x="93.4770%" y="501" width="0.6709%" height="15" fill="rgb(238,131,9)" fg:x="725708554" fg:w="5208415"/><text x="93.7270%" y="511.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (5,208,415 samples, 0.67%)</title><rect x="93.4770%" y="485" width="0.6709%" height="15" fill="rgb(211,50,8)" fg:x="725708554" fg:w="5208415"/><text x="93.7270%" y="495.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (5,208,415 samples, 0.67%)</title><rect x="93.4770%" y="469" width="0.6709%" height="15" fill="rgb(245,182,24)" fg:x="725708554" fg:w="5208415"/><text x="93.7270%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,208,415 samples, 0.67%)</title><rect x="93.4770%" y="453" width="0.6709%" height="15" fill="rgb(242,14,37)" fg:x="725708554" fg:w="5208415"/><text x="93.7270%" y="463.50"></text></g><g><title>core::ptr::write (5,208,415 samples, 0.67%)</title><rect x="93.4770%" y="437" width="0.6709%" height="15" fill="rgb(246,228,12)" fg:x="725708554" fg:w="5208415"/><text x="93.7270%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_range (5,173,184 samples, 0.67%)</title><rect x="94.1478%" y="213" width="0.6663%" height="15" fill="rgb(213,55,15)" fg:x="730916969" fg:w="5173184"/><text x="94.3978%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::add_range (5,173,184 samples, 0.67%)</title><rect x="94.1478%" y="197" width="0.6663%" height="15" fill="rgb(209,9,3)" fg:x="730916969" fg:w="5173184"/><text x="94.3978%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_range (5,173,184 samples, 0.67%)</title><rect x="94.1478%" y="181" width="0.6663%" height="15" fill="rgb(230,59,30)" fg:x="730916969" fg:w="5173184"/><text x="94.3978%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5,173,184 samples, 0.67%)</title><rect x="94.1478%" y="165" width="0.6663%" height="15" fill="rgb(209,121,21)" fg:x="730916969" fg:w="5173184"/><text x="94.3978%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,173,184 samples, 0.67%)</title><rect x="94.1478%" y="149" width="0.6663%" height="15" fill="rgb(220,109,13)" fg:x="730916969" fg:w="5173184"/><text x="94.3978%" y="159.50"></text></g><g><title>core::ptr::write (5,173,184 samples, 0.67%)</title><rect x="94.1478%" y="133" width="0.6663%" height="15" fill="rgb(232,18,1)" fg:x="730916969" fg:w="5173184"/><text x="94.3978%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (10,357,679 samples, 1.33%)</title><rect x="94.1478%" y="325" width="1.3342%" height="15" fill="rgb(215,41,42)" fg:x="730916969" fg:w="10357679"/><text x="94.3978%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (10,357,679 samples, 1.33%)</title><rect x="94.1478%" y="309" width="1.3342%" height="15" fill="rgb(224,123,36)" fg:x="730916969" fg:w="10357679"/><text x="94.3978%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_exactly (10,357,679 samples, 1.33%)</title><rect x="94.1478%" y="293" width="1.3342%" height="15" fill="rgb(240,125,3)" fg:x="730916969" fg:w="10357679"/><text x="94.3978%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (10,357,679 samples, 1.33%)</title><rect x="94.1478%" y="277" width="1.3342%" height="15" fill="rgb(205,98,50)" fg:x="730916969" fg:w="10357679"/><text x="94.3978%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (10,357,679 samples, 1.33%)</title><rect x="94.1478%" y="261" width="1.3342%" height="15" fill="rgb(205,185,37)" fg:x="730916969" fg:w="10357679"/><text x="94.3978%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (10,357,679 samples, 1.33%)</title><rect x="94.1478%" y="245" width="1.3342%" height="15" fill="rgb(238,207,15)" fg:x="730916969" fg:w="10357679"/><text x="94.3978%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (10,357,679 samples, 1.33%)</title><rect x="94.1478%" y="229" width="1.3342%" height="15" fill="rgb(213,199,42)" fg:x="730916969" fg:w="10357679"/><text x="94.3978%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (5,184,495 samples, 0.67%)</title><rect x="94.8142%" y="213" width="0.6678%" height="15" fill="rgb(235,201,11)" fg:x="736090153" fg:w="5184495"/><text x="95.0642%" y="223.50"></text></g><g><title>alloc::alloc::exchange_malloc (5,184,495 samples, 0.67%)</title><rect x="94.8142%" y="197" width="0.6678%" height="15" fill="rgb(207,46,11)" fg:x="736090153" fg:w="5184495"/><text x="95.0642%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,184,495 samples, 0.67%)</title><rect x="94.8142%" y="181" width="0.6678%" height="15" fill="rgb(241,35,35)" fg:x="736090153" fg:w="5184495"/><text x="95.0642%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5,184,495 samples, 0.67%)</title><rect x="94.8142%" y="165" width="0.6678%" height="15" fill="rgb(243,32,47)" fg:x="736090153" fg:w="5184495"/><text x="95.0642%" y="175.50"></text></g><g><title>alloc::alloc::alloc (5,184,495 samples, 0.67%)</title><rect x="94.8142%" y="149" width="0.6678%" height="15" fill="rgb(247,202,23)" fg:x="736090153" fg:w="5184495"/><text x="95.0642%" y="159.50"></text></g><g><title>malloc (5,184,495 samples, 0.67%)</title><rect x="94.8142%" y="133" width="0.6678%" height="15" fill="rgb(219,102,11)" fg:x="736090153" fg:w="5184495"/><text x="95.0642%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (15,542,376 samples, 2.00%)</title><rect x="94.1478%" y="389" width="2.0020%" height="15" fill="rgb(243,110,44)" fg:x="730916969" fg:w="15542376"/><text x="94.3978%" y="399.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (15,542,376 samples, 2.00%)</title><rect x="94.1478%" y="373" width="2.0020%" height="15" fill="rgb(222,74,54)" fg:x="730916969" fg:w="15542376"/><text x="94.3978%" y="383.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (15,542,376 samples, 2.00%)</title><rect x="94.1478%" y="357" width="2.0020%" height="15" fill="rgb(216,99,12)" fg:x="730916969" fg:w="15542376"/><text x="94.3978%" y="367.50">c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (15,542,376 samples, 2.00%)</title><rect x="94.1478%" y="341" width="2.0020%" height="15" fill="rgb(226,22,26)" fg:x="730916969" fg:w="15542376"/><text x="94.3978%" y="351.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (5,184,697 samples, 0.67%)</title><rect x="95.4820%" y="325" width="0.6678%" height="15" fill="rgb(217,163,10)" fg:x="741274648" fg:w="5184697"/><text x="95.7320%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5,184,697 samples, 0.67%)</title><rect x="95.4820%" y="309" width="0.6678%" height="15" fill="rgb(213,25,53)" fg:x="741274648" fg:w="5184697"/><text x="95.7320%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (5,184,697 samples, 0.67%)</title><rect x="95.4820%" y="293" width="0.6678%" height="15" fill="rgb(252,105,26)" fg:x="741274648" fg:w="5184697"/><text x="95.7320%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (5,184,697 samples, 0.67%)</title><rect x="95.4820%" y="277" width="0.6678%" height="15" fill="rgb(220,39,43)" fg:x="741274648" fg:w="5184697"/><text x="95.7320%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_range (5,184,697 samples, 0.67%)</title><rect x="95.4820%" y="261" width="0.6678%" height="15" fill="rgb(229,68,48)" fg:x="741274648" fg:w="5184697"/><text x="95.7320%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::add_range (5,184,697 samples, 0.67%)</title><rect x="95.4820%" y="245" width="0.6678%" height="15" fill="rgb(252,8,32)" fg:x="741274648" fg:w="5184697"/><text x="95.7320%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_range (5,184,697 samples, 0.67%)</title><rect x="95.4820%" y="229" width="0.6678%" height="15" fill="rgb(223,20,43)" fg:x="741274648" fg:w="5184697"/><text x="95.7320%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5,184,697 samples, 0.67%)</title><rect x="95.4820%" y="213" width="0.6678%" height="15" fill="rgb(229,81,49)" fg:x="741274648" fg:w="5184697"/><text x="95.7320%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,184,697 samples, 0.67%)</title><rect x="95.4820%" y="197" width="0.6678%" height="15" fill="rgb(236,28,36)" fg:x="741274648" fg:w="5184697"/><text x="95.7320%" y="207.50"></text></g><g><title>core::ptr::write (5,184,697 samples, 0.67%)</title><rect x="95.4820%" y="181" width="0.6678%" height="15" fill="rgb(249,185,26)" fg:x="741274648" fg:w="5184697"/><text x="95.7320%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5,031,855 samples, 0.65%)</title><rect x="96.1498%" y="277" width="0.6481%" height="15" fill="rgb(249,174,33)" fg:x="746459345" fg:w="5031855"/><text x="96.3998%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5,031,855 samples, 0.65%)</title><rect x="96.1498%" y="261" width="0.6481%" height="15" fill="rgb(233,201,37)" fg:x="746459345" fg:w="5031855"/><text x="96.3998%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5,031,855 samples, 0.65%)</title><rect x="96.1498%" y="245" width="0.6481%" height="15" fill="rgb(221,78,26)" fg:x="746459345" fg:w="5031855"/><text x="96.3998%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5,031,855 samples, 0.65%)</title><rect x="96.1498%" y="229" width="0.6481%" height="15" fill="rgb(250,127,30)" fg:x="746459345" fg:w="5031855"/><text x="96.3998%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5,031,855 samples, 0.65%)</title><rect x="96.1498%" y="213" width="0.6481%" height="15" fill="rgb(230,49,44)" fg:x="746459345" fg:w="5031855"/><text x="96.3998%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (5,031,855 samples, 0.65%)</title><rect x="96.1498%" y="197" width="0.6481%" height="15" fill="rgb(229,67,23)" fg:x="746459345" fg:w="5031855"/><text x="96.3998%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5,031,855 samples, 0.65%)</title><rect x="96.1498%" y="181" width="0.6481%" height="15" fill="rgb(249,83,47)" fg:x="746459345" fg:w="5031855"/><text x="96.3998%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5,031,855 samples, 0.65%)</title><rect x="96.1498%" y="165" width="0.6481%" height="15" fill="rgb(215,43,3)" fg:x="746459345" fg:w="5031855"/><text x="96.3998%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (5,031,855 samples, 0.65%)</title><rect x="96.1498%" y="149" width="0.6481%" height="15" fill="rgb(238,154,13)" fg:x="746459345" fg:w="5031855"/><text x="96.3998%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (5,031,855 samples, 0.65%)</title><rect x="96.1498%" y="133" width="0.6481%" height="15" fill="rgb(219,56,2)" fg:x="746459345" fg:w="5031855"/><text x="96.3998%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,031,855 samples, 0.65%)</title><rect x="96.1498%" y="117" width="0.6481%" height="15" fill="rgb(233,0,4)" fg:x="746459345" fg:w="5031855"/><text x="96.3998%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5,031,855 samples, 0.65%)</title><rect x="96.1498%" y="101" width="0.6481%" height="15" fill="rgb(235,30,7)" fg:x="746459345" fg:w="5031855"/><text x="96.3998%" y="111.50"></text></g><g><title>alloc::alloc::alloc (5,031,855 samples, 0.65%)</title><rect x="96.1498%" y="85" width="0.6481%" height="15" fill="rgb(250,79,13)" fg:x="746459345" fg:w="5031855"/><text x="96.3998%" y="95.50"></text></g><g><title>malloc (5,031,855 samples, 0.65%)</title><rect x="96.1498%" y="69" width="0.6481%" height="15" fill="rgb(211,146,34)" fg:x="746459345" fg:w="5031855"/><text x="96.3998%" y="79.50"></text></g><g><title>_int_malloc (5,031,855 samples, 0.65%)</title><rect x="96.1498%" y="53" width="0.6481%" height="15" fill="rgb(228,22,38)" fg:x="746459345" fg:w="5031855"/><text x="96.3998%" y="63.50"></text></g><g><title>unlink_chunk.isra.0 (5,031,855 samples, 0.65%)</title><rect x="96.1498%" y="37" width="0.6481%" height="15" fill="rgb(235,168,5)" fg:x="746459345" fg:w="5031855"/><text x="96.3998%" y="47.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="1077" width="5.9795%" height="15" fill="rgb(221,155,16)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="1087.50">&lt;once_ce..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="1061" width="5.9795%" height="15" fill="rgb(215,215,53)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="1071.50">once_cel..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="1045" width="5.9795%" height="15" fill="rgb(223,4,10)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="1055.50">once_cel..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="1029" width="5.9795%" height="15" fill="rgb(234,103,6)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="1039.50">once_cel..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="1013" width="5.9795%" height="15" fill="rgb(227,97,0)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="1023.50">once_cel..</text></g><g><title>once_cell::imp::initialize_or_wait (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="997" width="5.9795%" height="15" fill="rgb(234,150,53)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="1007.50">once_cel..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="981" width="5.9795%" height="15" fill="rgb(228,201,54)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="991.50">core::op..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="965" width="5.9795%" height="15" fill="rgb(222,22,37)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="975.50">once_cel..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="949" width="5.9795%" height="15" fill="rgb(237,53,32)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="959.50">once_cel..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="933" width="5.9795%" height="15" fill="rgb(233,25,53)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="943.50">once_cel..</text></g><g><title>core::ops::function::FnOnce::call_once (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="917" width="5.9795%" height="15" fill="rgb(210,40,34)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="927.50">core::op..</text></g><g><title>core::ops::function::FnOnce::call_once (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="901" width="5.9795%" height="15" fill="rgb(241,220,44)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="911.50">core::op..</text></g><g><title>tft::detect::pattern::PATTERN::{{closure}} (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="885" width="5.9795%" height="15" fill="rgb(235,28,35)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="895.50">tft::det..</text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="869" width="5.9795%" height="15" fill="rgb(210,56,17)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="879.50">&lt;once_ce..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="853" width="5.9795%" height="15" fill="rgb(224,130,29)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="863.50">once_cel..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="837" width="5.9795%" height="15" fill="rgb(235,212,8)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="847.50">once_cel..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="821" width="5.9795%" height="15" fill="rgb(223,33,50)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="831.50">once_cel..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="805" width="5.9795%" height="15" fill="rgb(219,149,13)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="815.50">once_cel..</text></g><g><title>once_cell::imp::initialize_or_wait (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="789" width="5.9795%" height="15" fill="rgb(250,156,29)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="799.50">once_cel..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="773" width="5.9795%" height="15" fill="rgb(216,193,19)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="783.50">core::op..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="757" width="5.9795%" height="15" fill="rgb(216,135,14)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="767.50">once_cel..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="741" width="5.9795%" height="15" fill="rgb(241,47,5)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="751.50">once_cel..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="725" width="5.9795%" height="15" fill="rgb(233,42,35)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="735.50">once_cel..</text></g><g><title>core::ops::function::FnOnce::call_once (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="709" width="5.9795%" height="15" fill="rgb(231,13,6)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="719.50">core::op..</text></g><g><title>core::ops::function::FnOnce::call_once (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="693" width="5.9795%" height="15" fill="rgb(207,181,40)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="703.50">core::op..</text></g><g><title>tft::detect::pattern::PATTERN::{{closure}}::RE::{{closure}} (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="677" width="5.9795%" height="15" fill="rgb(254,173,49)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="687.50">tft::det..</text></g><g><title>regex::builders::string::RegexBuilder::build (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="661" width="5.9795%" height="15" fill="rgb(221,1,38)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="671.50">regex::b..</text></g><g><title>regex::builders::Builder::build_one_string (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="645" width="5.9795%" height="15" fill="rgb(206,124,46)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="655.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="629" width="5.9795%" height="15" fill="rgb(249,21,11)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="639.50">regex_au..</text></g><g><title>regex_automata::meta::regex::Builder::build_many (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="613" width="5.9795%" height="15" fill="rgb(222,201,40)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="623.50">regex_au..</text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="597" width="5.9795%" height="15" fill="rgb(235,61,29)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="607.50">regex_au..</text></g><g><title>regex_automata::meta::strategy::new (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="581" width="5.9795%" height="15" fill="rgb(219,207,3)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="591.50">regex_au..</text></g><g><title>regex_automata::meta::strategy::Core::new (46,422,118 samples, 5.98%)</title><rect x="91.4754%" y="565" width="5.9795%" height="15" fill="rgb(222,56,46)" fg:x="710169666" fg:w="46422118"/><text x="91.7254%" y="575.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (36,052,445 samples, 4.64%)</title><rect x="92.8111%" y="549" width="4.6438%" height="15" fill="rgb(239,76,54)" fg:x="720539339" fg:w="36052445"/><text x="93.0611%" y="559.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (36,052,445 samples, 4.64%)</title><rect x="92.8111%" y="533" width="4.6438%" height="15" fill="rgb(231,124,27)" fg:x="720539339" fg:w="36052445"/><text x="93.0611%" y="543.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (25,674,815 samples, 3.31%)</title><rect x="94.1478%" y="517" width="3.3071%" height="15" fill="rgb(249,195,6)" fg:x="730916969" fg:w="25674815"/><text x="94.3978%" y="527.50">reg..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25,674,815 samples, 3.31%)</title><rect x="94.1478%" y="501" width="3.3071%" height="15" fill="rgb(237,174,47)" fg:x="730916969" fg:w="25674815"/><text x="94.3978%" y="511.50">&lt;co..</text></g><g><title>core::option::Option&lt;T&gt;::map (25,674,815 samples, 3.31%)</title><rect x="94.1478%" y="485" width="3.3071%" height="15" fill="rgb(206,201,31)" fg:x="730916969" fg:w="25674815"/><text x="94.3978%" y="495.50">cor..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (25,674,815 samples, 3.31%)</title><rect x="94.1478%" y="469" width="3.3071%" height="15" fill="rgb(231,57,52)" fg:x="730916969" fg:w="25674815"/><text x="94.3978%" y="479.50">cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (25,674,815 samples, 3.31%)</title><rect x="94.1478%" y="453" width="3.3071%" height="15" fill="rgb(248,177,22)" fg:x="730916969" fg:w="25674815"/><text x="94.3978%" y="463.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (25,674,815 samples, 3.31%)</title><rect x="94.1478%" y="437" width="3.3071%" height="15" fill="rgb(215,211,37)" fg:x="730916969" fg:w="25674815"/><text x="94.3978%" y="447.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (25,674,815 samples, 3.31%)</title><rect x="94.1478%" y="421" width="3.3071%" height="15" fill="rgb(241,128,51)" fg:x="730916969" fg:w="25674815"/><text x="94.3978%" y="431.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (25,674,815 samples, 3.31%)</title><rect x="94.1478%" y="405" width="3.3071%" height="15" fill="rgb(227,165,31)" fg:x="730916969" fg:w="25674815"/><text x="94.3978%" y="415.50">reg..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,132,439 samples, 1.31%)</title><rect x="96.1498%" y="389" width="1.3051%" height="15" fill="rgb(228,167,24)" fg:x="746459345" fg:w="10132439"/><text x="96.3998%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (10,132,439 samples, 1.31%)</title><rect x="96.1498%" y="373" width="1.3051%" height="15" fill="rgb(228,143,12)" fg:x="746459345" fg:w="10132439"/><text x="96.3998%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (10,132,439 samples, 1.31%)</title><rect x="96.1498%" y="357" width="1.3051%" height="15" fill="rgb(249,149,8)" fg:x="746459345" fg:w="10132439"/><text x="96.3998%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (10,132,439 samples, 1.31%)</title><rect x="96.1498%" y="341" width="1.3051%" height="15" fill="rgb(243,35,44)" fg:x="746459345" fg:w="10132439"/><text x="96.3998%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (10,132,439 samples, 1.31%)</title><rect x="96.1498%" y="325" width="1.3051%" height="15" fill="rgb(246,89,9)" fg:x="746459345" fg:w="10132439"/><text x="96.3998%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (10,132,439 samples, 1.31%)</title><rect x="96.1498%" y="309" width="1.3051%" height="15" fill="rgb(233,213,13)" fg:x="746459345" fg:w="10132439"/><text x="96.3998%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (10,132,439 samples, 1.31%)</title><rect x="96.1498%" y="293" width="1.3051%" height="15" fill="rgb(233,141,41)" fg:x="746459345" fg:w="10132439"/><text x="96.3998%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (5,100,584 samples, 0.66%)</title><rect x="96.7980%" y="277" width="0.6570%" height="15" fill="rgb(239,167,4)" fg:x="751491200" fg:w="5100584"/><text x="97.0480%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (5,100,584 samples, 0.66%)</title><rect x="96.7980%" y="261" width="0.6570%" height="15" fill="rgb(209,217,16)" fg:x="751491200" fg:w="5100584"/><text x="97.0480%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (5,100,584 samples, 0.66%)</title><rect x="96.7980%" y="245" width="0.6570%" height="15" fill="rgb(219,88,35)" fg:x="751491200" fg:w="5100584"/><text x="97.0480%" y="255.50"></text></g><g><title>alloc::vec::from_elem (5,100,584 samples, 0.66%)</title><rect x="96.7980%" y="229" width="0.6570%" height="15" fill="rgb(220,193,23)" fg:x="751491200" fg:w="5100584"/><text x="97.0480%" y="239.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (5,100,584 samples, 0.66%)</title><rect x="96.7980%" y="213" width="0.6570%" height="15" fill="rgb(230,90,52)" fg:x="751491200" fg:w="5100584"/><text x="97.0480%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (5,100,584 samples, 0.66%)</title><rect x="96.7980%" y="197" width="0.6570%" height="15" fill="rgb(252,106,19)" fg:x="751491200" fg:w="5100584"/><text x="97.0480%" y="207.50"></text></g><g><title>core::ptr::write (5,100,584 samples, 0.66%)</title><rect x="96.7980%" y="181" width="0.6570%" height="15" fill="rgb(206,74,20)" fg:x="751491200" fg:w="5100584"/><text x="97.0480%" y="191.50"></text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process (756,320,885 samples, 97.42%)</title><rect x="0.6762%" y="1221" width="97.4201%" height="15" fill="rgb(230,138,44)" fg:x="5249450" fg:w="756320885"/><text x="0.9262%" y="1231.50">syntastica::processor::Processor&lt;Set&gt;::process</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl (756,320,885 samples, 97.42%)</title><rect x="0.6762%" y="1205" width="97.4201%" height="15" fill="rgb(235,182,43)" fg:x="5249450" fg:w="756320885"/><text x="0.9262%" y="1215.50">syntastica::processor::Processor&lt;Set&gt;::process_impl</text></g><g><title>syntastica::processor::process_highlight_iter (56,593,049 samples, 7.29%)</title><rect x="90.8066%" y="1189" width="7.2896%" height="15" fill="rgb(242,16,51)" fg:x="704977286" fg:w="56593049"/><text x="91.0566%" y="1199.50">syntastica..</text></g><g><title>&lt;syntastica_highlight::HighlightIter&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (56,593,049 samples, 7.29%)</title><rect x="90.8066%" y="1173" width="7.2896%" height="15" fill="rgb(248,9,4)" fg:x="704977286" fg:w="56593049"/><text x="91.0566%" y="1183.50">&lt;syntastic..</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl::{{closure}} (51,400,669 samples, 6.62%)</title><rect x="91.4754%" y="1157" width="6.6208%" height="15" fill="rgb(210,31,22)" fg:x="710169666" fg:w="51400669"/><text x="91.7254%" y="1167.50">syntastic..</text></g><g><title>core::option::Option&lt;T&gt;::or_else (51,400,669 samples, 6.62%)</title><rect x="91.4754%" y="1141" width="6.6208%" height="15" fill="rgb(239,54,39)" fg:x="710169666" fg:w="51400669"/><text x="91.7254%" y="1151.50">core::opt..</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl::{{closure}}::{{closure}} (51,400,669 samples, 6.62%)</title><rect x="91.4754%" y="1125" width="6.6208%" height="15" fill="rgb(230,99,41)" fg:x="710169666" fg:w="51400669"/><text x="91.7254%" y="1135.50">syntastic..</text></g><g><title>syntastica_core::language_set::SupportedLanguage::for_injection (51,400,669 samples, 6.62%)</title><rect x="91.4754%" y="1109" width="6.6208%" height="15" fill="rgb(253,106,12)" fg:x="710169666" fg:w="51400669"/><text x="91.7254%" y="1119.50">syntastic..</text></g><g><title>tft::detect::try_detect (51,400,669 samples, 6.62%)</title><rect x="91.4754%" y="1093" width="6.6208%" height="15" fill="rgb(213,46,41)" fg:x="710169666" fg:w="51400669"/><text x="91.7254%" y="1103.50">tft::dete..</text></g><g><title>core::option::Option&lt;T&gt;::map_or (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="1077" width="0.6413%" height="15" fill="rgb(215,133,35)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="1087.50"></text></g><g><title>tft::detect::try_detect::{{closure}} (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="1061" width="0.6413%" height="15" fill="rgb(213,28,5)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="1071.50"></text></g><g><title>regex::regex::string::Regex::is_match (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="1045" width="0.6413%" height="15" fill="rgb(215,77,49)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="1055.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="1029" width="0.6413%" height="15" fill="rgb(248,100,22)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="1039.50"></text></g><g><title>regex_automata::meta::regex::Regex::search_half (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="1013" width="0.6413%" height="15" fill="rgb(208,67,9)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="1023.50"></text></g><g><title>regex_automata::util::pool::Pool&lt;T,F&gt;::get (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="997" width="0.6413%" height="15" fill="rgb(219,133,21)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="1007.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="981" width="0.6413%" height="15" fill="rgb(246,46,29)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="991.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="965" width="0.6413%" height="15" fill="rgb(246,185,52)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="975.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="949" width="0.6413%" height="15" fill="rgb(252,136,11)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="959.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="933" width="0.6413%" height="15" fill="rgb(219,138,53)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="943.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="917" width="0.6413%" height="15" fill="rgb(211,51,23)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="927.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::create_cache (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="901" width="0.6413%" height="15" fill="rgb(247,221,28)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="911.50"></text></g><g><title>regex_automata::meta::wrappers::HybridCache::new (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="885" width="0.6413%" height="15" fill="rgb(251,222,45)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="869" width="0.6413%" height="15" fill="rgb(217,162,53)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="879.50"></text></g><g><title>regex_automata::meta::wrappers::HybridCache::new::{{closure}} (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="853" width="0.6413%" height="15" fill="rgb(229,93,14)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="863.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::create_cache (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="837" width="0.6413%" height="15" fill="rgb(209,67,49)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="847.50"></text></g><g><title>regex_automata::hybrid::regex::Cache::new (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="821" width="0.6413%" height="15" fill="rgb(213,87,29)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="831.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="805" width="0.6413%" height="15" fill="rgb(205,151,52)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="815.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="789" width="0.6413%" height="15" fill="rgb(253,215,39)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="799.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::add_state (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="773" width="0.6413%" height="15" fill="rgb(221,220,41)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="757" width="0.6413%" height="15" fill="rgb(218,133,21)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="741" width="0.6413%" height="15" fill="rgb(221,193,43)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="725" width="0.6413%" height="15" fill="rgb(240,128,52)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="709" width="0.6413%" height="15" fill="rgb(253,114,12)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="693" width="0.6413%" height="15" fill="rgb(215,223,47)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="677" width="0.6413%" height="15" fill="rgb(248,225,23)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each::check::{{closure}} (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="661" width="0.6413%" height="15" fill="rgb(250,108,0)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="645" width="0.6413%" height="15" fill="rgb(228,208,7)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="655.50"></text></g><g><title>core::ptr::write (4,978,551 samples, 0.64%)</title><rect x="97.4550%" y="629" width="0.6413%" height="15" fill="rgb(244,45,10)" fg:x="756591784" fg:w="4978551"/><text x="97.7050%" y="639.50"></text></g><g><title>__memmove_avx512_unaligned_erms (4,915,798 samples, 0.63%)</title><rect x="98.0962%" y="1125" width="0.6332%" height="15" fill="rgb(207,125,25)" fg:x="761570335" fg:w="4915798"/><text x="98.3462%" y="1135.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::add_unanchored_start_state_loop (4,704,170 samples, 0.61%)</title><rect x="98.7294%" y="1125" width="0.6059%" height="15" fill="rgb(210,195,18)" fg:x="766486133" fg:w="4704170"/><text x="98.9794%" y="1135.50"></text></g><g><title>kaka_nest::get_markdown::get_blogs (775,869,860 samples, 99.94%)</title><rect x="0.0070%" y="1365" width="99.9381%" height="15" fill="rgb(249,80,12)" fg:x="54622" fg:w="775869860"/><text x="0.2570%" y="1375.50">kaka_nest::get_markdown::get_blogs</text></g><g><title>pulldown_cmark::html::push_html (775,869,860 samples, 99.94%)</title><rect x="0.0070%" y="1349" width="99.9381%" height="15" fill="rgb(221,65,9)" fg:x="54622" fg:w="775869860"/><text x="0.2570%" y="1359.50">pulldown_cmark::html::push_html</text></g><g><title>pulldown_cmark::html::write_html_fmt (775,869,860 samples, 99.94%)</title><rect x="0.0070%" y="1333" width="99.9381%" height="15" fill="rgb(235,49,36)" fg:x="54622" fg:w="775869860"/><text x="0.2570%" y="1343.50">pulldown_cmark::html::write_html_fmt</text></g><g><title>pulldown_cmark::html::HtmlWriter&lt;I,W&gt;::run (775,869,860 samples, 99.94%)</title><rect x="0.0070%" y="1317" width="99.9381%" height="15" fill="rgb(225,32,20)" fg:x="54622" fg:w="775869860"/><text x="0.2570%" y="1327.50">pulldown_cmark::html::HtmlWriter&lt;I,W&gt;::run</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (775,869,860 samples, 99.94%)</title><rect x="0.0070%" y="1301" width="99.9381%" height="15" fill="rgb(215,141,46)" fg:x="54622" fg:w="775869860"/><text x="0.2570%" y="1311.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (775,869,860 samples, 99.94%)</title><rect x="0.0070%" y="1285" width="99.9381%" height="15" fill="rgb(250,160,47)" fg:x="54622" fg:w="775869860"/><text x="0.2570%" y="1295.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (775,869,860 samples, 99.94%)</title><rect x="0.0070%" y="1269" width="99.9381%" height="15" fill="rgb(216,222,40)" fg:x="54622" fg:w="775869860"/><text x="0.2570%" y="1279.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (775,869,860 samples, 99.94%)</title><rect x="0.0070%" y="1253" width="99.9381%" height="15" fill="rgb(234,217,39)" fg:x="54622" fg:w="775869860"/><text x="0.2570%" y="1263.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>kaka_nest::pullmark_parsers::highlight_codeblocks::{{closure}} (775,869,860 samples, 99.94%)</title><rect x="0.0070%" y="1237" width="99.9381%" height="15" fill="rgb(207,178,40)" fg:x="54622" fg:w="775869860"/><text x="0.2570%" y="1247.50">kaka_nest::pullmark_parsers::highlight_codeblocks::{{closure}}</text></g><g><title>syntastica::renderer::render (14,354,147 samples, 1.85%)</title><rect x="98.0962%" y="1221" width="1.8489%" height="15" fill="rgb(221,136,13)" fg:x="761570335" fg:w="14354147"/><text x="98.3462%" y="1231.50">s..</text></g><g><title>&lt;syntastica::renderer::HtmlRenderer as syntastica::renderer::Renderer&gt;::escape (14,354,147 samples, 1.85%)</title><rect x="98.0962%" y="1205" width="1.8489%" height="15" fill="rgb(249,199,10)" fg:x="761570335" fg:w="14354147"/><text x="98.3462%" y="1215.50">&lt;..</text></g><g><title>aho_corasick::ahocorasick::AhoCorasick::new (14,354,147 samples, 1.85%)</title><rect x="98.0962%" y="1189" width="1.8489%" height="15" fill="rgb(249,222,13)" fg:x="761570335" fg:w="14354147"/><text x="98.3462%" y="1199.50">a..</text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build (14,354,147 samples, 1.85%)</title><rect x="98.0962%" y="1173" width="1.8489%" height="15" fill="rgb(244,185,38)" fg:x="761570335" fg:w="14354147"/><text x="98.3462%" y="1183.50">a..</text></g><g><title>aho_corasick::nfa::noncontiguous::Builder::build (14,354,147 samples, 1.85%)</title><rect x="98.0962%" y="1157" width="1.8489%" height="15" fill="rgb(236,202,9)" fg:x="761570335" fg:w="14354147"/><text x="98.3462%" y="1167.50">a..</text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::compile (14,354,147 samples, 1.85%)</title><rect x="98.0962%" y="1141" width="1.8489%" height="15" fill="rgb(250,229,37)" fg:x="761570335" fg:w="14354147"/><text x="98.3462%" y="1151.50">a..</text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::shuffle (4,734,179 samples, 0.61%)</title><rect x="99.3354%" y="1125" width="0.6098%" height="15" fill="rgb(206,174,23)" fg:x="771190303" fg:w="4734179"/><text x="99.5854%" y="1135.50"></text></g><g><title>aho_corasick::util::remapper::Remapper::remap (4,734,179 samples, 0.61%)</title><rect x="99.3354%" y="1109" width="0.6098%" height="15" fill="rgb(211,33,43)" fg:x="771190303" fg:w="4734179"/><text x="99.5854%" y="1119.50"></text></g><g><title>&lt;aho_corasick::nfa::noncontiguous::NFA as aho_corasick::util::remapper::Remappable&gt;::remap (4,734,179 samples, 0.61%)</title><rect x="99.3354%" y="1093" width="0.6098%" height="15" fill="rgb(245,58,50)" fg:x="771190303" fg:w="4734179"/><text x="99.5854%" y="1103.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::remap (4,734,179 samples, 0.61%)</title><rect x="99.3354%" y="1077" width="0.6098%" height="15" fill="rgb(244,68,36)" fg:x="771190303" fg:w="4734179"/><text x="99.5854%" y="1087.50"></text></g><g><title>aho_corasick::util::remapper::Remapper::remap::{{closure}} (4,734,179 samples, 0.61%)</title><rect x="99.3354%" y="1061" width="0.6098%" height="15" fill="rgb(232,229,15)" fg:x="771190303" fg:w="4734179"/><text x="99.5854%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4,734,179 samples, 0.61%)</title><rect x="99.3354%" y="1045" width="0.6098%" height="15" fill="rgb(254,30,23)" fg:x="771190303" fg:w="4734179"/><text x="99.5854%" y="1055.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4,734,179 samples, 0.61%)</title><rect x="99.3354%" y="1029" width="0.6098%" height="15" fill="rgb(235,160,14)" fg:x="771190303" fg:w="4734179"/><text x="99.5854%" y="1039.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4,734,179 samples, 0.61%)</title><rect x="99.3354%" y="1013" width="0.6098%" height="15" fill="rgb(212,155,44)" fg:x="771190303" fg:w="4734179"/><text x="99.5854%" y="1023.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (775,925,789 samples, 99.95%)</title><rect x="0.0000%" y="1493" width="99.9453%" height="15" fill="rgb(226,2,50)" fg:x="3" fg:w="775925789"/><text x="0.2500%" y="1503.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (775,925,789 samples, 99.95%)</title><rect x="0.0000%" y="1477" width="99.9453%" height="15" fill="rgb(234,177,6)" fg:x="3" fg:w="775925789"/><text x="0.2500%" y="1487.50">__libc_start_call_main</text></g><g><title>main (775,925,789 samples, 99.95%)</title><rect x="0.0000%" y="1461" width="99.9453%" height="15" fill="rgb(217,24,9)" fg:x="3" fg:w="775925789"/><text x="0.2500%" y="1471.50">main</text></g><g><title>std::rt::lang_start_internal (775,925,789 samples, 99.95%)</title><rect x="0.0000%" y="1445" width="99.9453%" height="15" fill="rgb(220,13,46)" fg:x="3" fg:w="775925789"/><text x="0.2500%" y="1455.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (775,925,789 samples, 99.95%)</title><rect x="0.0000%" y="1429" width="99.9453%" height="15" fill="rgb(239,221,27)" fg:x="3" fg:w="775925789"/><text x="0.2500%" y="1439.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (775,925,789 samples, 99.95%)</title><rect x="0.0000%" y="1413" width="99.9453%" height="15" fill="rgb(222,198,25)" fg:x="3" fg:w="775925789"/><text x="0.2500%" y="1423.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (775,925,789 samples, 99.95%)</title><rect x="0.0000%" y="1397" width="99.9453%" height="15" fill="rgb(211,99,13)" fg:x="3" fg:w="775925789"/><text x="0.2500%" y="1407.50">core::ops::function::FnOnce::call_once</text></g><g><title>kaka_nest::main (775,925,789 samples, 99.95%)</title><rect x="0.0000%" y="1381" width="99.9453%" height="15" fill="rgb(232,111,31)" fg:x="3" fg:w="775925789"/><text x="0.2500%" y="1391.50">kaka_nest::main</text></g><g><title>all (776,350,249 samples, 100%)</title><rect x="0.0000%" y="1541" width="100.0000%" height="15" fill="rgb(245,82,37)" fg:x="0" fg:w="776350249"/><text x="0.2500%" y="1551.50"></text></g><g><title>kaka-nest (776,350,249 samples, 100.00%)</title><rect x="0.0000%" y="1525" width="100.0000%" height="15" fill="rgb(227,149,46)" fg:x="0" fg:w="776350249"/><text x="0.2500%" y="1535.50">kaka-nest</text></g><g><title>_start (776,350,249 samples, 100.00%)</title><rect x="0.0000%" y="1509" width="100.0000%" height="15" fill="rgb(218,36,50)" fg:x="0" fg:w="776350249"/><text x="0.2500%" y="1519.50">_start</text></g><g><title>_dl_start (424,457 samples, 0.05%)</title><rect x="99.9453%" y="1493" width="0.0547%" height="15" fill="rgb(226,80,48)" fg:x="775925792" fg:w="424457"/><text x="100.1953%" y="1503.50"></text></g><g><title>_dl_sysdep_start (424,082 samples, 0.05%)</title><rect x="99.9454%" y="1477" width="0.0546%" height="15" fill="rgb(238,224,15)" fg:x="775926167" fg:w="424082"/><text x="100.1954%" y="1487.50"></text></g><g><title>dl_main (414,166 samples, 0.05%)</title><rect x="99.9467%" y="1461" width="0.0533%" height="15" fill="rgb(241,136,10)" fg:x="775936083" fg:w="414166"/><text x="100.1967%" y="1471.50"></text></g><g><title>_dl_relocate_object (414,166 samples, 0.05%)</title><rect x="99.9467%" y="1445" width="0.0533%" height="15" fill="rgb(208,32,45)" fg:x="775936083" fg:w="414166"/><text x="100.1967%" y="1455.50"></text></g><g><title>_dl_lookup_symbol_x (414,166 samples, 0.05%)</title><rect x="99.9467%" y="1429" width="0.0533%" height="15" fill="rgb(207,135,9)" fg:x="775936083" fg:w="414166"/><text x="100.1967%" y="1439.50"></text></g><g><title>do_lookup_x (414,166 samples, 0.05%)</title><rect x="99.9467%" y="1413" width="0.0533%" height="15" fill="rgb(206,86,44)" fg:x="775936083" fg:w="414166"/><text x="100.1967%" y="1423.50"></text></g><g><title>check_match (414,166 samples, 0.05%)</title><rect x="99.9467%" y="1397" width="0.0533%" height="15" fill="rgb(245,177,15)" fg:x="775936083" fg:w="414166"/><text x="100.1967%" y="1407.50"></text></g><g><title>strcmp (414,166 samples, 0.05%)</title><rect x="99.9467%" y="1381" width="0.0533%" height="15" fill="rgb(206,64,50)" fg:x="775936083" fg:w="414166"/><text x="100.1967%" y="1391.50"></text></g></svg></svg>