<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1478" onload="init(evt)" viewBox="0 0 1200 1478" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1478" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1461.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1461.00"> </text><svg id="frames" x="10" width="1180" total_samples="4676663487"><g><title>handlebars::registry::Registry::render (5,318,706 samples, 0.11%)</title><rect x="0.0000%" y="1109" width="0.1137%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="5318706"/><text x="0.2500%" y="1119.50"></text></g><g><title>handlebars::output::StringOutput::new (5,318,706 samples, 0.11%)</title><rect x="0.0000%" y="1093" width="0.1137%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="5318706"/><text x="0.2500%" y="1103.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5,318,706 samples, 0.11%)</title><rect x="0.0000%" y="1077" width="0.1137%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="5318706"/><text x="0.2500%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5,318,706 samples, 0.11%)</title><rect x="0.0000%" y="1061" width="0.1137%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="5318706"/><text x="0.2500%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5,318,706 samples, 0.11%)</title><rect x="0.0000%" y="1045" width="0.1137%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="5318706"/><text x="0.2500%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (5,318,706 samples, 0.11%)</title><rect x="0.0000%" y="1029" width="0.1137%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="5318706"/><text x="0.2500%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (5,318,706 samples, 0.11%)</title><rect x="0.0000%" y="1013" width="0.1137%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="5318706"/><text x="0.2500%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,318,706 samples, 0.11%)</title><rect x="0.0000%" y="997" width="0.1137%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="5318706"/><text x="0.2500%" y="1007.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5,318,706 samples, 0.11%)</title><rect x="0.0000%" y="981" width="0.1137%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="5318706"/><text x="0.2500%" y="991.50"></text></g><g><title>alloc::alloc::alloc (5,318,706 samples, 0.11%)</title><rect x="0.0000%" y="965" width="0.1137%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="5318706"/><text x="0.2500%" y="975.50"></text></g><g><title>malloc (5,318,706 samples, 0.11%)</title><rect x="0.0000%" y="949" width="0.1137%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="5318706"/><text x="0.2500%" y="959.50"></text></g><g><title>_int_malloc (5,318,706 samples, 0.11%)</title><rect x="0.0000%" y="933" width="0.1137%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="5318706"/><text x="0.2500%" y="943.50"></text></g><g><title>malloc_consolidate (5,318,706 samples, 0.11%)</title><rect x="0.0000%" y="917" width="0.1137%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="5318706"/><text x="0.2500%" y="927.50"></text></g><g><title>syntastica_highlight::HighlightConfiguration::configure (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="917" width="0.1091%" height="15" fill="rgb(206,188,39)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="901" width="0.1091%" height="15" fill="rgb(217,207,13)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="885" width="0.1091%" height="15" fill="rgb(231,73,38)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="869" width="0.1091%" height="15" fill="rgb(225,20,46)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="853" width="0.1091%" height="15" fill="rgb(210,31,41)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="837" width="0.1091%" height="15" fill="rgb(221,200,47)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="847.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="821" width="0.1091%" height="15" fill="rgb(226,26,5)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="831.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="805" width="0.1091%" height="15" fill="rgb(249,33,26)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="815.50"></text></g><g><title>syntastica_highlight::HighlightConfiguration::configure::{{closure}} (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="789" width="0.1091%" height="15" fill="rgb(235,183,28)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="799.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="773" width="0.1091%" height="15" fill="rgb(221,5,38)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="783.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="757" width="0.1091%" height="15" fill="rgb(247,18,42)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="767.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="741" width="0.1091%" height="15" fill="rgb(241,131,45)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="751.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="725" width="0.1091%" height="15" fill="rgb(249,31,29)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="709" width="0.1091%" height="15" fill="rgb(225,111,53)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="719.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="693" width="0.1091%" height="15" fill="rgb(238,160,17)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="677" width="0.1091%" height="15" fill="rgb(214,148,48)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="661" width="0.1091%" height="15" fill="rgb(232,36,49)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (5,104,391 samples, 0.11%)</title><rect x="0.1137%" y="645" width="0.1091%" height="15" fill="rgb(209,103,24)" fg:x="5318709" fg:w="5104391"/><text x="0.3637%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::{{closure}} (10,225,932 samples, 0.22%)</title><rect x="0.2229%" y="709" width="0.2187%" height="15" fill="rgb(229,88,8)" fg:x="10423100" fg:w="10225932"/><text x="0.4729%" y="719.50"></text></g><g><title>tree_sitter::Query::from_raw_parts::{{closure}} (10,225,932 samples, 0.22%)</title><rect x="0.2229%" y="693" width="0.2187%" height="15" fill="rgb(213,181,19)" fg:x="10423100" fg:w="10225932"/><text x="0.4729%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (20,345,786 samples, 0.44%)</title><rect x="0.2229%" y="757" width="0.4350%" height="15" fill="rgb(254,191,54)" fg:x="10423100" fg:w="20345786"/><text x="0.4729%" y="767.50"></text></g><g><title>core::ops::try_trait::NeverShortCircuit&lt;T&gt;::wrap_mut_2::{{closure}} (20,345,786 samples, 0.44%)</title><rect x="0.2229%" y="741" width="0.4350%" height="15" fill="rgb(241,83,37)" fg:x="10423100" fg:w="20345786"/><text x="0.4729%" y="751.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (20,345,786 samples, 0.44%)</title><rect x="0.2229%" y="725" width="0.4350%" height="15" fill="rgb(233,36,39)" fg:x="10423100" fg:w="20345786"/><text x="0.4729%" y="735.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (10,119,854 samples, 0.22%)</title><rect x="0.4415%" y="709" width="0.2164%" height="15" fill="rgb(226,3,54)" fg:x="20649032" fg:w="10119854"/><text x="0.6915%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (30,556,301 samples, 0.65%)</title><rect x="0.2229%" y="869" width="0.6534%" height="15" fill="rgb(245,192,40)" fg:x="10423100" fg:w="30556301"/><text x="0.4729%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (30,556,301 samples, 0.65%)</title><rect x="0.2229%" y="853" width="0.6534%" height="15" fill="rgb(238,167,29)" fg:x="10423100" fg:w="30556301"/><text x="0.4729%" y="863.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (30,556,301 samples, 0.65%)</title><rect x="0.2229%" y="837" width="0.6534%" height="15" fill="rgb(232,182,51)" fg:x="10423100" fg:w="30556301"/><text x="0.4729%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (30,556,301 samples, 0.65%)</title><rect x="0.2229%" y="821" width="0.6534%" height="15" fill="rgb(231,60,39)" fg:x="10423100" fg:w="30556301"/><text x="0.4729%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (30,556,301 samples, 0.65%)</title><rect x="0.2229%" y="805" width="0.6534%" height="15" fill="rgb(208,69,12)" fg:x="10423100" fg:w="30556301"/><text x="0.4729%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (30,556,301 samples, 0.65%)</title><rect x="0.2229%" y="789" width="0.6534%" height="15" fill="rgb(235,93,37)" fg:x="10423100" fg:w="30556301"/><text x="0.4729%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (30,556,301 samples, 0.65%)</title><rect x="0.2229%" y="773" width="0.6534%" height="15" fill="rgb(213,116,39)" fg:x="10423100" fg:w="30556301"/><text x="0.4729%" y="783.50"></text></g><g><title>&lt;core::str::iter::CharIndices as core::iter::traits::iterator::Iterator&gt;::next (10,210,515 samples, 0.22%)</title><rect x="0.6579%" y="757" width="0.2183%" height="15" fill="rgb(222,207,29)" fg:x="30768886" fg:w="10210515"/><text x="0.9079%" y="767.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (10,210,515 samples, 0.22%)</title><rect x="0.6579%" y="741" width="0.2183%" height="15" fill="rgb(206,96,30)" fg:x="30768886" fg:w="10210515"/><text x="0.9079%" y="751.50"></text></g><g><title>core::str::validations::next_code_point (10,210,515 samples, 0.22%)</title><rect x="0.6579%" y="725" width="0.2183%" height="15" fill="rgb(218,138,4)" fg:x="30768886" fg:w="10210515"/><text x="0.9079%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (5,104,744 samples, 0.11%)</title><rect x="0.8763%" y="773" width="0.1092%" height="15" fill="rgb(250,191,14)" fg:x="40979401" fg:w="5104744"/><text x="1.1263%" y="783.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (5,102,541 samples, 0.11%)</title><rect x="0.9854%" y="773" width="0.1091%" height="15" fill="rgb(239,60,40)" fg:x="46084145" fg:w="5102541"/><text x="1.2354%" y="783.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (5,102,541 samples, 0.11%)</title><rect x="0.9854%" y="757" width="0.1091%" height="15" fill="rgb(206,27,48)" fg:x="46084145" fg:w="5102541"/><text x="1.2354%" y="767.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5,102,541 samples, 0.11%)</title><rect x="0.9854%" y="741" width="0.1091%" height="15" fill="rgb(225,35,8)" fg:x="46084145" fg:w="5102541"/><text x="1.2354%" y="751.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5,107,547 samples, 0.11%)</title><rect x="1.0945%" y="709" width="0.1092%" height="15" fill="rgb(250,213,24)" fg:x="51186686" fg:w="5107547"/><text x="1.3445%" y="719.50"></text></g><g><title>regex_automata::hybrid::dfa::Config::byte_classes_from_nfa (5,107,547 samples, 0.11%)</title><rect x="1.0945%" y="693" width="0.1092%" height="15" fill="rgb(247,123,22)" fg:x="51186686" fg:w="5107547"/><text x="1.3445%" y="703.50"></text></g><g><title>regex_automata::util::alphabet::ByteClassSet::byte_classes (5,107,547 samples, 0.11%)</title><rect x="1.0945%" y="677" width="0.1092%" height="15" fill="rgb(231,138,38)" fg:x="51186686" fg:w="5107547"/><text x="1.3445%" y="687.50"></text></g><g><title>core::num::&lt;impl u8&gt;::checked_add (5,107,547 samples, 0.11%)</title><rect x="1.0945%" y="661" width="0.1092%" height="15" fill="rgb(231,145,46)" fg:x="51186686" fg:w="5107547"/><text x="1.3445%" y="671.50"></text></g><g><title>core::intrinsics::unlikely (5,107,547 samples, 0.11%)</title><rect x="1.0945%" y="645" width="0.1092%" height="15" fill="rgb(251,118,11)" fg:x="51186686" fg:w="5107547"/><text x="1.3445%" y="655.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (10,204,232 samples, 0.22%)</title><rect x="1.0945%" y="741" width="0.2182%" height="15" fill="rgb(217,147,25)" fg:x="51186686" fg:w="10204232"/><text x="1.3445%" y="751.50"></text></g><g><title>regex_automata::meta::wrappers::HybridEngine::new (10,204,232 samples, 0.22%)</title><rect x="1.0945%" y="725" width="0.2182%" height="15" fill="rgb(247,81,37)" fg:x="51186686" fg:w="10204232"/><text x="1.3445%" y="735.50"></text></g><g><title>regex_automata::hybrid::regex::Builder::new (5,096,685 samples, 0.11%)</title><rect x="1.2037%" y="709" width="0.1090%" height="15" fill="rgb(209,12,38)" fg:x="56294233" fg:w="5096685"/><text x="1.4537%" y="719.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::builder (5,096,685 samples, 0.11%)</title><rect x="1.2037%" y="693" width="0.1090%" height="15" fill="rgb(227,1,9)" fg:x="56294233" fg:w="5096685"/><text x="1.4537%" y="703.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::new (5,096,685 samples, 0.11%)</title><rect x="1.2037%" y="677" width="0.1090%" height="15" fill="rgb(248,47,43)" fg:x="56294233" fg:w="5096685"/><text x="1.4537%" y="687.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (5,096,685 samples, 0.11%)</title><rect x="1.2037%" y="661" width="0.1090%" height="15" fill="rgb(221,10,30)" fg:x="56294233" fg:w="5096685"/><text x="1.4537%" y="671.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (5,096,685 samples, 0.11%)</title><rect x="1.2037%" y="645" width="0.1090%" height="15" fill="rgb(210,229,1)" fg:x="56294233" fg:w="5096685"/><text x="1.4537%" y="655.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5,111,460 samples, 0.11%)</title><rect x="1.3127%" y="709" width="0.1093%" height="15" fill="rgb(222,148,37)" fg:x="61390918" fg:w="5111460"/><text x="1.5627%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,116,762 samples, 0.11%)</title><rect x="1.4220%" y="693" width="0.1094%" height="15" fill="rgb(234,67,33)" fg:x="66502378" fg:w="5116762"/><text x="1.6720%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5,116,762 samples, 0.11%)</title><rect x="1.4220%" y="677" width="0.1094%" height="15" fill="rgb(247,98,35)" fg:x="66502378" fg:w="5116762"/><text x="1.6720%" y="687.50"></text></g><g><title>regex_automata::nfa::thompson::builder::State::goto (5,106,389 samples, 0.11%)</title><rect x="1.5314%" y="693" width="0.1092%" height="15" fill="rgb(247,138,52)" fg:x="71619140" fg:w="5106389"/><text x="1.7814%" y="703.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15,320,889 samples, 0.33%)</title><rect x="1.4220%" y="709" width="0.3276%" height="15" fill="rgb(213,79,30)" fg:x="66502378" fg:w="15320889"/><text x="1.6720%" y="719.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5,097,738 samples, 0.11%)</title><rect x="1.6406%" y="693" width="0.1090%" height="15" fill="rgb(246,177,23)" fg:x="76725529" fg:w="5097738"/><text x="1.8906%" y="703.50"></text></g><g><title>regex_automata::util::alphabet::ByteClassSet::set_range (5,097,738 samples, 0.11%)</title><rect x="1.6406%" y="677" width="0.1090%" height="15" fill="rgb(230,62,27)" fg:x="76725529" fg:w="5097738"/><text x="1.8906%" y="687.50"></text></g><g><title>regex_automata::util::alphabet::ByteSet::add (5,097,738 samples, 0.11%)</title><rect x="1.6406%" y="661" width="0.1090%" height="15" fill="rgb(216,154,8)" fg:x="76725529" fg:w="5097738"/><text x="1.8906%" y="671.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (45,948,560 samples, 0.98%)</title><rect x="0.8763%" y="789" width="0.9825%" height="15" fill="rgb(244,35,45)" fg:x="40979401" fg:w="45948560"/><text x="1.1263%" y="799.50"></text></g><g><title>regex_automata::meta::strategy::new (35,741,275 samples, 0.76%)</title><rect x="1.0945%" y="773" width="0.7642%" height="15" fill="rgb(251,115,12)" fg:x="51186686" fg:w="35741275"/><text x="1.3445%" y="783.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (35,741,275 samples, 0.76%)</title><rect x="1.0945%" y="757" width="0.7642%" height="15" fill="rgb(240,54,50)" fg:x="51186686" fg:w="35741275"/><text x="1.3445%" y="767.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (25,537,043 samples, 0.55%)</title><rect x="1.3127%" y="741" width="0.5461%" height="15" fill="rgb(233,84,52)" fg:x="61390918" fg:w="25537043"/><text x="1.5627%" y="751.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (25,537,043 samples, 0.55%)</title><rect x="1.3127%" y="725" width="0.5461%" height="15" fill="rgb(207,117,47)" fg:x="61390918" fg:w="25537043"/><text x="1.5627%" y="735.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="709" width="0.1092%" height="15" fill="rgb(249,43,39)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="693" width="0.1092%" height="15" fill="rgb(209,38,44)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="677" width="0.1092%" height="15" fill="rgb(236,212,23)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="687.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="661" width="0.1092%" height="15" fill="rgb(242,79,21)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="671.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="645" width="0.1092%" height="15" fill="rgb(211,96,35)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="655.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="629" width="0.1092%" height="15" fill="rgb(253,215,40)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="639.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="613" width="0.1092%" height="15" fill="rgb(211,81,21)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="623.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="597" width="0.1092%" height="15" fill="rgb(208,190,38)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="581" width="0.1092%" height="15" fill="rgb(235,213,38)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="565" width="0.1092%" height="15" fill="rgb(237,122,38)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="575.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="549" width="0.1092%" height="15" fill="rgb(244,218,35)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="559.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="533" width="0.1092%" height="15" fill="rgb(240,68,47)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="517" width="0.1092%" height="15" fill="rgb(210,16,53)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="501" width="0.1092%" height="15" fill="rgb(235,124,12)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="485" width="0.1092%" height="15" fill="rgb(224,169,11)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::add (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="469" width="0.1092%" height="15" fill="rgb(250,166,2)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::get_or_add_state (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="453" width="0.1092%" height="15" fill="rgb(242,216,29)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::literal_trie::State::active_chunk (5,104,694 samples, 0.11%)</title><rect x="1.7496%" y="437" width="0.1092%" height="15" fill="rgb(230,116,27)" fg:x="81823267" fg:w="5104694"/><text x="1.9996%" y="447.50"></text></g><g><title>tree_sitter::Query::from_raw_parts (81,597,497 samples, 1.74%)</title><rect x="0.2229%" y="885" width="1.7448%" height="15" fill="rgb(228,99,48)" fg:x="10423100" fg:w="81597497"/><text x="0.4729%" y="895.50"></text></g><g><title>regex::regex::bytes::Regex::new (51,041,196 samples, 1.09%)</title><rect x="0.8763%" y="869" width="1.0914%" height="15" fill="rgb(253,11,6)" fg:x="40979401" fg:w="51041196"/><text x="1.1263%" y="879.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::build (51,041,196 samples, 1.09%)</title><rect x="0.8763%" y="853" width="1.0914%" height="15" fill="rgb(247,143,39)" fg:x="40979401" fg:w="51041196"/><text x="1.1263%" y="863.50"></text></g><g><title>regex::builders::Builder::build_one_bytes (51,041,196 samples, 1.09%)</title><rect x="0.8763%" y="837" width="1.0914%" height="15" fill="rgb(236,97,10)" fg:x="40979401" fg:w="51041196"/><text x="1.1263%" y="847.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (51,041,196 samples, 1.09%)</title><rect x="0.8763%" y="821" width="1.0914%" height="15" fill="rgb(233,208,19)" fg:x="40979401" fg:w="51041196"/><text x="1.1263%" y="831.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (51,041,196 samples, 1.09%)</title><rect x="0.8763%" y="805" width="1.0914%" height="15" fill="rgb(216,164,2)" fg:x="40979401" fg:w="51041196"/><text x="1.1263%" y="815.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (5,092,636 samples, 0.11%)</title><rect x="1.8588%" y="789" width="0.1089%" height="15" fill="rgb(220,129,5)" fg:x="86927961" fg:w="5092636"/><text x="2.1088%" y="799.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5,092,636 samples, 0.11%)</title><rect x="1.8588%" y="773" width="0.1089%" height="15" fill="rgb(242,17,10)" fg:x="86927961" fg:w="5092636"/><text x="2.1088%" y="783.50"></text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit (5,092,636 samples, 0.11%)</title><rect x="1.8588%" y="757" width="0.1089%" height="15" fill="rgb(242,107,0)" fg:x="86927961" fg:w="5092636"/><text x="2.1088%" y="767.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (5,092,636 samples, 0.11%)</title><rect x="1.8588%" y="741" width="0.1089%" height="15" fill="rgb(251,28,31)" fg:x="86927961" fg:w="5092636"/><text x="2.1088%" y="751.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (5,092,636 samples, 0.11%)</title><rect x="1.8588%" y="725" width="0.1089%" height="15" fill="rgb(233,223,10)" fg:x="86927961" fg:w="5092636"/><text x="2.1088%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,092,636 samples, 0.11%)</title><rect x="1.8588%" y="709" width="0.1089%" height="15" fill="rgb(215,21,27)" fg:x="86927961" fg:w="5092636"/><text x="2.1088%" y="719.50"></text></g><g><title>analysis_state_set__push (10,211,725 samples, 0.22%)</title><rect x="4.0266%" y="853" width="0.2184%" height="15" fill="rgb(232,23,21)" fg:x="188312076" fg:w="10211725"/><text x="4.2766%" y="863.50"></text></g><g><title>analysis_state_pool__clone_or_reuse (10,211,725 samples, 0.22%)</title><rect x="4.0266%" y="837" width="0.2184%" height="15" fill="rgb(244,5,23)" fg:x="188312076" fg:w="10211725"/><text x="4.2766%" y="847.50"></text></g><g><title>state_predecessor_map_add (17,003,203 samples, 0.36%)</title><rect x="4.2450%" y="853" width="0.3636%" height="15" fill="rgb(226,81,46)" fg:x="198523801" fg:w="17003203"/><text x="4.4950%" y="863.50"></text></g><g><title>[unknown] (2,248,858 samples, 0.05%)</title><rect x="4.5605%" y="837" width="0.0481%" height="15" fill="rgb(247,70,30)" fg:x="213278146" fg:w="2248858"/><text x="4.8105%" y="847.50"></text></g><g><title>[unknown] (2,248,858 samples, 0.05%)</title><rect x="4.5605%" y="821" width="0.0481%" height="15" fill="rgb(212,68,19)" fg:x="213278146" fg:w="2248858"/><text x="4.8105%" y="831.50"></text></g><g><title>ts_language_aliases_for_symbol (4,572,291 samples, 0.10%)</title><rect x="4.6086%" y="853" width="0.0978%" height="15" fill="rgb(240,187,13)" fg:x="215527004" fg:w="4572291"/><text x="4.8586%" y="863.50"></text></g><g><title>ts_lookahead_iterator__next (35,712,388 samples, 0.76%)</title><rect x="4.7063%" y="853" width="0.7636%" height="15" fill="rgb(223,113,26)" fg:x="220099295" fg:w="35712388"/><text x="4.9563%" y="863.50"></text></g><g><title>_array__splice (5,090,270 samples, 0.11%)</title><rect x="54.8060%" y="837" width="0.1088%" height="15" fill="rgb(206,192,2)" fg:x="2563093731" fg:w="5090270"/><text x="55.0560%" y="847.50"></text></g><g><title>memmove (5,090,270 samples, 0.11%)</title><rect x="54.8060%" y="821" width="0.1088%" height="15" fill="rgb(241,108,4)" fg:x="2563093731" fg:w="5090270"/><text x="55.0560%" y="831.50"></text></g><g><title>analysis_state__compare_position (10,106,401 samples, 0.22%)</title><rect x="54.9149%" y="837" width="0.2161%" height="15" fill="rgb(247,173,49)" fg:x="2568184001" fg:w="10106401"/><text x="55.1649%" y="847.50"></text></g><g><title>analysis_state__recursion_depth (80,981,399 samples, 1.73%)</title><rect x="55.1310%" y="837" width="1.7316%" height="15" fill="rgb(224,114,35)" fg:x="2578290402" fg:w="80981399"/><text x="55.3810%" y="847.50"></text></g><g><title>analysis_state__top (71,472,760 samples, 1.53%)</title><rect x="56.8626%" y="837" width="1.5283%" height="15" fill="rgb(245,159,27)" fg:x="2659271801" fg:w="71472760"/><text x="57.1126%" y="847.50"></text></g><g><title>analysis_state__compare (159,632,948 samples, 3.41%)</title><rect x="63.7414%" y="805" width="3.4134%" height="15" fill="rgb(245,172,44)" fg:x="2980971110" fg:w="159632948"/><text x="63.9914%" y="815.50">ana..</text></g><g><title>analysis_state__compare (460,978,416 samples, 9.86%)</title><rect x="63.7414%" y="821" width="9.8570%" height="15" fill="rgb(236,23,11)" fg:x="2980971110" fg:w="460978416"/><text x="63.9914%" y="831.50">analysis_state..</text></g><g><title>analysis_state__compare_position (301,345,468 samples, 6.44%)</title><rect x="67.1548%" y="805" width="6.4436%" height="15" fill="rgb(205,117,38)" fg:x="3140604058" fg:w="301345468"/><text x="67.4048%" y="815.50">analysis..</text></g><g><title>analysis_state_set__insert_sorted (726,516,876 samples, 15.53%)</title><rect x="58.3909%" y="837" width="15.5349%" height="15" fill="rgb(237,72,25)" fg:x="2730744561" fg:w="726516876"/><text x="58.6409%" y="847.50">analysis_state_set__inse..</text></g><g><title>analysis_state_pool__clone_or_reuse (15,311,911 samples, 0.33%)</title><rect x="73.5984%" y="821" width="0.3274%" height="15" fill="rgb(244,70,9)" fg:x="3441949526" fg:w="15311911"/><text x="73.8484%" y="831.50"></text></g><g><title>analysis_subgraph_node__compare (636,936,701 samples, 13.62%)</title><rect x="73.9258%" y="837" width="13.6195%" height="15" fill="rgb(217,125,39)" fg:x="3457261437" fg:w="636936701"/><text x="74.1758%" y="847.50">analysis_subgraph_nod..</text></g><g><title>ts_language_alias_at (10,301,684 samples, 0.22%)</title><rect x="87.5453%" y="837" width="0.2203%" height="15" fill="rgb(235,36,10)" fg:x="4094198138" fg:w="10301684"/><text x="87.7953%" y="847.50"></text></g><g><title>ts_language_alias_at (10,301,684 samples, 0.22%)</title><rect x="87.5453%" y="821" width="0.2203%" height="15" fill="rgb(251,123,47)" fg:x="4094198138" fg:w="10301684"/><text x="87.7953%" y="831.50"></text></g><g><title>ts_language_field_map (20,845,698 samples, 0.45%)</title><rect x="87.7656%" y="837" width="0.4457%" height="15" fill="rgb(221,13,13)" fg:x="4104499822" fg:w="20845698"/><text x="88.0156%" y="847.50"></text></g><g><title>ts_language_field_map (20,845,698 samples, 0.45%)</title><rect x="87.7656%" y="821" width="0.4457%" height="15" fill="rgb(238,131,9)" fg:x="4104499822" fg:w="20845698"/><text x="88.0156%" y="831.50"></text></g><g><title>ts_query__analyze_patterns (4,483,778,011 samples, 95.88%)</title><rect x="1.9677%" y="869" width="95.8756%" height="15" fill="rgb(211,50,8)" fg:x="92020597" fg:w="4483778011"/><text x="2.2177%" y="879.50">ts_query__analyze_patterns</text></g><g><title>ts_query__perform_analysis (4,319,986,925 samples, 92.37%)</title><rect x="5.4700%" y="853" width="92.3733%" height="15" fill="rgb(245,182,24)" fg:x="255811683" fg:w="4319986925"/><text x="5.7200%" y="863.50">ts_query__perform_analysis</text></g><g><title>ts_lookahead_iterator__next (450,453,088 samples, 9.63%)</title><rect x="88.2113%" y="837" width="9.6319%" height="15" fill="rgb(242,14,37)" fg:x="4125345520" fg:w="450453088"/><text x="88.4613%" y="847.50">ts_lookahead_i..</text></g><g><title>ts_language_symbol_for_name (5,109,921 samples, 0.11%)</title><rect x="97.8432%" y="853" width="0.1093%" height="15" fill="rgb(246,228,12)" fg:x="4575798608" fg:w="5109921"/><text x="98.0932%" y="863.50"></text></g><g><title>__strncmp_evex (5,109,921 samples, 0.11%)</title><rect x="97.8432%" y="837" width="0.1093%" height="15" fill="rgb(213,55,15)" fg:x="4575798608" fg:w="5109921"/><text x="98.0932%" y="847.50"></text></g><g><title>stream_scan_identifier (5,050,696 samples, 0.11%)</title><rect x="97.9525%" y="789" width="0.1080%" height="15" fill="rgb(209,9,3)" fg:x="4580908529" fg:w="5050696"/><text x="98.2025%" y="799.50"></text></g><g><title>&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language (4,585,742,852 samples, 98.06%)</title><rect x="0.1137%" y="1045" width="98.0559%" height="15" fill="rgb(230,59,30)" fg:x="5318709" fg:w="4585742852"/><text x="0.3637%" y="1055.50">&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (4,585,742,852 samples, 98.06%)</title><rect x="0.1137%" y="1029" width="98.0559%" height="15" fill="rgb(209,121,21)" fg:x="5318709" fg:w="4585742852"/><text x="0.3637%" y="1039.50">once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (4,585,742,852 samples, 98.06%)</title><rect x="0.1137%" y="1013" width="98.0559%" height="15" fill="rgb(220,109,13)" fg:x="5318709" fg:w="4585742852"/><text x="0.3637%" y="1023.50">once_cell::imp::OnceCell&lt;T&gt;::initialize</text></g><g><title>once_cell::imp::initialize_or_wait (4,585,742,852 samples, 98.06%)</title><rect x="0.1137%" y="997" width="98.0559%" height="15" fill="rgb(232,18,1)" fg:x="5318709" fg:w="4585742852"/><text x="0.3637%" y="1007.50">once_cell::imp::initialize_or_wait</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (4,585,742,852 samples, 98.06%)</title><rect x="0.1137%" y="981" width="98.0559%" height="15" fill="rgb(215,41,42)" fg:x="5318709" fg:w="4585742852"/><text x="0.3637%" y="991.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (4,585,742,852 samples, 98.06%)</title><rect x="0.1137%" y="965" width="98.0559%" height="15" fill="rgb(224,123,36)" fg:x="5318709" fg:w="4585742852"/><text x="0.3637%" y="975.50">once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}}</text></g><g><title>&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language::{{closure}} (4,585,742,852 samples, 98.06%)</title><rect x="0.1137%" y="949" width="98.0559%" height="15" fill="rgb(240,125,3)" fg:x="5318709" fg:w="4585742852"/><text x="0.3637%" y="959.50">&lt;syntastica_parsers::LanguageSetImpl as syntastica_core::language_set::LanguageSet&gt;::get_language::{{closure}}</text></g><g><title>syntastica_parsers::Lang::get_config (4,585,742,852 samples, 98.06%)</title><rect x="0.1137%" y="933" width="98.0559%" height="15" fill="rgb(205,98,50)" fg:x="5318709" fg:w="4585742852"/><text x="0.3637%" y="943.50">syntastica_parsers::Lang::get_config</text></g><g><title>syntastica_highlight::HighlightConfiguration::new (4,580,638,461 samples, 97.95%)</title><rect x="0.2229%" y="917" width="97.9467%" height="15" fill="rgb(205,185,37)" fg:x="10423100" fg:w="4580638461"/><text x="0.4729%" y="927.50">syntastica_highlight::HighlightConfiguration::new</text></g><g><title>tree_sitter::Query::new (4,580,638,461 samples, 97.95%)</title><rect x="0.2229%" y="901" width="97.9467%" height="15" fill="rgb(238,207,15)" fg:x="10423100" fg:w="4580638461"/><text x="0.4729%" y="911.50">tree_sitter::Query::new</text></g><g><title>ts_query_new (4,499,040,964 samples, 96.20%)</title><rect x="1.9677%" y="885" width="96.2019%" height="15" fill="rgb(213,199,42)" fg:x="92020597" fg:w="4499040964"/><text x="2.2177%" y="895.50">ts_query_new</text></g><g><title>ts_query__parse_pattern (15,262,953 samples, 0.33%)</title><rect x="97.8432%" y="869" width="0.3264%" height="15" fill="rgb(235,201,11)" fg:x="4575798608" fg:w="15262953"/><text x="98.0932%" y="879.50"></text></g><g><title>ts_query__parse_pattern (10,153,032 samples, 0.22%)</title><rect x="97.9525%" y="853" width="0.2171%" height="15" fill="rgb(207,46,11)" fg:x="4580908529" fg:w="10153032"/><text x="98.2025%" y="863.50"></text></g><g><title>ts_query__parse_pattern (10,153,032 samples, 0.22%)</title><rect x="97.9525%" y="837" width="0.2171%" height="15" fill="rgb(241,35,35)" fg:x="4580908529" fg:w="10153032"/><text x="98.2025%" y="847.50"></text></g><g><title>ts_query__parse_pattern (10,153,032 samples, 0.22%)</title><rect x="97.9525%" y="821" width="0.2171%" height="15" fill="rgb(243,32,47)" fg:x="4580908529" fg:w="10153032"/><text x="98.2025%" y="831.50"></text></g><g><title>ts_query__parse_pattern (10,153,032 samples, 0.22%)</title><rect x="97.9525%" y="805" width="0.2171%" height="15" fill="rgb(247,202,23)" fg:x="4580908529" fg:w="10153032"/><text x="98.2025%" y="815.50"></text></g><g><title>ts_query__parse_pattern (5,102,336 samples, 0.11%)</title><rect x="98.0605%" y="789" width="0.1091%" height="15" fill="rgb(219,102,11)" fg:x="4585959225" fg:w="5102336"/><text x="98.3105%" y="799.50"></text></g><g><title>symbol_table_insert_name (5,102,336 samples, 0.11%)</title><rect x="98.0605%" y="773" width="0.1091%" height="15" fill="rgb(243,110,44)" fg:x="4585959225" fg:w="5102336"/><text x="98.3105%" y="783.50"></text></g><g><title>symbol_table_insert_name (5,102,336 samples, 0.11%)</title><rect x="98.0605%" y="757" width="0.1091%" height="15" fill="rgb(222,74,54)" fg:x="4585959225" fg:w="5102336"/><text x="98.3105%" y="767.50"></text></g><g><title>_array__grow (5,102,336 samples, 0.11%)</title><rect x="98.0605%" y="741" width="0.1091%" height="15" fill="rgb(216,99,12)" fg:x="4585959225" fg:w="5102336"/><text x="98.3105%" y="751.50"></text></g><g><title>_array__reserve (5,102,336 samples, 0.11%)</title><rect x="98.0605%" y="725" width="0.1091%" height="15" fill="rgb(226,22,26)" fg:x="4585959225" fg:w="5102336"/><text x="98.3105%" y="735.50"></text></g><g><title>_array__reserve (5,102,336 samples, 0.11%)</title><rect x="98.0605%" y="709" width="0.1091%" height="15" fill="rgb(217,163,10)" fg:x="4585959225" fg:w="5102336"/><text x="98.3105%" y="719.50"></text></g><g><title>ts_realloc_default (5,102,336 samples, 0.11%)</title><rect x="98.0605%" y="693" width="0.1091%" height="15" fill="rgb(213,25,53)" fg:x="4585959225" fg:w="5102336"/><text x="98.3105%" y="703.50"></text></g><g><title>realloc (5,102,336 samples, 0.11%)</title><rect x="98.0605%" y="677" width="0.1091%" height="15" fill="rgb(252,105,26)" fg:x="4585959225" fg:w="5102336"/><text x="98.3105%" y="687.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="1013" width="0.1091%" height="15" fill="rgb(220,39,43)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="1023.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="997" width="0.1091%" height="15" fill="rgb(229,68,48)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="1007.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="981" width="0.1091%" height="15" fill="rgb(252,8,32)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="991.50"></text></g><g><title>&lt;syntastica_highlight::_QueryCaptures&lt;T,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="965" width="0.1091%" height="15" fill="rgb(223,20,43)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="975.50"></text></g><g><title>tree_sitter::QueryMatch::satisfies_text_predicates (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="949" width="0.1091%" height="15" fill="rgb(229,81,49)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="959.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="933" width="0.1091%" height="15" fill="rgb(236,28,36)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="943.50"></text></g><g><title>tree_sitter::QueryMatch::satisfies_text_predicates::{{closure}} (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="917" width="0.1091%" height="15" fill="rgb(249,185,26)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="927.50"></text></g><g><title>regex::regex::bytes::Regex::is_match (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="901" width="0.1091%" height="15" fill="rgb(249,174,33)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="911.50"></text></g><g><title>regex::regex::bytes::Regex::is_match_at (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="885" width="0.1091%" height="15" fill="rgb(233,201,37)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="895.50"></text></g><g><title>regex_automata::meta::regex::Regex::is_match (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="869" width="0.1091%" height="15" fill="rgb(221,78,26)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="879.50"></text></g><g><title>regex_automata::util::pool::Pool&lt;T,F&gt;::get (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="853" width="0.1091%" height="15" fill="rgb(250,127,30)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="863.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="837" width="0.1091%" height="15" fill="rgb(230,49,44)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="847.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="821" width="0.1091%" height="15" fill="rgb(229,67,23)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="831.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="805" width="0.1091%" height="15" fill="rgb(249,83,47)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="815.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="789" width="0.1091%" height="15" fill="rgb(215,43,3)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="799.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="773" width="0.1091%" height="15" fill="rgb(238,154,13)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="783.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::create_cache (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="757" width="0.1091%" height="15" fill="rgb(219,56,2)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="767.50"></text></g><g><title>regex_automata::meta::wrappers::HybridCache::new (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="741" width="0.1091%" height="15" fill="rgb(233,0,4)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="725" width="0.1091%" height="15" fill="rgb(235,30,7)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="735.50"></text></g><g><title>regex_automata::meta::wrappers::HybridCache::new::{{closure}} (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="709" width="0.1091%" height="15" fill="rgb(250,79,13)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="719.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::create_cache (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="693" width="0.1091%" height="15" fill="rgb(211,146,34)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="703.50"></text></g><g><title>regex_automata::hybrid::regex::Cache::new (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="677" width="0.1091%" height="15" fill="rgb(228,22,38)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="687.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="661" width="0.1091%" height="15" fill="rgb(235,168,5)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="671.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="645" width="0.1091%" height="15" fill="rgb(221,155,16)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="655.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::add_state (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="629" width="0.1091%" height="15" fill="rgb(215,215,53)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="613" width="0.1091%" height="15" fill="rgb(223,4,10)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5,104,057 samples, 0.11%)</title><rect x="98.1696%" y="597" width="0.1091%" height="15" fill="rgb(234,103,6)" fg:x="4591061561" fg:w="5104057"/><text x="98.4196%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="901" width="0.1034%" height="15" fill="rgb(227,97,0)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="911.50"></text></g><g><title>tft::detect::try_detect::{{closure}} (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="885" width="0.1034%" height="15" fill="rgb(234,150,53)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="895.50"></text></g><g><title>regex::regex::string::Regex::is_match (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="869" width="0.1034%" height="15" fill="rgb(228,201,54)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="879.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="853" width="0.1034%" height="15" fill="rgb(222,22,37)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="863.50"></text></g><g><title>regex_automata::meta::regex::Regex::search_half (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="837" width="0.1034%" height="15" fill="rgb(237,53,32)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="847.50"></text></g><g><title>regex_automata::util::pool::Pool&lt;T,F&gt;::get (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="821" width="0.1034%" height="15" fill="rgb(233,25,53)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="831.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="805" width="0.1034%" height="15" fill="rgb(210,40,34)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="815.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="789" width="0.1034%" height="15" fill="rgb(241,220,44)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="799.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="773" width="0.1034%" height="15" fill="rgb(235,28,35)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="783.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="757" width="0.1034%" height="15" fill="rgb(210,56,17)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="767.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="741" width="0.1034%" height="15" fill="rgb(224,130,29)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="751.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::create_cache (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="725" width="0.1034%" height="15" fill="rgb(235,212,8)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="735.50"></text></g><g><title>regex_automata::meta::wrappers::HybridCache::new (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="709" width="0.1034%" height="15" fill="rgb(223,33,50)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="693" width="0.1034%" height="15" fill="rgb(219,149,13)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="703.50"></text></g><g><title>regex_automata::meta::wrappers::HybridCache::new::{{closure}} (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="677" width="0.1034%" height="15" fill="rgb(250,156,29)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="687.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::create_cache (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="661" width="0.1034%" height="15" fill="rgb(216,193,19)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="671.50"></text></g><g><title>regex_automata::hybrid::regex::Cache::new (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="645" width="0.1034%" height="15" fill="rgb(216,135,14)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="655.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="629" width="0.1034%" height="15" fill="rgb(241,47,5)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="639.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="613" width="0.1034%" height="15" fill="rgb(233,42,35)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="623.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="597" width="0.1034%" height="15" fill="rgb(231,13,6)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="607.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderEmpty::into_matches (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="581" width="0.1034%" height="15" fill="rgb(207,181,40)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="565" width="0.1034%" height="15" fill="rgb(254,173,49)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="549" width="0.1034%" height="15" fill="rgb(221,1,38)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="533" width="0.1034%" height="15" fill="rgb(206,124,46)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="517" width="0.1034%" height="15" fill="rgb(249,21,11)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="501" width="0.1034%" height="15" fill="rgb(222,201,40)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="485" width="0.1034%" height="15" fill="rgb(235,61,29)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="469" width="0.1034%" height="15" fill="rgb(219,207,3)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="453" width="0.1034%" height="15" fill="rgb(222,56,46)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="437" width="0.1034%" height="15" fill="rgb(239,76,54)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="447.50"></text></g><g><title>malloc (4,835,153 samples, 0.10%)</title><rect x="98.2787%" y="421" width="0.1034%" height="15" fill="rgb(231,124,27)" fg:x="4596165618" fg:w="4835153"/><text x="98.5287%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (9,939,727 samples, 0.21%)</title><rect x="98.2787%" y="949" width="0.2125%" height="15" fill="rgb(249,195,6)" fg:x="4596165618" fg:w="9939727"/><text x="98.5287%" y="959.50"></text></g><g><title>syntastica_core::language_set::SupportedLanguage::for_injection::{{closure}} (9,939,727 samples, 0.21%)</title><rect x="98.2787%" y="933" width="0.2125%" height="15" fill="rgb(237,174,47)" fg:x="4596165618" fg:w="9939727"/><text x="98.5287%" y="943.50"></text></g><g><title>tft::detect::try_detect (9,939,727 samples, 0.21%)</title><rect x="98.2787%" y="917" width="0.2125%" height="15" fill="rgb(206,201,31)" fg:x="4596165618" fg:w="9939727"/><text x="98.5287%" y="927.50"></text></g><g><title>std::path::Path::ends_with (5,104,574 samples, 0.11%)</title><rect x="98.3821%" y="901" width="0.1091%" height="15" fill="rgb(231,57,52)" fg:x="4601000771" fg:w="5104574"/><text x="98.6321%" y="911.50"></text></g><g><title>std::path::Path::_ends_with (5,104,574 samples, 0.11%)</title><rect x="98.3821%" y="885" width="0.1091%" height="15" fill="rgb(248,177,22)" fg:x="4601000771" fg:w="5104574"/><text x="98.6321%" y="895.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (5,104,574 samples, 0.11%)</title><rect x="98.3821%" y="869" width="0.1091%" height="15" fill="rgb(215,211,37)" fg:x="4601000771" fg:w="5104574"/><text x="98.6321%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10,052,248 samples, 0.21%)</title><rect x="98.4913%" y="405" width="0.2149%" height="15" fill="rgb(241,128,51)" fg:x="4606105345" fg:w="10052248"/><text x="98.7413%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10,052,248 samples, 0.21%)</title><rect x="98.4913%" y="389" width="0.2149%" height="15" fill="rgb(227,165,31)" fg:x="4606105345" fg:w="10052248"/><text x="98.7413%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (10,052,248 samples, 0.21%)</title><rect x="98.4913%" y="373" width="0.2149%" height="15" fill="rgb(228,167,24)" fg:x="4606105345" fg:w="10052248"/><text x="98.7413%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt; (10,052,248 samples, 0.21%)</title><rect x="98.4913%" y="357" width="0.2149%" height="15" fill="rgb(228,143,12)" fg:x="4606105345" fg:w="10052248"/><text x="98.7413%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedMap&gt; (10,052,248 samples, 0.21%)</title><rect x="98.4913%" y="341" width="0.2149%" height="15" fill="rgb(249,149,8)" fg:x="4606105345" fg:w="10052248"/><text x="98.7413%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (10,052,248 samples, 0.21%)</title><rect x="98.4913%" y="325" width="0.2149%" height="15" fill="rgb(243,35,44)" fg:x="4606105345" fg:w="10052248"/><text x="98.7413%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10,052,248 samples, 0.21%)</title><rect x="98.4913%" y="309" width="0.2149%" height="15" fill="rgb(246,89,9)" fg:x="4606105345" fg:w="10052248"/><text x="98.7413%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::map::Utf8BoundedEntry]&gt; (10,052,248 samples, 0.21%)</title><rect x="98.4913%" y="293" width="0.2149%" height="15" fill="rgb(233,213,13)" fg:x="4606105345" fg:w="10052248"/><text x="98.7413%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt; (10,052,248 samples, 0.21%)</title><rect x="98.4913%" y="277" width="0.2149%" height="15" fill="rgb(233,141,41)" fg:x="4606105345" fg:w="10052248"/><text x="98.7413%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (10,052,248 samples, 0.21%)</title><rect x="98.4913%" y="261" width="0.2149%" height="15" fill="rgb(239,167,4)" fg:x="4606105345" fg:w="10052248"/><text x="98.7413%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (10,052,248 samples, 0.21%)</title><rect x="98.4913%" y="245" width="0.2149%" height="15" fill="rgb(209,217,16)" fg:x="4606105345" fg:w="10052248"/><text x="98.7413%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10,052,248 samples, 0.21%)</title><rect x="98.4913%" y="229" width="0.2149%" height="15" fill="rgb(219,88,35)" fg:x="4606105345" fg:w="10052248"/><text x="98.7413%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (10,052,248 samples, 0.21%)</title><rect x="98.4913%" y="213" width="0.2149%" height="15" fill="rgb(220,193,23)" fg:x="4606105345" fg:w="10052248"/><text x="98.7413%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (10,052,248 samples, 0.21%)</title><rect x="98.4913%" y="197" width="0.2149%" height="15" fill="rgb(230,90,52)" fg:x="4606105345" fg:w="10052248"/><text x="98.7413%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5,086,776 samples, 0.11%)</title><rect x="98.7062%" y="357" width="0.1088%" height="15" fill="rgb(252,106,19)" fg:x="4616157593" fg:w="5086776"/><text x="98.9562%" y="367.50"></text></g><g><title>regex_automata::util::alphabet::ByteClassSet::byte_classes (5,086,776 samples, 0.11%)</title><rect x="98.7062%" y="341" width="0.1088%" height="15" fill="rgb(206,74,20)" fg:x="4616157593" fg:w="5086776"/><text x="98.9562%" y="351.50"></text></g><g><title>regex_automata::util::alphabet::ByteSet::contains (5,086,776 samples, 0.11%)</title><rect x="98.7062%" y="325" width="0.1088%" height="15" fill="rgb(230,138,44)" fg:x="4616157593" fg:w="5086776"/><text x="98.9562%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10,120,707 samples, 0.22%)</title><rect x="98.7062%" y="373" width="0.2164%" height="15" fill="rgb(235,182,43)" fg:x="4616157593" fg:w="10120707"/><text x="98.9562%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::set_starts (5,033,931 samples, 0.11%)</title><rect x="98.8150%" y="357" width="0.1076%" height="15" fill="rgb(242,16,51)" fg:x="4621244369" fg:w="5033931"/><text x="99.0650%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5,033,931 samples, 0.11%)</title><rect x="98.8150%" y="341" width="0.1076%" height="15" fill="rgb(248,9,4)" fg:x="4621244369" fg:w="5033931"/><text x="99.0650%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5,033,931 samples, 0.11%)</title><rect x="98.8150%" y="325" width="0.1076%" height="15" fill="rgb(210,31,22)" fg:x="4621244369" fg:w="5033931"/><text x="99.0650%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (5,033,931 samples, 0.11%)</title><rect x="98.8150%" y="309" width="0.1076%" height="15" fill="rgb(239,54,39)" fg:x="4621244369" fg:w="5033931"/><text x="99.0650%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5,033,931 samples, 0.11%)</title><rect x="98.8150%" y="293" width="0.1076%" height="15" fill="rgb(230,99,41)" fg:x="4621244369" fg:w="5033931"/><text x="99.0650%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5,033,931 samples, 0.11%)</title><rect x="98.8150%" y="277" width="0.1076%" height="15" fill="rgb(253,106,12)" fg:x="4621244369" fg:w="5033931"/><text x="99.0650%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (5,033,931 samples, 0.11%)</title><rect x="98.8150%" y="261" width="0.1076%" height="15" fill="rgb(213,46,41)" fg:x="4621244369" fg:w="5033931"/><text x="99.0650%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (5,033,931 samples, 0.11%)</title><rect x="98.8150%" y="245" width="0.1076%" height="15" fill="rgb(215,133,35)" fg:x="4621244369" fg:w="5033931"/><text x="99.0650%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,033,931 samples, 0.11%)</title><rect x="98.8150%" y="229" width="0.1076%" height="15" fill="rgb(213,28,5)" fg:x="4621244369" fg:w="5033931"/><text x="99.0650%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5,033,931 samples, 0.11%)</title><rect x="98.8150%" y="213" width="0.1076%" height="15" fill="rgb(215,77,49)" fg:x="4621244369" fg:w="5033931"/><text x="99.0650%" y="223.50"></text></g><g><title>alloc::alloc::alloc (5,033,931 samples, 0.11%)</title><rect x="98.8150%" y="197" width="0.1076%" height="15" fill="rgb(248,100,22)" fg:x="4621244369" fg:w="5033931"/><text x="99.0650%" y="207.50"></text></g><g><title>malloc (5,033,931 samples, 0.11%)</title><rect x="98.8150%" y="181" width="0.1076%" height="15" fill="rgb(208,67,9)" fg:x="4621244369" fg:w="5033931"/><text x="99.0650%" y="191.50"></text></g><g><title>_int_malloc (5,033,931 samples, 0.11%)</title><rect x="98.8150%" y="165" width="0.1076%" height="15" fill="rgb(219,133,21)" fg:x="4621244369" fg:w="5033931"/><text x="99.0650%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (5,063,612 samples, 0.11%)</title><rect x="98.9226%" y="245" width="0.1083%" height="15" fill="rgb(246,46,29)" fg:x="4626278300" fg:w="5063612"/><text x="99.1726%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5,063,612 samples, 0.11%)</title><rect x="98.9226%" y="229" width="0.1083%" height="15" fill="rgb(246,185,52)" fg:x="4626278300" fg:w="5063612"/><text x="99.1726%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5,063,612 samples, 0.11%)</title><rect x="98.9226%" y="213" width="0.1083%" height="15" fill="rgb(252,136,11)" fg:x="4626278300" fg:w="5063612"/><text x="99.1726%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (5,063,612 samples, 0.11%)</title><rect x="98.9226%" y="197" width="0.1083%" height="15" fill="rgb(219,138,53)" fg:x="4626278300" fg:w="5063612"/><text x="99.1726%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5,063,612 samples, 0.11%)</title><rect x="98.9226%" y="181" width="0.1083%" height="15" fill="rgb(211,51,23)" fg:x="4626278300" fg:w="5063612"/><text x="99.1726%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (5,063,612 samples, 0.11%)</title><rect x="98.9226%" y="165" width="0.1083%" height="15" fill="rgb(247,221,28)" fg:x="4626278300" fg:w="5063612"/><text x="99.1726%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_exactly (5,063,612 samples, 0.11%)</title><rect x="98.9226%" y="149" width="0.1083%" height="15" fill="rgb(251,222,45)" fg:x="4626278300" fg:w="5063612"/><text x="99.1726%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (5,063,612 samples, 0.11%)</title><rect x="98.9226%" y="133" width="0.1083%" height="15" fill="rgb(217,162,53)" fg:x="4626278300" fg:w="5063612"/><text x="99.1726%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5,063,612 samples, 0.11%)</title><rect x="98.9226%" y="117" width="0.1083%" height="15" fill="rgb(229,93,14)" fg:x="4626278300" fg:w="5063612"/><text x="99.1726%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (5,063,612 samples, 0.11%)</title><rect x="98.9226%" y="101" width="0.1083%" height="15" fill="rgb(209,67,49)" fg:x="4626278300" fg:w="5063612"/><text x="99.1726%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (5,063,612 samples, 0.11%)</title><rect x="98.9226%" y="85" width="0.1083%" height="15" fill="rgb(213,87,29)" fg:x="4626278300" fg:w="5063612"/><text x="99.1726%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5,037,913 samples, 0.11%)</title><rect x="99.0309%" y="181" width="0.1077%" height="15" fill="rgb(205,151,52)" fg:x="4631341912" fg:w="5037913"/><text x="99.2809%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (5,037,913 samples, 0.11%)</title><rect x="99.0309%" y="165" width="0.1077%" height="15" fill="rgb(253,215,39)" fg:x="4631341912" fg:w="5037913"/><text x="99.2809%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_exactly (5,037,913 samples, 0.11%)</title><rect x="99.0309%" y="149" width="0.1077%" height="15" fill="rgb(221,220,41)" fg:x="4631341912" fg:w="5037913"/><text x="99.2809%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (5,037,913 samples, 0.11%)</title><rect x="99.0309%" y="133" width="0.1077%" height="15" fill="rgb(218,133,21)" fg:x="4631341912" fg:w="5037913"/><text x="99.2809%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (5,037,913 samples, 0.11%)</title><rect x="99.0309%" y="117" width="0.1077%" height="15" fill="rgb(221,193,43)" fg:x="4631341912" fg:w="5037913"/><text x="99.2809%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (5,037,913 samples, 0.11%)</title><rect x="99.0309%" y="101" width="0.1077%" height="15" fill="rgb(240,128,52)" fg:x="4631341912" fg:w="5037913"/><text x="99.2809%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_empty (5,080,695 samples, 0.11%)</title><rect x="99.1386%" y="117" width="0.1086%" height="15" fill="rgb(253,114,12)" fg:x="4636379825" fg:w="5080695"/><text x="99.3886%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5,080,695 samples, 0.11%)</title><rect x="99.1386%" y="101" width="0.1086%" height="15" fill="rgb(215,223,47)" fg:x="4636379825" fg:w="5080695"/><text x="99.3886%" y="111.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (45,345,309 samples, 0.97%)</title><rect x="98.4913%" y="453" width="0.9696%" height="15" fill="rgb(248,225,23)" fg:x="4606105345" fg:w="45345309"/><text x="98.7413%" y="463.50"></text></g><g><title>regex_automata::meta::strategy::new (45,345,309 samples, 0.97%)</title><rect x="98.4913%" y="437" width="0.9696%" height="15" fill="rgb(250,108,0)" fg:x="4606105345" fg:w="45345309"/><text x="98.7413%" y="447.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (45,345,309 samples, 0.97%)</title><rect x="98.4913%" y="421" width="0.9696%" height="15" fill="rgb(228,208,7)" fg:x="4606105345" fg:w="45345309"/><text x="98.7413%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (35,293,061 samples, 0.75%)</title><rect x="98.7062%" y="405" width="0.7547%" height="15" fill="rgb(244,45,10)" fg:x="4616157593" fg:w="35293061"/><text x="98.9562%" y="415.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (35,293,061 samples, 0.75%)</title><rect x="98.7062%" y="389" width="0.7547%" height="15" fill="rgb(207,125,25)" fg:x="4616157593" fg:w="35293061"/><text x="98.9562%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (25,172,354 samples, 0.54%)</title><rect x="98.9226%" y="373" width="0.5383%" height="15" fill="rgb(210,195,18)" fg:x="4626278300" fg:w="25172354"/><text x="99.1726%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25,172,354 samples, 0.54%)</title><rect x="98.9226%" y="357" width="0.5383%" height="15" fill="rgb(249,80,12)" fg:x="4626278300" fg:w="25172354"/><text x="99.1726%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (25,172,354 samples, 0.54%)</title><rect x="98.9226%" y="341" width="0.5383%" height="15" fill="rgb(221,65,9)" fg:x="4626278300" fg:w="25172354"/><text x="99.1726%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (25,172,354 samples, 0.54%)</title><rect x="98.9226%" y="325" width="0.5383%" height="15" fill="rgb(235,49,36)" fg:x="4626278300" fg:w="25172354"/><text x="99.1726%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (25,172,354 samples, 0.54%)</title><rect x="98.9226%" y="309" width="0.5383%" height="15" fill="rgb(225,32,20)" fg:x="4626278300" fg:w="25172354"/><text x="99.1726%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (25,172,354 samples, 0.54%)</title><rect x="98.9226%" y="293" width="0.5383%" height="15" fill="rgb(215,141,46)" fg:x="4626278300" fg:w="25172354"/><text x="99.1726%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (25,172,354 samples, 0.54%)</title><rect x="98.9226%" y="277" width="0.5383%" height="15" fill="rgb(250,160,47)" fg:x="4626278300" fg:w="25172354"/><text x="99.1726%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (25,172,354 samples, 0.54%)</title><rect x="98.9226%" y="261" width="0.5383%" height="15" fill="rgb(216,222,40)" fg:x="4626278300" fg:w="25172354"/><text x="99.1726%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (20,108,742 samples, 0.43%)</title><rect x="99.0309%" y="245" width="0.4300%" height="15" fill="rgb(234,217,39)" fg:x="4631341912" fg:w="20108742"/><text x="99.2809%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (20,108,742 samples, 0.43%)</title><rect x="99.0309%" y="229" width="0.4300%" height="15" fill="rgb(207,178,40)" fg:x="4631341912" fg:w="20108742"/><text x="99.2809%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (20,108,742 samples, 0.43%)</title><rect x="99.0309%" y="213" width="0.4300%" height="15" fill="rgb(221,136,13)" fg:x="4631341912" fg:w="20108742"/><text x="99.2809%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (20,108,742 samples, 0.43%)</title><rect x="99.0309%" y="197" width="0.4300%" height="15" fill="rgb(249,199,10)" fg:x="4631341912" fg:w="20108742"/><text x="99.2809%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (15,070,829 samples, 0.32%)</title><rect x="99.1386%" y="181" width="0.3223%" height="15" fill="rgb(249,222,13)" fg:x="4636379825" fg:w="15070829"/><text x="99.3886%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (15,070,829 samples, 0.32%)</title><rect x="99.1386%" y="165" width="0.3223%" height="15" fill="rgb(244,185,38)" fg:x="4636379825" fg:w="15070829"/><text x="99.3886%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (15,070,829 samples, 0.32%)</title><rect x="99.1386%" y="149" width="0.3223%" height="15" fill="rgb(236,202,9)" fg:x="4636379825" fg:w="15070829"/><text x="99.3886%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (15,070,829 samples, 0.32%)</title><rect x="99.1386%" y="133" width="0.3223%" height="15" fill="rgb(250,229,37)" fg:x="4636379825" fg:w="15070829"/><text x="99.3886%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (9,990,134 samples, 0.21%)</title><rect x="99.2473%" y="117" width="0.2136%" height="15" fill="rgb(206,174,23)" fg:x="4641460520" fg:w="9990134"/><text x="99.4973%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (9,990,134 samples, 0.21%)</title><rect x="99.2473%" y="101" width="0.2136%" height="15" fill="rgb(211,33,43)" fg:x="4641460520" fg:w="9990134"/><text x="99.4973%" y="111.50"></text></g><g><title>alloc::vec::from_elem (9,990,134 samples, 0.21%)</title><rect x="99.2473%" y="85" width="0.2136%" height="15" fill="rgb(245,58,50)" fg:x="4641460520" fg:w="9990134"/><text x="99.4973%" y="95.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (9,990,134 samples, 0.21%)</title><rect x="99.2473%" y="69" width="0.2136%" height="15" fill="rgb(244,68,36)" fg:x="4641460520" fg:w="9990134"/><text x="99.4973%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (9,990,134 samples, 0.21%)</title><rect x="99.2473%" y="53" width="0.2136%" height="15" fill="rgb(232,229,15)" fg:x="4641460520" fg:w="9990134"/><text x="99.4973%" y="63.50"></text></g><g><title>core::ptr::write (9,990,134 samples, 0.21%)</title><rect x="99.2473%" y="37" width="0.2136%" height="15" fill="rgb(254,30,23)" fg:x="4641460520" fg:w="9990134"/><text x="99.4973%" y="47.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5,043,817 samples, 0.11%)</title><rect x="99.4609%" y="453" width="0.1079%" height="15" fill="rgb(235,160,14)" fg:x="4651450654" fg:w="5043817"/><text x="99.7109%" y="463.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse (5,043,817 samples, 0.11%)</title><rect x="99.4609%" y="437" width="0.1079%" height="15" fill="rgb(212,155,44)" fg:x="4651450654" fg:w="5043817"/><text x="99.7109%" y="447.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5,043,817 samples, 0.11%)</title><rect x="99.4609%" y="421" width="0.1079%" height="15" fill="rgb(226,2,50)" fg:x="4651450654" fg:w="5043817"/><text x="99.7109%" y="431.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5,043,817 samples, 0.11%)</title><rect x="99.4609%" y="405" width="0.1079%" height="15" fill="rgb(234,177,6)" fg:x="4651450654" fg:w="5043817"/><text x="99.7109%" y="415.50"></text></g><g><title>__memmove_avx512_unaligned_erms (5,043,817 samples, 0.11%)</title><rect x="99.4609%" y="389" width="0.1079%" height="15" fill="rgb(217,24,9)" fg:x="4651450654" fg:w="5043817"/><text x="99.7109%" y="399.50"></text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_once (4,656,164,920 samples, 99.56%)</title><rect x="0.1137%" y="1093" width="99.5617%" height="15" fill="rgb(220,13,46)" fg:x="5318709" fg:w="4656164920"/><text x="0.3637%" y="1103.50">syntastica::processor::Processor&lt;Set&gt;::process_once</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process (4,656,164,920 samples, 99.56%)</title><rect x="0.1137%" y="1077" width="99.5617%" height="15" fill="rgb(239,221,27)" fg:x="5318709" fg:w="4656164920"/><text x="0.3637%" y="1087.50">syntastica::processor::Processor&lt;Set&gt;::process</text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl (4,656,164,920 samples, 99.56%)</title><rect x="0.1137%" y="1061" width="99.5617%" height="15" fill="rgb(222,198,25)" fg:x="5318709" fg:w="4656164920"/><text x="0.3637%" y="1071.50">syntastica::processor::Processor&lt;Set&gt;::process_impl</text></g><g><title>syntastica::processor::process_highlight_iter (70,422,068 samples, 1.51%)</title><rect x="98.1696%" y="1045" width="1.5058%" height="15" fill="rgb(211,99,13)" fg:x="4591061561" fg:w="70422068"/><text x="98.4196%" y="1055.50"></text></g><g><title>&lt;syntastica_highlight::HighlightIter&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::next (70,422,068 samples, 1.51%)</title><rect x="98.1696%" y="1029" width="1.5058%" height="15" fill="rgb(232,111,31)" fg:x="4591061561" fg:w="70422068"/><text x="98.4196%" y="1039.50"></text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl::{{closure}} (65,318,011 samples, 1.40%)</title><rect x="98.2787%" y="1013" width="1.3967%" height="15" fill="rgb(245,82,37)" fg:x="4596165618" fg:w="65318011"/><text x="98.5287%" y="1023.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (65,318,011 samples, 1.40%)</title><rect x="98.2787%" y="997" width="1.3967%" height="15" fill="rgb(227,149,46)" fg:x="4596165618" fg:w="65318011"/><text x="98.5287%" y="1007.50"></text></g><g><title>syntastica::processor::Processor&lt;Set&gt;::process_impl::{{closure}}::{{closure}} (65,318,011 samples, 1.40%)</title><rect x="98.2787%" y="981" width="1.3967%" height="15" fill="rgb(218,36,50)" fg:x="4596165618" fg:w="65318011"/><text x="98.5287%" y="991.50"></text></g><g><title>syntastica_core::language_set::SupportedLanguage::for_injection (65,318,011 samples, 1.40%)</title><rect x="98.2787%" y="965" width="1.3967%" height="15" fill="rgb(226,80,48)" fg:x="4596165618" fg:w="65318011"/><text x="98.5287%" y="975.50"></text></g><g><title>tft::detect::try_detect (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="949" width="1.1841%" height="15" fill="rgb(238,224,15)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="959.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="933" width="1.1841%" height="15" fill="rgb(241,136,10)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="943.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="917" width="1.1841%" height="15" fill="rgb(208,32,45)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="927.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="901" width="1.1841%" height="15" fill="rgb(207,135,9)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="911.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="885" width="1.1841%" height="15" fill="rgb(206,86,44)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="895.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="869" width="1.1841%" height="15" fill="rgb(245,177,15)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="879.50"></text></g><g><title>once_cell::imp::initialize_or_wait (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="853" width="1.1841%" height="15" fill="rgb(206,64,50)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="863.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="837" width="1.1841%" height="15" fill="rgb(234,36,40)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="847.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="821" width="1.1841%" height="15" fill="rgb(213,64,8)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="831.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="805" width="1.1841%" height="15" fill="rgb(210,75,36)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="815.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="789" width="1.1841%" height="15" fill="rgb(229,88,21)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="799.50"></text></g><g><title>core::ops::function::FnOnce::call_once (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="773" width="1.1841%" height="15" fill="rgb(252,204,47)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="783.50"></text></g><g><title>core::ops::function::FnOnce::call_once (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="757" width="1.1841%" height="15" fill="rgb(208,77,27)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="767.50"></text></g><g><title>tft::detect::pattern::PATTERN::{{closure}} (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="741" width="1.1841%" height="15" fill="rgb(221,76,26)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="751.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="725" width="1.1841%" height="15" fill="rgb(225,139,18)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="735.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="709" width="1.1841%" height="15" fill="rgb(230,137,11)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="719.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="693" width="1.1841%" height="15" fill="rgb(212,28,1)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="703.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="677" width="1.1841%" height="15" fill="rgb(248,164,17)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="687.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="661" width="1.1841%" height="15" fill="rgb(222,171,42)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="671.50"></text></g><g><title>once_cell::imp::initialize_or_wait (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="645" width="1.1841%" height="15" fill="rgb(243,84,45)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="655.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="629" width="1.1841%" height="15" fill="rgb(252,49,23)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="639.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="613" width="1.1841%" height="15" fill="rgb(215,19,7)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="623.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::{{closure}} (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="597" width="1.1841%" height="15" fill="rgb(238,81,41)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="607.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::{{closure}} (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="581" width="1.1841%" height="15" fill="rgb(210,199,37)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="591.50"></text></g><g><title>core::ops::function::FnOnce::call_once (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="565" width="1.1841%" height="15" fill="rgb(244,192,49)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="549" width="1.1841%" height="15" fill="rgb(226,211,11)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="559.50"></text></g><g><title>tft::detect::pattern::PATTERN::{{closure}}::RE::{{closure}} (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="533" width="1.1841%" height="15" fill="rgb(236,162,54)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="543.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="517" width="1.1841%" height="15" fill="rgb(220,229,9)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="527.50"></text></g><g><title>regex::builders::Builder::build_one_string (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="501" width="1.1841%" height="15" fill="rgb(250,87,22)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="511.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="485" width="1.1841%" height="15" fill="rgb(239,43,17)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="495.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (55,378,284 samples, 1.18%)</title><rect x="98.4913%" y="469" width="1.1841%" height="15" fill="rgb(231,177,25)" fg:x="4606105345" fg:w="55378284"/><text x="98.7413%" y="479.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (4,989,158 samples, 0.11%)</title><rect x="99.5687%" y="453" width="0.1067%" height="15" fill="rgb(219,179,1)" fg:x="4656494471" fg:w="4989158"/><text x="99.8187%" y="463.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4,989,158 samples, 0.11%)</title><rect x="99.5687%" y="437" width="0.1067%" height="15" fill="rgb(238,219,53)" fg:x="4656494471" fg:w="4989158"/><text x="99.8187%" y="447.50"></text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit (4,989,158 samples, 0.11%)</title><rect x="99.5687%" y="421" width="0.1067%" height="15" fill="rgb(232,167,36)" fg:x="4656494471" fg:w="4989158"/><text x="99.8187%" y="431.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4,989,158 samples, 0.11%)</title><rect x="99.5687%" y="405" width="0.1067%" height="15" fill="rgb(244,19,51)" fg:x="4656494471" fg:w="4989158"/><text x="99.8187%" y="415.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_repetition (4,989,158 samples, 0.11%)</title><rect x="99.5687%" y="389" width="0.1067%" height="15" fill="rgb(224,6,22)" fg:x="4656494471" fg:w="4989158"/><text x="99.8187%" y="399.50"></text></g><g><title>regex_syntax::hir::Hir::repetition (4,989,158 samples, 0.11%)</title><rect x="99.5687%" y="373" width="0.1067%" height="15" fill="rgb(224,145,5)" fg:x="4656494471" fg:w="4989158"/><text x="99.8187%" y="383.50"></text></g><g><title>kaka_nest::get_markdown::get_blogs (4,671,295,415 samples, 99.89%)</title><rect x="0.0000%" y="1253" width="99.8852%" height="15" fill="rgb(234,130,49)" fg:x="3" fg:w="4671295415"/><text x="0.2500%" y="1263.50">kaka_nest::get_markdown::get_blogs</text></g><g><title>pulldown_cmark::html::push_html (4,671,295,415 samples, 99.89%)</title><rect x="0.0000%" y="1237" width="99.8852%" height="15" fill="rgb(254,6,2)" fg:x="3" fg:w="4671295415"/><text x="0.2500%" y="1247.50">pulldown_cmark::html::push_html</text></g><g><title>pulldown_cmark::html::write_html_fmt (4,671,295,415 samples, 99.89%)</title><rect x="0.0000%" y="1221" width="99.8852%" height="15" fill="rgb(208,96,46)" fg:x="3" fg:w="4671295415"/><text x="0.2500%" y="1231.50">pulldown_cmark::html::write_html_fmt</text></g><g><title>pulldown_cmark::html::HtmlWriter&lt;I,W&gt;::run (4,671,295,415 samples, 99.89%)</title><rect x="0.0000%" y="1205" width="99.8852%" height="15" fill="rgb(239,3,39)" fg:x="3" fg:w="4671295415"/><text x="0.2500%" y="1215.50">pulldown_cmark::html::HtmlWriter&lt;I,W&gt;::run</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,671,295,415 samples, 99.89%)</title><rect x="0.0000%" y="1189" width="99.8852%" height="15" fill="rgb(233,210,1)" fg:x="3" fg:w="4671295415"/><text x="0.2500%" y="1199.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,671,295,415 samples, 99.89%)</title><rect x="0.0000%" y="1173" width="99.8852%" height="15" fill="rgb(244,137,37)" fg:x="3" fg:w="4671295415"/><text x="0.2500%" y="1183.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (4,671,295,415 samples, 99.89%)</title><rect x="0.0000%" y="1157" width="99.8852%" height="15" fill="rgb(240,136,2)" fg:x="3" fg:w="4671295415"/><text x="0.2500%" y="1167.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4,671,295,415 samples, 99.89%)</title><rect x="0.0000%" y="1141" width="99.8852%" height="15" fill="rgb(239,18,37)" fg:x="3" fg:w="4671295415"/><text x="0.2500%" y="1151.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>kaka_nest::pullmark_parsers::highlight_codeblocks::{{closure}} (4,671,295,415 samples, 99.89%)</title><rect x="0.0000%" y="1125" width="99.8852%" height="15" fill="rgb(218,185,22)" fg:x="3" fg:w="4671295415"/><text x="0.2500%" y="1135.50">kaka_nest::pullmark_parsers::highlight_codeblocks::{{closure}}</text></g><g><title>syntastica::highlight (4,665,976,709 samples, 99.77%)</title><rect x="0.1137%" y="1109" width="99.7715%" height="15" fill="rgb(225,218,4)" fg:x="5318709" fg:w="4665976709"/><text x="0.3637%" y="1119.50">syntastica::highlight</text></g><g><title>syntastica::renderer::render (9,811,789 samples, 0.21%)</title><rect x="99.6754%" y="1093" width="0.2098%" height="15" fill="rgb(230,182,32)" fg:x="4661483629" fg:w="9811789"/><text x="99.9254%" y="1103.50"></text></g><g><title>&lt;syntastica::renderer::HtmlRenderer as syntastica::renderer::Renderer&gt;::escape (9,811,789 samples, 0.21%)</title><rect x="99.6754%" y="1077" width="0.2098%" height="15" fill="rgb(242,56,43)" fg:x="4661483629" fg:w="9811789"/><text x="99.9254%" y="1087.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasick::new (9,811,789 samples, 0.21%)</title><rect x="99.6754%" y="1061" width="0.2098%" height="15" fill="rgb(233,99,24)" fg:x="4661483629" fg:w="9811789"/><text x="99.9254%" y="1071.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build (9,811,789 samples, 0.21%)</title><rect x="99.6754%" y="1045" width="0.2098%" height="15" fill="rgb(234,209,42)" fg:x="4661483629" fg:w="9811789"/><text x="99.9254%" y="1055.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build_auto (9,811,789 samples, 0.21%)</title><rect x="99.6754%" y="1029" width="0.2098%" height="15" fill="rgb(227,7,12)" fg:x="4661483629" fg:w="9811789"/><text x="99.9254%" y="1039.50"></text></g><g><title>aho_corasick::dfa::Builder::build_from_noncontiguous (9,811,789 samples, 0.21%)</title><rect x="99.6754%" y="1013" width="0.2098%" height="15" fill="rgb(245,203,43)" fg:x="4661483629" fg:w="9811789"/><text x="99.9254%" y="1023.50"></text></g><g><title>aho_corasick::dfa::Builder::finish_build_one_start (9,811,789 samples, 0.21%)</title><rect x="99.6754%" y="997" width="0.2098%" height="15" fill="rgb(238,205,33)" fg:x="4661483629" fg:w="9811789"/><text x="99.9254%" y="1007.50"></text></g><g><title>aho_corasick::dfa::sparse_iter (9,811,789 samples, 0.21%)</title><rect x="99.6754%" y="981" width="0.2098%" height="15" fill="rgb(231,56,7)" fg:x="4661483629" fg:w="9811789"/><text x="99.9254%" y="991.50"></text></g><g><title>aho_corasick::dfa::Builder::finish_build_one_start::{{closure}} (5,101,300 samples, 0.11%)</title><rect x="99.7761%" y="965" width="0.1091%" height="15" fill="rgb(244,186,29)" fg:x="4666194118" fg:w="5101300"/><text x="100.0261%" y="975.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::State::fail (5,101,300 samples, 0.11%)</title><rect x="99.7761%" y="949" width="0.1091%" height="15" fill="rgb(234,111,31)" fg:x="4666194118" fg:w="5101300"/><text x="100.0261%" y="959.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (4,676,400,619 samples, 99.99%)</title><rect x="0.0000%" y="1381" width="99.9944%" height="15" fill="rgb(241,149,10)" fg:x="3" fg:w="4676400619"/><text x="0.2500%" y="1391.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (4,676,400,619 samples, 99.99%)</title><rect x="0.0000%" y="1365" width="99.9944%" height="15" fill="rgb(249,206,44)" fg:x="3" fg:w="4676400619"/><text x="0.2500%" y="1375.50">__libc_start_call_main</text></g><g><title>main (4,676,400,619 samples, 99.99%)</title><rect x="0.0000%" y="1349" width="99.9944%" height="15" fill="rgb(251,153,30)" fg:x="3" fg:w="4676400619"/><text x="0.2500%" y="1359.50">main</text></g><g><title>std::rt::lang_start_internal (4,676,400,619 samples, 99.99%)</title><rect x="0.0000%" y="1333" width="99.9944%" height="15" fill="rgb(239,152,38)" fg:x="3" fg:w="4676400619"/><text x="0.2500%" y="1343.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (4,676,400,619 samples, 99.99%)</title><rect x="0.0000%" y="1317" width="99.9944%" height="15" fill="rgb(249,139,47)" fg:x="3" fg:w="4676400619"/><text x="0.2500%" y="1327.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (4,676,400,619 samples, 99.99%)</title><rect x="0.0000%" y="1301" width="99.9944%" height="15" fill="rgb(244,64,35)" fg:x="3" fg:w="4676400619"/><text x="0.2500%" y="1311.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (4,676,400,619 samples, 99.99%)</title><rect x="0.0000%" y="1285" width="99.9944%" height="15" fill="rgb(216,46,15)" fg:x="3" fg:w="4676400619"/><text x="0.2500%" y="1295.50">core::ops::function::FnOnce::call_once</text></g><g><title>kaka_nest::main (4,676,400,619 samples, 99.99%)</title><rect x="0.0000%" y="1269" width="99.9944%" height="15" fill="rgb(250,74,19)" fg:x="3" fg:w="4676400619"/><text x="0.2500%" y="1279.50">kaka_nest::main</text></g><g><title>std::fs::copy (5,105,204 samples, 0.11%)</title><rect x="99.8852%" y="1253" width="0.1092%" height="15" fill="rgb(249,42,33)" fg:x="4671295418" fg:w="5105204"/><text x="100.1352%" y="1263.50"></text></g><g><title>std::sys::fs::unix::copy (5,105,204 samples, 0.11%)</title><rect x="99.8852%" y="1237" width="0.1092%" height="15" fill="rgb(242,149,17)" fg:x="4671295418" fg:w="5105204"/><text x="100.1352%" y="1247.50"></text></g><g><title>&lt;std::sys::pal::unix::kernel_copy::Copier&lt;R,W&gt; as std::sys::pal::unix::kernel_copy::SpecCopy&gt;::copy (5,105,204 samples, 0.11%)</title><rect x="99.8852%" y="1221" width="0.1092%" height="15" fill="rgb(244,29,21)" fg:x="4671295418" fg:w="5105204"/><text x="100.1352%" y="1231.50"></text></g><g><title>all (4,676,663,487 samples, 100%)</title><rect x="0.0000%" y="1429" width="100.0000%" height="15" fill="rgb(220,130,37)" fg:x="0" fg:w="4676663487"/><text x="0.2500%" y="1439.50"></text></g><g><title>kaka-nest (4,676,663,487 samples, 100.00%)</title><rect x="0.0000%" y="1413" width="100.0000%" height="15" fill="rgb(211,67,2)" fg:x="0" fg:w="4676663487"/><text x="0.2500%" y="1423.50">kaka-nest</text></g><g><title>_start (4,676,663,487 samples, 100.00%)</title><rect x="0.0000%" y="1397" width="100.0000%" height="15" fill="rgb(235,68,52)" fg:x="0" fg:w="4676663487"/><text x="0.2500%" y="1407.50">_start</text></g></svg></svg>